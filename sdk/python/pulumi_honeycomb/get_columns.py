# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetColumnsResult',
    'AwaitableGetColumnsResult',
    'get_columns',
    'get_columns_output',
]

@pulumi.output_type
class GetColumnsResult:
    """
    A collection of values returned by GetColumns.
    """
    def __init__(__self__, dataset=None, id=None, names=None, starts_with=None):
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if starts_with and not isinstance(starts_with, str):
            raise TypeError("Expected argument 'starts_with' to be a str")
        pulumi.set(__self__, "starts_with", starts_with)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        """
        a list of all the column names found in the dataset
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="startsWith")
    def starts_with(self) -> Optional[str]:
        return pulumi.get(self, "starts_with")


class AwaitableGetColumnsResult(GetColumnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetColumnsResult(
            dataset=self.dataset,
            id=self.id,
            names=self.names,
            starts_with=self.starts_with)


def get_columns(dataset: Optional[str] = None,
                starts_with: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetColumnsResult:
    """
    ## # Data Source: get_columns

    The columns data source allows the columns of a dataset to be retrieved.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    all = honeycomb.get_columns(dataset=dataset)
    foo = honeycomb.get_columns(dataset=dataset,
        starts_with="foo_")
    ```


    :param str dataset: The dataset to retrieve the columns list from
    :param str starts_with: Only return columns starting with the given value.
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['startsWith'] = starts_with
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getColumns:GetColumns', __args__, opts=opts, typ=GetColumnsResult).value

    return AwaitableGetColumnsResult(
        dataset=pulumi.get(__ret__, 'dataset'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        starts_with=pulumi.get(__ret__, 'starts_with'))


@_utilities.lift_output_func(get_columns)
def get_columns_output(dataset: Optional[pulumi.Input[str]] = None,
                       starts_with: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetColumnsResult]:
    """
    ## # Data Source: get_columns

    The columns data source allows the columns of a dataset to be retrieved.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    all = honeycomb.get_columns(dataset=dataset)
    foo = honeycomb.get_columns(dataset=dataset,
        starts_with="foo_")
    ```


    :param str dataset: The dataset to retrieve the columns list from
    :param str starts_with: Only return columns starting with the given value.
    """
    ...
