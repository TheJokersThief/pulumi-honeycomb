# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetColumnResult',
    'AwaitableGetColumnResult',
    'get_column',
    'get_column_output',
]

@pulumi.output_type
class GetColumnResult:
    """
    A collection of values returned by GetColumn.
    """
    def __init__(__self__, created_at=None, dataset=None, description=None, hidden=None, id=None, last_written_at=None, name=None, type=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if hidden and not isinstance(hidden, bool):
            raise TypeError("Expected argument 'hidden' to be a bool")
        pulumi.set(__self__, "hidden", hidden)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_written_at and not isinstance(last_written_at, str):
            raise TypeError("Expected argument 'last_written_at' to be a str")
        pulumi.set(__self__, "last_written_at", last_written_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        the ISO8601 formatted time when the column was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        the description of the column
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        """
        whether or not the column is hidden from the query builder and results
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastWrittenAt")
    def last_written_at(self) -> str:
        """
        the ISO8601 formatted time that the column last received data
        """
        return pulumi.get(self, "last_written_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        the type of the column (string, integer, float, or boolean)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        """
        the  ISO8601 formatted time when the column's metadata (type, description, etc) was last changed
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetColumnResult(GetColumnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetColumnResult(
            created_at=self.created_at,
            dataset=self.dataset,
            description=self.description,
            hidden=self.hidden,
            id=self.id,
            last_written_at=self.last_written_at,
            name=self.name,
            type=self.type,
            updated_at=self.updated_at)


def get_column(dataset: Optional[str] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetColumnResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    mycol = honeycomb.get_column(dataset=dataset,
        name="mycol")
    ```


    :param str dataset: The dataset this column is associated with
    :param str name: The name of the column
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getColumn:GetColumn', __args__, opts=opts, typ=GetColumnResult).value

    return AwaitableGetColumnResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        dataset=pulumi.get(__ret__, 'dataset'),
        description=pulumi.get(__ret__, 'description'),
        hidden=pulumi.get(__ret__, 'hidden'),
        id=pulumi.get(__ret__, 'id'),
        last_written_at=pulumi.get(__ret__, 'last_written_at'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_column)
def get_column_output(dataset: Optional[pulumi.Input[str]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetColumnResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    mycol = honeycomb.get_column(dataset=dataset,
        name="mycol")
    ```


    :param str dataset: The dataset this column is associated with
    :param str name: The name of the column
    """
    ...
