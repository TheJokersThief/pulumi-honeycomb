// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: honeycomb.Board
 *
 * Creates a board. For more information about boards, check out [Collaborate with Boards](https://docs.honeycomb.io/working-with-your-data/collaborating/boards/#docs-sidebar).
 *
 * ## Example Usage
 *
 * ### Simple Board
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const queryGetQuerySpecification = honeycomb.GetQuerySpecification({
 *     calculations: [{
 *         op: "P99",
 *         column: "duration_ms",
 *     }],
 *     filters: [{
 *         column: "trace.parent_id",
 *         op: "does-not-exist",
 *     }],
 *     breakdowns: ["app.tenant"],
 * });
 * const queryQuery = new honeycomb.Query("queryQuery", {
 *     dataset: _var.dataset,
 *     queryJson: queryGetQuerySpecification.then(queryGetQuerySpecification => queryGetQuerySpecification.json),
 * });
 * const board = new honeycomb.Board("board", {queries: [{
 *     queryId: queryQuery.id,
 * }]});
 * ```
 *
 * ### Annotated Board
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const latencyByUseridGetQuerySpecification = honeycomb.GetQuerySpecification({
 *     timeRange: 86400,
 *     breakdowns: ["app.user_id"],
 *     calculations: [
 *         {
 *             op: "HEATMAP",
 *             column: "duration_ms",
 *         },
 *         {
 *             op: "P99",
 *             column: "duration_ms",
 *         },
 *     ],
 *     filters: [{
 *         column: "trace.parent_id",
 *         op: "does-not-exist",
 *     }],
 *     orders: [{
 *         column: "duration_ms",
 *         op: "P99",
 *         order: "descending",
 *     }],
 * });
 * const latencyByUseridQuery = new honeycomb.Query("latencyByUseridQuery", {
 *     dataset: _var.dataset,
 *     queryJson: latencyByUseridGetQuerySpecification.then(latencyByUseridGetQuerySpecification => latencyByUseridGetQuerySpecification.json),
 * });
 * const latencyByUseridQueryAnnotation = new honeycomb.QueryAnnotation("latencyByUseridQueryAnnotation", {
 *     dataset: _var.dataset,
 *     queryId: latencyByUseridQuery.id,
 *     description: "A breakdown of trace latency by User over the last 24 hours",
 * });
 * const overview = new honeycomb.Board("overview", {queries: [{
 *     caption: "Latency by User",
 *     queryId: latencyByUseridQuery.id,
 *     queryAnnotationId: latencyByUseridQueryAnnotation.id,
 *     graphSettings: {
 *         utcXaxis: true,
 *     },
 * }]});
 * ```
 *
 * ## Import
 *
 * Boards can be imported using their ID, e.g.
 *
 * ```sh
 * $ pulumi import honeycomb:index/board:Board my_board AobW9oAZX71
 * ```
 *
 * You can find the ID in the URL bar when visiting the board from the UI.
 */
export class Board extends pulumi.CustomResource {
    /**
     * Get an existing Board resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BoardState, opts?: pulumi.CustomResourceOptions): Board {
        return new Board(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycomb:index/board:Board';

    /**
     * Returns true if the given object is an instance of Board.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Board {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Board.__pulumiType;
    }

    /**
     * The URL to the board in the Honeycomb UI.
     */
    public /*out*/ readonly boardUrl!: pulumi.Output<string>;
    /**
     * the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.
     */
    public readonly columnLayout!: pulumi.Output<string>;
    /**
     * Description of the board. Supports Markdown.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the board.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Zero or more configurations blocks (described below) with the queries of the board.
     */
    public readonly queries!: pulumi.Output<outputs.BoardQuery[] | undefined>;
    /**
     * Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.
     *
     * @deprecated All Boards now are displayed visually in the UI. Setting this value will have no effect.
     */
    public readonly style!: pulumi.Output<string | undefined>;

    /**
     * Create a Board resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BoardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BoardArgs | BoardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BoardState | undefined;
            resourceInputs["boardUrl"] = state ? state.boardUrl : undefined;
            resourceInputs["columnLayout"] = state ? state.columnLayout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["style"] = state ? state.style : undefined;
        } else {
            const args = argsOrState as BoardArgs | undefined;
            resourceInputs["columnLayout"] = args ? args.columnLayout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["style"] = args ? args.style : undefined;
            resourceInputs["boardUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Board.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Board resources.
 */
export interface BoardState {
    /**
     * The URL to the board in the Honeycomb UI.
     */
    boardUrl?: pulumi.Input<string>;
    /**
     * the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.
     */
    columnLayout?: pulumi.Input<string>;
    /**
     * Description of the board. Supports Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the board.
     */
    name?: pulumi.Input<string>;
    /**
     * Zero or more configurations blocks (described below) with the queries of the board.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.BoardQuery>[]>;
    /**
     * Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.
     *
     * @deprecated All Boards now are displayed visually in the UI. Setting this value will have no effect.
     */
    style?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Board resource.
 */
export interface BoardArgs {
    /**
     * the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.
     */
    columnLayout?: pulumi.Input<string>;
    /**
     * Description of the board. Supports Markdown.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the board.
     */
    name?: pulumi.Input<string>;
    /**
     * Zero or more configurations blocks (described below) with the queries of the board.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.BoardQuery>[]>;
    /**
     * Deprecated: All Boards are now displayed as `visual` style. How the board should be displayed in the UI, either `visual` (the default) or `list`.
     *
     * @deprecated All Boards now are displayed visually in the UI. Setting this value will have no effect.
     */
    style?: pulumi.Input<string>;
}
