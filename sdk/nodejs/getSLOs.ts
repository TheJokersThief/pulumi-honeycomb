// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: honeycomb.GetSLOs
 *
 * The SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detailFilter`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const config = new pulumi.Config();
 * const dataset = config.require("dataset");
 * const all = honeycomb.GetSLOs({
 *     dataset: dataset,
 * });
 * const foo = honeycomb.GetSLOs({
 *     dataset: dataset,
 *     detailFilter: {
 *         name: "name",
 *         valueRegex: "foo_*",
 *     },
 * });
 * ```
 */
export function getSLOs(args: GetSLOsArgs, opts?: pulumi.InvokeOptions): Promise<GetSLOsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("honeycomb:index/getSLOs:GetSLOs", {
        "dataset": args.dataset,
        "detailFilter": args.detailFilter,
    }, opts);
}

/**
 * A collection of arguments for invoking GetSLOs.
 */
export interface GetSLOsArgs {
    /**
     * The dataset to retrieve the SLOs list from
     */
    dataset: string;
    /**
     * a block to further filter results as described below. `name` must be set when providing a filter.
     */
    detailFilter?: inputs.GetSLOsDetailFilter;
}

/**
 * A collection of values returned by GetSLOs.
 */
export interface GetSLOsResult {
    readonly dataset: string;
    readonly detailFilter?: outputs.GetSLOsDetailFilter;
    readonly id: string;
    /**
     * a list of all the SLO IDs found in the dataset
     */
    readonly ids: string[];
}
/**
 * ## # Data Source: honeycomb.GetSLOs
 *
 * The SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detailFilter`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const config = new pulumi.Config();
 * const dataset = config.require("dataset");
 * const all = honeycomb.GetSLOs({
 *     dataset: dataset,
 * });
 * const foo = honeycomb.GetSLOs({
 *     dataset: dataset,
 *     detailFilter: {
 *         name: "name",
 *         valueRegex: "foo_*",
 *     },
 * });
 * ```
 */
export function getSLOsOutput(args: GetSLOsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSLOsResult> {
    return pulumi.output(args).apply((a: any) => getSLOs(a, opts))
}

/**
 * A collection of arguments for invoking GetSLOs.
 */
export interface GetSLOsOutputArgs {
    /**
     * The dataset to retrieve the SLOs list from
     */
    dataset: pulumi.Input<string>;
    /**
     * a block to further filter results as described below. `name` must be set when providing a filter.
     */
    detailFilter?: pulumi.Input<inputs.GetSLOsDetailFilterArgs>;
}
