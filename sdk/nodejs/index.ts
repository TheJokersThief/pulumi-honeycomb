// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { BurnAlertArgs, BurnAlertState } from "./burnAlert";
export type BurnAlert = import("./burnAlert").BurnAlert;
export const BurnAlert: typeof import("./burnAlert").BurnAlert = null as any;
utilities.lazyLoad(exports, ["BurnAlert"], () => require("./burnAlert"));

export { DatasetArgs, DatasetState } from "./dataset";
export type Dataset = import("./dataset").Dataset;
export const Dataset: typeof import("./dataset").Dataset = null as any;
utilities.lazyLoad(exports, ["Dataset"], () => require("./dataset"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetAuthMetadataArgs, GetAuthMetadataResult, GetAuthMetadataOutputArgs } from "./getAuthMetadata";
export const getAuthMetadata: typeof import("./getAuthMetadata").getAuthMetadata = null as any;
export const getAuthMetadataOutput: typeof import("./getAuthMetadata").getAuthMetadataOutput = null as any;
utilities.lazyLoad(exports, ["getAuthMetadata","getAuthMetadataOutput"], () => require("./getAuthMetadata"));

export { GetDatasetArgs, GetDatasetResult, GetDatasetOutputArgs } from "./getDataset";
export const getDataset: typeof import("./getDataset").getDataset = null as any;
export const getDatasetOutput: typeof import("./getDataset").getDatasetOutput = null as any;
utilities.lazyLoad(exports, ["getDataset","getDatasetOutput"], () => require("./getDataset"));

export { GetDatasetsArgs, GetDatasetsResult, GetDatasetsOutputArgs } from "./getDatasets";
export const getDatasets: typeof import("./getDatasets").getDatasets = null as any;
export const getDatasetsOutput: typeof import("./getDatasets").getDatasetsOutput = null as any;
utilities.lazyLoad(exports, ["getDatasets","getDatasetsOutput"], () => require("./getDatasets"));

export { GetDerivedColumnArgs, GetDerivedColumnResult, GetDerivedColumnOutputArgs } from "./getDerivedColumn";
export const getDerivedColumn: typeof import("./getDerivedColumn").getDerivedColumn = null as any;
export const getDerivedColumnOutput: typeof import("./getDerivedColumn").getDerivedColumnOutput = null as any;
utilities.lazyLoad(exports, ["getDerivedColumn","getDerivedColumnOutput"], () => require("./getDerivedColumn"));

export { GetDerivedColumnsArgs, GetDerivedColumnsResult, GetDerivedColumnsOutputArgs } from "./getDerivedColumns";
export const getDerivedColumns: typeof import("./getDerivedColumns").getDerivedColumns = null as any;
export const getDerivedColumnsOutput: typeof import("./getDerivedColumns").getDerivedColumnsOutput = null as any;
utilities.lazyLoad(exports, ["getDerivedColumns","getDerivedColumnsOutput"], () => require("./getDerivedColumns"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GetQuerySpecificationArgs, GetQuerySpecificationResult, GetQuerySpecificationOutputArgs } from "./getQuerySpecification";
export const getQuerySpecification: typeof import("./getQuerySpecification").getQuerySpecification = null as any;
export const getQuerySpecificationOutput: typeof import("./getQuerySpecification").getQuerySpecificationOutput = null as any;
utilities.lazyLoad(exports, ["getQuerySpecification","getQuerySpecificationOutput"], () => require("./getQuerySpecification"));

export { GetSLOArgs, GetSLOResult, GetSLOOutputArgs } from "./getSLO";
export const getSLO: typeof import("./getSLO").getSLO = null as any;
export const getSLOOutput: typeof import("./getSLO").getSLOOutput = null as any;
utilities.lazyLoad(exports, ["getSLO","getSLOOutput"], () => require("./getSLO"));

export { GetSLOsArgs, GetSLOsResult, GetSLOsOutputArgs } from "./getSLOs";
export const getSLOs: typeof import("./getSLOs").getSLOs = null as any;
export const getSLOsOutput: typeof import("./getSLOs").getSLOsOutput = null as any;
utilities.lazyLoad(exports, ["getSLOs","getSLOsOutput"], () => require("./getSLOs"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QueryArgs, QueryState } from "./query";
export type Query = import("./query").Query;
export const Query: typeof import("./query").Query = null as any;
utilities.lazyLoad(exports, ["Query"], () => require("./query"));

export { TriggerArgs, TriggerState } from "./trigger";
export type Trigger = import("./trigger").Trigger;
export const Trigger: typeof import("./trigger").Trigger = null as any;
utilities.lazyLoad(exports, ["Trigger"], () => require("./trigger"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "honeycomb:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "honeycomb:index/burnAlert:BurnAlert":
                return new BurnAlert(name, <any>undefined, { urn })
            case "honeycomb:index/dataset:Dataset":
                return new Dataset(name, <any>undefined, { urn })
            case "honeycomb:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "honeycomb:index/query:Query":
                return new Query(name, <any>undefined, { urn })
            case "honeycomb:index/trigger:Trigger":
                return new Trigger(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("honeycomb", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("honeycomb", "index/burnAlert", _module)
pulumi.runtime.registerResourceModule("honeycomb", "index/dataset", _module)
pulumi.runtime.registerResourceModule("honeycomb", "index/environment", _module)
pulumi.runtime.registerResourceModule("honeycomb", "index/query", _module)
pulumi.runtime.registerResourceModule("honeycomb", "index/trigger", _module)
pulumi.runtime.registerResourcePackage("honeycomb", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:honeycomb") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
