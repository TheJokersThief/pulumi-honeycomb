// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: honeycomb.GetQuerySpecification
 *
 * Generates a [Query Specificaiton](https://docs.honeycomb.io/api/query-specification/) in JSON format.
 *
 * This is a data source which can be used to construct a JSON representation of a Honeycomb [Query Specification](https://docs.honeycomb.io/api/query-specification/). The `json` attribute contains a serialized JSON representation which can be passed to the `queryJson` field of the `honeycomb.Query` resource for use in boards and triggers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const example = honeycomb.GetQuerySpecification({
 *     calculations: [{
 *         op: "AVG",
 *         column: "duration_ms",
 *     }],
 *     filters: [
 *         {
 *             column: "trace.parent_id",
 *             op: "does-not-exist",
 *         },
 *         {
 *             column: "app.tenant",
 *             op: "=",
 *             value: "ThatSpecialTenant",
 *         },
 *     ],
 *     filterCombination: "AND",
 *     breakdowns: ["app.tenant"],
 *     timeRange: 28800,
 * });
 * export const jsonQuery = example.then(example => example.json);
 * ```
 */
export function getQuerySpecification(args?: GetQuerySpecificationArgs, opts?: pulumi.InvokeOptions): Promise<GetQuerySpecificationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("honeycomb:index/getQuerySpecification:GetQuerySpecification", {
        "breakdowns": args.breakdowns,
        "calculations": args.calculations,
        "endTime": args.endTime,
        "filterCombination": args.filterCombination,
        "filters": args.filters,
        "granularity": args.granularity,
        "havings": args.havings,
        "limit": args.limit,
        "orders": args.orders,
        "startTime": args.startTime,
        "timeRange": args.timeRange,
    }, opts);
}

/**
 * A collection of arguments for invoking GetQuerySpecification.
 */
export interface GetQuerySpecificationArgs {
    /**
     * A list of fields to group by.
     */
    breakdowns?: string[];
    /**
     * Zero or more configuration blocks (described below) with the calculations that should be displayed. If no calculations are specified, `COUNT` will be used.
     */
    calculations?: inputs.GetQuerySpecificationCalculation[];
    /**
     * The absolute end time of the query in Unix Time (= seconds since epoch).
     */
    endTime?: number;
    /**
     * How to combine multiple filters, either `AND` (default) or `OR`.
     */
    filterCombination?: string;
    /**
     * Zero or more configuration blocks (described below) with the filters that should be applied.
     */
    filters?: inputs.GetQuerySpecificationFilter[];
    /**
     * The time resolution of the query’s graph, in seconds. Valid values must be in between the query’s time range /10 at maximum, and /1000 at minimum.
     *
     * > **NOTE** It is not allowed to specify all three of `timeRange`, `startTime` and `endTime`. For more details about specifying time windows, check [Query specification: A caveat on time](https://docs.honeycomb.io/api/query-specification/#a-caveat-on-time).
     */
    granularity?: number;
    /**
     * Zero or more filters used to restrict returned groups in the query result.
     */
    havings?: inputs.GetQuerySpecificationHaving[];
    /**
     * The maximum number of query results, must be between 1 and 1000.
     */
    limit?: number;
    /**
     * Zero or more configuration blocks (described below) describing how to order the query results. Each term must appear in either `calculation` or `breakdowns`.
     */
    orders?: inputs.GetQuerySpecificationOrder[];
    /**
     * The absolute start time of the query in Unix Time (= seconds since epoch).
     */
    startTime?: number;
    /**
     * The time range of the query in seconds, defaults to `7200` (two hours).
     */
    timeRange?: number;
}

/**
 * A collection of values returned by GetQuerySpecification.
 */
export interface GetQuerySpecificationResult {
    readonly breakdowns?: string[];
    readonly calculations?: outputs.GetQuerySpecificationCalculation[];
    readonly endTime?: number;
    readonly filterCombination?: string;
    readonly filters?: outputs.GetQuerySpecificationFilter[];
    readonly granularity?: number;
    readonly havings?: outputs.GetQuerySpecificationHaving[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * JSON representation of the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification), can be used as input for other resources.
     */
    readonly json: string;
    readonly limit?: number;
    readonly orders?: outputs.GetQuerySpecificationOrder[];
    readonly startTime?: number;
    readonly timeRange?: number;
}
/**
 * ## # Data Source: honeycomb.GetQuerySpecification
 *
 * Generates a [Query Specificaiton](https://docs.honeycomb.io/api/query-specification/) in JSON format.
 *
 * This is a data source which can be used to construct a JSON representation of a Honeycomb [Query Specification](https://docs.honeycomb.io/api/query-specification/). The `json` attribute contains a serialized JSON representation which can be passed to the `queryJson` field of the `honeycomb.Query` resource for use in boards and triggers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const example = honeycomb.GetQuerySpecification({
 *     calculations: [{
 *         op: "AVG",
 *         column: "duration_ms",
 *     }],
 *     filters: [
 *         {
 *             column: "trace.parent_id",
 *             op: "does-not-exist",
 *         },
 *         {
 *             column: "app.tenant",
 *             op: "=",
 *             value: "ThatSpecialTenant",
 *         },
 *     ],
 *     filterCombination: "AND",
 *     breakdowns: ["app.tenant"],
 *     timeRange: 28800,
 * });
 * export const jsonQuery = example.then(example => example.json);
 * ```
 */
export function getQuerySpecificationOutput(args?: GetQuerySpecificationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQuerySpecificationResult> {
    return pulumi.output(args).apply((a: any) => getQuerySpecification(a, opts))
}

/**
 * A collection of arguments for invoking GetQuerySpecification.
 */
export interface GetQuerySpecificationOutputArgs {
    /**
     * A list of fields to group by.
     */
    breakdowns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Zero or more configuration blocks (described below) with the calculations that should be displayed. If no calculations are specified, `COUNT` will be used.
     */
    calculations?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationCalculationArgs>[]>;
    /**
     * The absolute end time of the query in Unix Time (= seconds since epoch).
     */
    endTime?: pulumi.Input<number>;
    /**
     * How to combine multiple filters, either `AND` (default) or `OR`.
     */
    filterCombination?: pulumi.Input<string>;
    /**
     * Zero or more configuration blocks (described below) with the filters that should be applied.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationFilterArgs>[]>;
    /**
     * The time resolution of the query’s graph, in seconds. Valid values must be in between the query’s time range /10 at maximum, and /1000 at minimum.
     *
     * > **NOTE** It is not allowed to specify all three of `timeRange`, `startTime` and `endTime`. For more details about specifying time windows, check [Query specification: A caveat on time](https://docs.honeycomb.io/api/query-specification/#a-caveat-on-time).
     */
    granularity?: pulumi.Input<number>;
    /**
     * Zero or more filters used to restrict returned groups in the query result.
     */
    havings?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationHavingArgs>[]>;
    /**
     * The maximum number of query results, must be between 1 and 1000.
     */
    limit?: pulumi.Input<number>;
    /**
     * Zero or more configuration blocks (described below) describing how to order the query results. Each term must appear in either `calculation` or `breakdowns`.
     */
    orders?: pulumi.Input<pulumi.Input<inputs.GetQuerySpecificationOrderArgs>[]>;
    /**
     * The absolute start time of the query in Unix Time (= seconds since epoch).
     */
    startTime?: pulumi.Input<number>;
    /**
     * The time range of the query in seconds, defaults to `7200` (two hours).
     */
    timeRange?: pulumi.Input<number>;
}
