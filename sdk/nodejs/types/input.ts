// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApiKeyPermissions {
    /**
     * Allow this key to create missing datasets when sending telemetry. Defaults to `false`.
     */
    createDatasets?: pulumi.Input<boolean>;
}

export interface BurnAlertRecipient {
    /**
     * The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
     */
    id?: pulumi.Input<string>;
    /**
     * a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
     *
     * | Type      | Target              |
     * |-----------|---------------------|
     * | email     | an email address    |
     * | pagerduty | _N/A_               |
     * | slack     | name of the channel |
     * | webhook   | name of the webhook |
     */
    notificationDetails?: pulumi.Input<inputs.BurnAlertRecipientNotificationDetails>;
    /**
     * Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
     */
    target?: pulumi.Input<string>;
    /**
     * The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.
     */
    type?: pulumi.Input<string>;
}

export interface BurnAlertRecipientNotificationDetails {
    /**
     * The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
     */
    pagerdutySeverity?: pulumi.Input<string>;
}

export interface GetAuthMetadataApiKeyAccess {
    /**
     * `true` if this API key can create and manage Boards.
     */
    boards?: boolean;
    /**
     * `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
     */
    columns?: boolean;
    /**
     * `true` if this API key can create and manage Datasets.
     */
    datasets?: boolean;
    /**
     * `true` if this API key can key can send events to Honeycomb.
     */
    events?: boolean;
    /**
     * `true` if this API key can create and manage Markers.
     */
    markers?: boolean;
    /**
     * `true` if this API key can execute existing Queries via the Query Data API.
     */
    queries?: boolean;
    /**
     * `true` if this API key can create and manage Recipients.
     */
    recipients?: boolean;
    /**
     * `true` if this API key can create and manage SLOs.
     */
    slos?: boolean;
    /**
     * `true` if this API key can create and manage Triggers.
     */
    triggers?: boolean;
}

export interface GetAuthMetadataApiKeyAccessArgs {
    /**
     * `true` if this API key can create and manage Boards.
     */
    boards?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
     */
    columns?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage Datasets.
     */
    datasets?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can key can send events to Honeycomb.
     */
    events?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage Markers.
     */
    markers?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can execute existing Queries via the Query Data API.
     */
    queries?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage Recipients.
     */
    recipients?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage SLOs.
     */
    slos?: pulumi.Input<boolean>;
    /**
     * `true` if this API key can create and manage Triggers.
     */
    triggers?: pulumi.Input<boolean>;
}

export interface GetAuthMetadataEnvironment {
    /**
     * `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
     */
    classic?: boolean;
    /**
     * The name of the Team.
     */
    name?: string;
    /**
     * The slug of the Team.
     */
    slug?: string;
}

export interface GetAuthMetadataEnvironmentArgs {
    /**
     * `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
     */
    classic?: pulumi.Input<boolean>;
    /**
     * The name of the Team.
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the Team.
     */
    slug?: pulumi.Input<string>;
}

export interface GetAuthMetadataTeam {
    /**
     * The name of the Team.
     */
    name?: string;
    /**
     * The slug of the Team.
     */
    slug?: string;
}

export interface GetAuthMetadataTeamArgs {
    /**
     * The name of the Team.
     */
    name?: pulumi.Input<string>;
    /**
     * The slug of the Team.
     */
    slug?: pulumi.Input<string>;
}

export interface GetDatasetsDetailFilter {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: string;
    /**
     * The value of the detail field to match on.
     */
    value?: string;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: string;
}

export interface GetDatasetsDetailFilterArgs {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the detail field to match on.
     */
    value?: pulumi.Input<string>;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: pulumi.Input<string>;
}

export interface GetEnvironmentsDetailFilter {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: string;
    /**
     * The value of the detail field to match on.
     */
    value?: string;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: string;
}

export interface GetEnvironmentsDetailFilterArgs {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the detail field to match on.
     */
    value?: pulumi.Input<string>;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: pulumi.Input<string>;
}

export interface GetQuerySpecificationCalculation {
    /**
     * The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
     */
    column?: string;
    /**
     * The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
     */
    op: string;
}

export interface GetQuerySpecificationCalculationArgs {
    /**
     * The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
     */
    column?: pulumi.Input<string>;
    /**
     * The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
     */
    op: pulumi.Input<string>;
}

export interface GetQuerySpecificationFilter {
    /**
     * The column to apply the filter to.
     */
    column: string;
    /**
     * The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
     */
    op: string;
    /**
     * The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
     *
     * * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
     */
    value?: string;
}

export interface GetQuerySpecificationFilterArgs {
    /**
     * The column to apply the filter to.
     */
    column: pulumi.Input<string>;
    /**
     * The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
     */
    op: pulumi.Input<string>;
    /**
     * The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
     *
     * * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
     */
    value?: pulumi.Input<string>;
}

export interface GetQuerySpecificationHaving {
    /**
     * The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
     */
    calculateOp: string;
    /**
     * The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
     */
    column?: string;
    /**
     * The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
     */
    op: string;
    /**
     * The value used with `op`. Currently assumed to be a number.
     *
     * > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
     */
    value: number;
}

export interface GetQuerySpecificationHavingArgs {
    /**
     * The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
     */
    calculateOp: pulumi.Input<string>;
    /**
     * The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
     */
    column?: pulumi.Input<string>;
    /**
     * The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
     */
    op: pulumi.Input<string>;
    /**
     * The value used with `op`. Currently assumed to be a number.
     *
     * > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
     */
    value: pulumi.Input<number>;
}

export interface GetQuerySpecificationOrder {
    /**
     * Either a column present in `breakdown` or a column that `op` applies to.
     */
    column?: string;
    /**
     * The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
     */
    op?: string;
    /**
     * The sort direction, if set must be `ascending` or `descending`.
     */
    order?: string;
}

export interface GetQuerySpecificationOrderArgs {
    /**
     * Either a column present in `breakdown` or a column that `op` applies to.
     */
    column?: pulumi.Input<string>;
    /**
     * The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
     */
    op?: pulumi.Input<string>;
    /**
     * The sort direction, if set must be `ascending` or `descending`.
     */
    order?: pulumi.Input<string>;
}

export interface GetSLOsDetailFilter {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: string;
    /**
     * The value of the detail field to match on.
     */
    value?: string;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: string;
}

export interface GetSLOsDetailFilterArgs {
    /**
     * The name of the detail field to filter by. Currently only `name` is supported.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the detail field to match on.
     */
    value?: pulumi.Input<string>;
    /**
     * A regular expression string to apply to the value of the detail field to match on.
     *
     * > **Note** one of `value` or `valueRegex` is required.
     */
    valueRegex?: pulumi.Input<string>;
}

export interface TriggerEvaluationSchedule {
    /**
     * A list of days of the week (in lowercase) to evaluate the trigger on
     */
    daysOfWeeks: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)
     */
    endTime: pulumi.Input<string>;
    /**
     * UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)
     */
    startTime: pulumi.Input<string>;
}

export interface TriggerRecipient {
    /**
     * The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.
     */
    id?: pulumi.Input<string>;
    /**
     * a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
     *
     * Type      | Target
     * ----------|-------------------------
     * email     | an email address
     * marker    | name of the marker
     * pagerduty | _N/A_
     * slack     | name of the channel
     * webhook   | name of the webhook
     */
    notificationDetails?: pulumi.Input<inputs.TriggerRecipientNotificationDetails>;
    /**
     * Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).
     * Cannot not be used in combination with `id`.
     */
    target?: pulumi.Input<string>;
    /**
     * The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.
     * Cannot not be used in combination with `id`.
     */
    type?: pulumi.Input<string>;
}

export interface TriggerRecipientNotificationDetails {
    /**
     * The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
     */
    pagerdutySeverity?: pulumi.Input<string>;
}

export interface TriggerThreshold {
    /**
     * The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.
     */
    exceededLimit?: pulumi.Input<number>;
    /**
     * The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
     */
    op: pulumi.Input<string>;
    /**
     * The value to be used with the operator.
     */
    value: pulumi.Input<number>;
}
