// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: honeycomb.BurnAlert
 *
 * Creates a burn alert.
 *
 * For more information about burn alerts,
 * check out [Define Burn Alerts](https://docs.honeycomb.io/working-with-your-data/slos/burn-alerts).
 *
 * ## Example Usage
 *
 * ### Basic Example - Exhaustion Time Burn Alert
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const config = new pulumi.Config();
 * const dataset = config.require("dataset");
 * const sloId = config.require("sloId");
 * const exampleAlert = new honeycomb.BurnAlert("exampleAlert", {
 *     alertType: "exhaustion_time",
 *     exhaustionMinutes: 480,
 *     dataset: dataset,
 *     sloId: sloId,
 *     recipients: [
 *         {
 *             type: "email",
 *             target: "hello@example.com",
 *         },
 *         {
 *             type: "slack",
 *             target: "#example-channel",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Basic Example - Budget Rate Burn Alert
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const config = new pulumi.Config();
 * const dataset = config.require("dataset");
 * const sloId = config.require("sloId");
 * const exampleAlert = new honeycomb.BurnAlert("exampleAlert", {
 *     alertType: "budget_rate",
 *     budgetRateWindowMinutes: 480,
 *     budgetRateDecreasePercent: 1,
 *     dataset: dataset,
 *     sloId: sloId,
 *     recipients: [{
 *         type: "webhook",
 *         target: "name of the webhook",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Burn alerts can be imported using a combination of the dataset name and their ID, e.g.
 *
 * ```sh
 * $ pulumi import honeycomb:index/burnAlert:BurnAlert my_alert my-dataset/bj9BwOb1uKz
 * ```
 */
export class BurnAlert extends pulumi.CustomResource {
    /**
     * Get an existing BurnAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BurnAlertState, opts?: pulumi.CustomResourceOptions): BurnAlert {
        return new BurnAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycomb:index/burnAlert:BurnAlert';

    /**
     * Returns true if the given object is an instance of BurnAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BurnAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BurnAlert.__pulumiType;
    }

    /**
     * Type of the burn alert. Valid values are `exhaustionTime` and `budgetRate`. 
     * Defaults to `exhaustionTime`.
     */
    public readonly alertType!: pulumi.Output<string>;
    /**
     * The percent the budget has decreased over the budget rate window.
     * The alert will fire when this budget decrease threshold is reached.
     * Must be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    public readonly budgetRateDecreasePercent!: pulumi.Output<number | undefined>;
    /**
     * The time period, in minutes, over which a budget rate will be calculated. 
     * Must be between 60 and the associated SLO's time period.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    public readonly budgetRateWindowMinutes!: pulumi.Output<number | undefined>;
    /**
     * The dataset this burn alert is associated with.
     */
    public readonly dataset!: pulumi.Output<string>;
    /**
     * The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and 
     * the alert will fire.
     * Must be 0 or greater.
     * Required when `alertType` is `exhaustionTime`.
     * Must not be provided when `alertType` is `budgetRate`.
     */
    public readonly exhaustionMinutes!: pulumi.Output<number | undefined>;
    /**
     * Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.
     */
    public readonly recipients!: pulumi.Output<outputs.BurnAlertRecipient[] | undefined>;
    /**
     * ID of the SLO this burn alert is associated with.
     */
    public readonly sloId!: pulumi.Output<string>;

    /**
     * Create a BurnAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BurnAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BurnAlertArgs | BurnAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BurnAlertState | undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["budgetRateDecreasePercent"] = state ? state.budgetRateDecreasePercent : undefined;
            resourceInputs["budgetRateWindowMinutes"] = state ? state.budgetRateWindowMinutes : undefined;
            resourceInputs["dataset"] = state ? state.dataset : undefined;
            resourceInputs["exhaustionMinutes"] = state ? state.exhaustionMinutes : undefined;
            resourceInputs["recipients"] = state ? state.recipients : undefined;
            resourceInputs["sloId"] = state ? state.sloId : undefined;
        } else {
            const args = argsOrState as BurnAlertArgs | undefined;
            if ((!args || args.dataset === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataset'");
            }
            if ((!args || args.sloId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sloId'");
            }
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["budgetRateDecreasePercent"] = args ? args.budgetRateDecreasePercent : undefined;
            resourceInputs["budgetRateWindowMinutes"] = args ? args.budgetRateWindowMinutes : undefined;
            resourceInputs["dataset"] = args ? args.dataset : undefined;
            resourceInputs["exhaustionMinutes"] = args ? args.exhaustionMinutes : undefined;
            resourceInputs["recipients"] = args ? args.recipients : undefined;
            resourceInputs["sloId"] = args ? args.sloId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BurnAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BurnAlert resources.
 */
export interface BurnAlertState {
    /**
     * Type of the burn alert. Valid values are `exhaustionTime` and `budgetRate`. 
     * Defaults to `exhaustionTime`.
     */
    alertType?: pulumi.Input<string>;
    /**
     * The percent the budget has decreased over the budget rate window.
     * The alert will fire when this budget decrease threshold is reached.
     * Must be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    budgetRateDecreasePercent?: pulumi.Input<number>;
    /**
     * The time period, in minutes, over which a budget rate will be calculated. 
     * Must be between 60 and the associated SLO's time period.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    budgetRateWindowMinutes?: pulumi.Input<number>;
    /**
     * The dataset this burn alert is associated with.
     */
    dataset?: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and 
     * the alert will fire.
     * Must be 0 or greater.
     * Required when `alertType` is `exhaustionTime`.
     * Must not be provided when `alertType` is `budgetRate`.
     */
    exhaustionMinutes?: pulumi.Input<number>;
    /**
     * Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.
     */
    recipients?: pulumi.Input<pulumi.Input<inputs.BurnAlertRecipient>[]>;
    /**
     * ID of the SLO this burn alert is associated with.
     */
    sloId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BurnAlert resource.
 */
export interface BurnAlertArgs {
    /**
     * Type of the burn alert. Valid values are `exhaustionTime` and `budgetRate`. 
     * Defaults to `exhaustionTime`.
     */
    alertType?: pulumi.Input<string>;
    /**
     * The percent the budget has decreased over the budget rate window.
     * The alert will fire when this budget decrease threshold is reached.
     * Must be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    budgetRateDecreasePercent?: pulumi.Input<number>;
    /**
     * The time period, in minutes, over which a budget rate will be calculated. 
     * Must be between 60 and the associated SLO's time period.
     * Required when `alertType` is `budgetRate`.
     * Must not be provided when `alertType` is `exhaustionTime`.
     */
    budgetRateWindowMinutes?: pulumi.Input<number>;
    /**
     * The dataset this burn alert is associated with.
     */
    dataset: pulumi.Input<string>;
    /**
     * The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and 
     * the alert will fire.
     * Must be 0 or greater.
     * Required when `alertType` is `exhaustionTime`.
     * Must not be provided when `alertType` is `budgetRate`.
     */
    exhaustionMinutes?: pulumi.Input<number>;
    /**
     * Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.
     */
    recipients?: pulumi.Input<pulumi.Input<inputs.BurnAlertRecipient>[]>;
    /**
     * ID of the SLO this burn alert is associated with.
     */
    sloId: pulumi.Input<string>;
}
