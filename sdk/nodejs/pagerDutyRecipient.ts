// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: honeycomb.PagerDutyRecipient
 *
 * `honeycomb.PagerDutyRecipient` allows you to define and manage a PagerDuty recipient that can be used by Triggers or BurnAlerts notifications.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const prod_oncall = new honeycomb.PagerDutyRecipient("prod-oncall", {
 *     integrationKey: "cd6e8de3c857aefc950e0d5ebcb79ac2",
 *     integrationName: "Production on-call notifications",
 * });
 * ```
 *
 * ## Import
 *
 * PagerDuty Recipients can be imported by their ID, e.g.
 *
 * ```sh
 * $ pulumi import honeycomb:index/pagerDutyRecipient:PagerDutyRecipient my_recipient nx2zsegA0dZ
 * ```
 */
export class PagerDutyRecipient extends pulumi.CustomResource {
    /**
     * Get an existing PagerDutyRecipient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PagerDutyRecipientState, opts?: pulumi.CustomResourceOptions): PagerDutyRecipient {
        return new PagerDutyRecipient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'honeycomb:index/pagerDutyRecipient:PagerDutyRecipient';

    /**
     * Returns true if the given object is an instance of PagerDutyRecipient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PagerDutyRecipient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PagerDutyRecipient.__pulumiType;
    }

    /**
     * The key of the PagerDuty Integration to send the notification to.
     */
    public readonly integrationKey!: pulumi.Output<string>;
    /**
     * The name of the PagerDuty Integration to send the notification to.
     */
    public readonly integrationName!: pulumi.Output<string>;

    /**
     * Create a PagerDutyRecipient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PagerDutyRecipientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PagerDutyRecipientArgs | PagerDutyRecipientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PagerDutyRecipientState | undefined;
            resourceInputs["integrationKey"] = state ? state.integrationKey : undefined;
            resourceInputs["integrationName"] = state ? state.integrationName : undefined;
        } else {
            const args = argsOrState as PagerDutyRecipientArgs | undefined;
            if ((!args || args.integrationKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationKey'");
            }
            if ((!args || args.integrationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationName'");
            }
            resourceInputs["integrationKey"] = args?.integrationKey ? pulumi.secret(args.integrationKey) : undefined;
            resourceInputs["integrationName"] = args ? args.integrationName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["integrationKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(PagerDutyRecipient.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PagerDutyRecipient resources.
 */
export interface PagerDutyRecipientState {
    /**
     * The key of the PagerDuty Integration to send the notification to.
     */
    integrationKey?: pulumi.Input<string>;
    /**
     * The name of the PagerDuty Integration to send the notification to.
     */
    integrationName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PagerDutyRecipient resource.
 */
export interface PagerDutyRecipientArgs {
    /**
     * The key of the PagerDuty Integration to send the notification to.
     */
    integrationKey: pulumi.Input<string>;
    /**
     * The name of the PagerDuty Integration to send the notification to.
     */
    integrationName: pulumi.Input<string>;
}
