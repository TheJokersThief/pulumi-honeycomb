// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: honeycomb.GetEnvironments
 *
 * The Environments data source retrieves the Team's environments.
 *
 * > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const all = honeycomb.GetEnvironments({});
 * const foo = honeycomb.GetEnvironments({
 *     detailFilter: {
 *         name: "name",
 *         valueRegex: "foo_*",
 *     },
 * });
 * ```
 */
export function getEnvironments(args?: GetEnvironmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetEnvironmentsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("honeycomb:index/getEnvironments:GetEnvironments", {
        "detailFilter": args.detailFilter,
    }, opts);
}

/**
 * A collection of arguments for invoking GetEnvironments.
 */
export interface GetEnvironmentsArgs {
    /**
     * a block to further filter results as described below. `name` must be set when providing a filter.
     */
    detailFilter?: inputs.GetEnvironmentsDetailFilter;
}

/**
 * A collection of values returned by GetEnvironments.
 */
export interface GetEnvironmentsResult {
    readonly detailFilter?: outputs.GetEnvironmentsDetailFilter;
    readonly id: string;
    /**
     * a list of all the Environment IDs found in the Team.
     */
    readonly ids: string[];
}
/**
 * ## # Data Source: honeycomb.GetEnvironments
 *
 * The Environments data source retrieves the Team's environments.
 *
 * > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as honeycomb from "@pulumi/honeycomb";
 *
 * const all = honeycomb.GetEnvironments({});
 * const foo = honeycomb.GetEnvironments({
 *     detailFilter: {
 *         name: "name",
 *         valueRegex: "foo_*",
 *     },
 * });
 * ```
 */
export function getEnvironmentsOutput(args?: GetEnvironmentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEnvironmentsResult> {
    return pulumi.output(args).apply((a: any) => getEnvironments(a, opts))
}

/**
 * A collection of arguments for invoking GetEnvironments.
 */
export interface GetEnvironmentsOutputArgs {
    /**
     * a block to further filter results as described below. `name` must be set when providing a filter.
     */
    detailFilter?: pulumi.Input<inputs.GetEnvironmentsDetailFilterArgs>;
}
