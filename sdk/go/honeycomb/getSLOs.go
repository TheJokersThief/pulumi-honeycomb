// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Data Source: GetSLOs
//
// The SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detailFilter`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			dataset := cfg.Require("dataset")
//			_, err := honeycomb.GetSLOs(ctx, &honeycomb.GetSLOsArgs{
//				Dataset: dataset,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = honeycomb.GetSLOs(ctx, &honeycomb.GetSLOsArgs{
//				Dataset: dataset,
//				DetailFilter: honeycomb.GetSLOsDetailFilter{
//					Name:       "name",
//					ValueRegex: pulumi.StringRef("foo_*"),
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSLOs(ctx *pulumi.Context, args *GetSLOsArgs, opts ...pulumi.InvokeOption) (*GetSLOsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSLOsResult
	err := ctx.Invoke("honeycomb:index/getSLOs:GetSLOs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetSLOs.
type GetSLOsArgs struct {
	// The dataset to retrieve the SLOs list from
	Dataset string `pulumi:"dataset"`
	// a block to further filter results as described below. `name` must be set when providing a filter.
	DetailFilter *GetSLOsDetailFilter `pulumi:"detailFilter"`
}

// A collection of values returned by GetSLOs.
type GetSLOsResult struct {
	Dataset      string               `pulumi:"dataset"`
	DetailFilter *GetSLOsDetailFilter `pulumi:"detailFilter"`
	Id           string               `pulumi:"id"`
	// a list of all the SLO IDs found in the dataset
	Ids []string `pulumi:"ids"`
}

func GetSLOsOutput(ctx *pulumi.Context, args GetSLOsOutputArgs, opts ...pulumi.InvokeOption) GetSLOsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSLOsResult, error) {
			args := v.(GetSLOsArgs)
			r, err := GetSLOs(ctx, &args, opts...)
			var s GetSLOsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSLOsResultOutput)
}

// A collection of arguments for invoking GetSLOs.
type GetSLOsOutputArgs struct {
	// The dataset to retrieve the SLOs list from
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// a block to further filter results as described below. `name` must be set when providing a filter.
	DetailFilter GetSLOsDetailFilterPtrInput `pulumi:"detailFilter"`
}

func (GetSLOsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSLOsArgs)(nil)).Elem()
}

// A collection of values returned by GetSLOs.
type GetSLOsResultOutput struct{ *pulumi.OutputState }

func (GetSLOsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSLOsResult)(nil)).Elem()
}

func (o GetSLOsResultOutput) ToGetSLOsResultOutput() GetSLOsResultOutput {
	return o
}

func (o GetSLOsResultOutput) ToGetSLOsResultOutputWithContext(ctx context.Context) GetSLOsResultOutput {
	return o
}

func (o GetSLOsResultOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v GetSLOsResult) string { return v.Dataset }).(pulumi.StringOutput)
}

func (o GetSLOsResultOutput) DetailFilter() GetSLOsDetailFilterPtrOutput {
	return o.ApplyT(func(v GetSLOsResult) *GetSLOsDetailFilter { return v.DetailFilter }).(GetSLOsDetailFilterPtrOutput)
}

func (o GetSLOsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSLOsResult) string { return v.Id }).(pulumi.StringOutput)
}

// a list of all the SLO IDs found in the dataset
func (o GetSLOsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSLOsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSLOsResultOutput{})
}
