// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

var _ = internal.GetEnvOrDefault

type BoardQuery struct {
	// Descriptive text to contextualize the Query within the Board. Supports Markdown.
	Caption *string `pulumi:"caption"`
	// The dataset this query is associated with.
	//
	// Deprecated: Board Queries no longer require the dataset as they rely on the provided Query ID's dataset.
	Dataset *string `pulumi:"dataset"`
	// A map of boolean toggles to manages the settings for this query's graph on the board.
	// If a value is unspecified, it is assumed to be false.
	// Currently supported toggles are:
	GraphSettings *BoardQueryGraphSettings `pulumi:"graphSettings"`
	// The ID of the Query Annotation to associate with this query.
	QueryAnnotationId *string `pulumi:"queryAnnotationId"`
	// The ID of the Query to run.
	QueryId string `pulumi:"queryId"`
	// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
	QueryStyle *string `pulumi:"queryStyle"`
}

// BoardQueryInput is an input type that accepts BoardQueryArgs and BoardQueryOutput values.
// You can construct a concrete instance of `BoardQueryInput` via:
//
//	BoardQueryArgs{...}
type BoardQueryInput interface {
	pulumi.Input

	ToBoardQueryOutput() BoardQueryOutput
	ToBoardQueryOutputWithContext(context.Context) BoardQueryOutput
}

type BoardQueryArgs struct {
	// Descriptive text to contextualize the Query within the Board. Supports Markdown.
	Caption pulumi.StringPtrInput `pulumi:"caption"`
	// The dataset this query is associated with.
	//
	// Deprecated: Board Queries no longer require the dataset as they rely on the provided Query ID's dataset.
	Dataset pulumi.StringPtrInput `pulumi:"dataset"`
	// A map of boolean toggles to manages the settings for this query's graph on the board.
	// If a value is unspecified, it is assumed to be false.
	// Currently supported toggles are:
	GraphSettings BoardQueryGraphSettingsPtrInput `pulumi:"graphSettings"`
	// The ID of the Query Annotation to associate with this query.
	QueryAnnotationId pulumi.StringPtrInput `pulumi:"queryAnnotationId"`
	// The ID of the Query to run.
	QueryId pulumi.StringInput `pulumi:"queryId"`
	// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
	QueryStyle pulumi.StringPtrInput `pulumi:"queryStyle"`
}

func (BoardQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQuery)(nil)).Elem()
}

func (i BoardQueryArgs) ToBoardQueryOutput() BoardQueryOutput {
	return i.ToBoardQueryOutputWithContext(context.Background())
}

func (i BoardQueryArgs) ToBoardQueryOutputWithContext(ctx context.Context) BoardQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryOutput)
}

// BoardQueryArrayInput is an input type that accepts BoardQueryArray and BoardQueryArrayOutput values.
// You can construct a concrete instance of `BoardQueryArrayInput` via:
//
//	BoardQueryArray{ BoardQueryArgs{...} }
type BoardQueryArrayInput interface {
	pulumi.Input

	ToBoardQueryArrayOutput() BoardQueryArrayOutput
	ToBoardQueryArrayOutputWithContext(context.Context) BoardQueryArrayOutput
}

type BoardQueryArray []BoardQueryInput

func (BoardQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BoardQuery)(nil)).Elem()
}

func (i BoardQueryArray) ToBoardQueryArrayOutput() BoardQueryArrayOutput {
	return i.ToBoardQueryArrayOutputWithContext(context.Background())
}

func (i BoardQueryArray) ToBoardQueryArrayOutputWithContext(ctx context.Context) BoardQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryArrayOutput)
}

type BoardQueryOutput struct{ *pulumi.OutputState }

func (BoardQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQuery)(nil)).Elem()
}

func (o BoardQueryOutput) ToBoardQueryOutput() BoardQueryOutput {
	return o
}

func (o BoardQueryOutput) ToBoardQueryOutputWithContext(ctx context.Context) BoardQueryOutput {
	return o
}

// Descriptive text to contextualize the Query within the Board. Supports Markdown.
func (o BoardQueryOutput) Caption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.Caption }).(pulumi.StringPtrOutput)
}

// The dataset this query is associated with.
//
// Deprecated: Board Queries no longer require the dataset as they rely on the provided Query ID's dataset.
func (o BoardQueryOutput) Dataset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.Dataset }).(pulumi.StringPtrOutput)
}

// A map of boolean toggles to manages the settings for this query's graph on the board.
// If a value is unspecified, it is assumed to be false.
// Currently supported toggles are:
func (o BoardQueryOutput) GraphSettings() BoardQueryGraphSettingsPtrOutput {
	return o.ApplyT(func(v BoardQuery) *BoardQueryGraphSettings { return v.GraphSettings }).(BoardQueryGraphSettingsPtrOutput)
}

// The ID of the Query Annotation to associate with this query.
func (o BoardQueryOutput) QueryAnnotationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.QueryAnnotationId }).(pulumi.StringPtrOutput)
}

// The ID of the Query to run.
func (o BoardQueryOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v BoardQuery) string { return v.QueryId }).(pulumi.StringOutput)
}

// How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.
func (o BoardQueryOutput) QueryStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BoardQuery) *string { return v.QueryStyle }).(pulumi.StringPtrOutput)
}

type BoardQueryArrayOutput struct{ *pulumi.OutputState }

func (BoardQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BoardQuery)(nil)).Elem()
}

func (o BoardQueryArrayOutput) ToBoardQueryArrayOutput() BoardQueryArrayOutput {
	return o
}

func (o BoardQueryArrayOutput) ToBoardQueryArrayOutputWithContext(ctx context.Context) BoardQueryArrayOutput {
	return o
}

func (o BoardQueryArrayOutput) Index(i pulumi.IntInput) BoardQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BoardQuery {
		return vs[0].([]BoardQuery)[vs[1].(int)]
	}).(BoardQueryOutput)
}

type BoardQueryGraphSettings struct {
	// Disable the overlay of Markers on the graph.
	HideMarkers *bool `pulumi:"hideMarkers"`
	// Set the graph's Y axis to Log scale.
	LogScale *bool `pulumi:"logScale"`
	// Enable interpolatation between datapoints when the intervening time buckets have no matching events.
	OmitMissingValues *bool `pulumi:"omitMissingValues"`
	// See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.
	OverlaidCharts *bool `pulumi:"overlaidCharts"`
	// Enable the display of groups as stacked colored area under their line graphs.
	StackedGraphs *bool `pulumi:"stackedGraphs"`
	// Set the graph's X axis to UTC.
	UtcXaxis *bool `pulumi:"utcXaxis"`
}

// BoardQueryGraphSettingsInput is an input type that accepts BoardQueryGraphSettingsArgs and BoardQueryGraphSettingsOutput values.
// You can construct a concrete instance of `BoardQueryGraphSettingsInput` via:
//
//	BoardQueryGraphSettingsArgs{...}
type BoardQueryGraphSettingsInput interface {
	pulumi.Input

	ToBoardQueryGraphSettingsOutput() BoardQueryGraphSettingsOutput
	ToBoardQueryGraphSettingsOutputWithContext(context.Context) BoardQueryGraphSettingsOutput
}

type BoardQueryGraphSettingsArgs struct {
	// Disable the overlay of Markers on the graph.
	HideMarkers pulumi.BoolPtrInput `pulumi:"hideMarkers"`
	// Set the graph's Y axis to Log scale.
	LogScale pulumi.BoolPtrInput `pulumi:"logScale"`
	// Enable interpolatation between datapoints when the intervening time buckets have no matching events.
	OmitMissingValues pulumi.BoolPtrInput `pulumi:"omitMissingValues"`
	// See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.
	OverlaidCharts pulumi.BoolPtrInput `pulumi:"overlaidCharts"`
	// Enable the display of groups as stacked colored area under their line graphs.
	StackedGraphs pulumi.BoolPtrInput `pulumi:"stackedGraphs"`
	// Set the graph's X axis to UTC.
	UtcXaxis pulumi.BoolPtrInput `pulumi:"utcXaxis"`
}

func (BoardQueryGraphSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQueryGraphSettings)(nil)).Elem()
}

func (i BoardQueryGraphSettingsArgs) ToBoardQueryGraphSettingsOutput() BoardQueryGraphSettingsOutput {
	return i.ToBoardQueryGraphSettingsOutputWithContext(context.Background())
}

func (i BoardQueryGraphSettingsArgs) ToBoardQueryGraphSettingsOutputWithContext(ctx context.Context) BoardQueryGraphSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryGraphSettingsOutput)
}

func (i BoardQueryGraphSettingsArgs) ToBoardQueryGraphSettingsPtrOutput() BoardQueryGraphSettingsPtrOutput {
	return i.ToBoardQueryGraphSettingsPtrOutputWithContext(context.Background())
}

func (i BoardQueryGraphSettingsArgs) ToBoardQueryGraphSettingsPtrOutputWithContext(ctx context.Context) BoardQueryGraphSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryGraphSettingsOutput).ToBoardQueryGraphSettingsPtrOutputWithContext(ctx)
}

// BoardQueryGraphSettingsPtrInput is an input type that accepts BoardQueryGraphSettingsArgs, BoardQueryGraphSettingsPtr and BoardQueryGraphSettingsPtrOutput values.
// You can construct a concrete instance of `BoardQueryGraphSettingsPtrInput` via:
//
//	        BoardQueryGraphSettingsArgs{...}
//
//	or:
//
//	        nil
type BoardQueryGraphSettingsPtrInput interface {
	pulumi.Input

	ToBoardQueryGraphSettingsPtrOutput() BoardQueryGraphSettingsPtrOutput
	ToBoardQueryGraphSettingsPtrOutputWithContext(context.Context) BoardQueryGraphSettingsPtrOutput
}

type boardQueryGraphSettingsPtrType BoardQueryGraphSettingsArgs

func BoardQueryGraphSettingsPtr(v *BoardQueryGraphSettingsArgs) BoardQueryGraphSettingsPtrInput {
	return (*boardQueryGraphSettingsPtrType)(v)
}

func (*boardQueryGraphSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BoardQueryGraphSettings)(nil)).Elem()
}

func (i *boardQueryGraphSettingsPtrType) ToBoardQueryGraphSettingsPtrOutput() BoardQueryGraphSettingsPtrOutput {
	return i.ToBoardQueryGraphSettingsPtrOutputWithContext(context.Background())
}

func (i *boardQueryGraphSettingsPtrType) ToBoardQueryGraphSettingsPtrOutputWithContext(ctx context.Context) BoardQueryGraphSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoardQueryGraphSettingsPtrOutput)
}

type BoardQueryGraphSettingsOutput struct{ *pulumi.OutputState }

func (BoardQueryGraphSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BoardQueryGraphSettings)(nil)).Elem()
}

func (o BoardQueryGraphSettingsOutput) ToBoardQueryGraphSettingsOutput() BoardQueryGraphSettingsOutput {
	return o
}

func (o BoardQueryGraphSettingsOutput) ToBoardQueryGraphSettingsOutputWithContext(ctx context.Context) BoardQueryGraphSettingsOutput {
	return o
}

func (o BoardQueryGraphSettingsOutput) ToBoardQueryGraphSettingsPtrOutput() BoardQueryGraphSettingsPtrOutput {
	return o.ToBoardQueryGraphSettingsPtrOutputWithContext(context.Background())
}

func (o BoardQueryGraphSettingsOutput) ToBoardQueryGraphSettingsPtrOutputWithContext(ctx context.Context) BoardQueryGraphSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BoardQueryGraphSettings) *BoardQueryGraphSettings {
		return &v
	}).(BoardQueryGraphSettingsPtrOutput)
}

// Disable the overlay of Markers on the graph.
func (o BoardQueryGraphSettingsOutput) HideMarkers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.HideMarkers }).(pulumi.BoolPtrOutput)
}

// Set the graph's Y axis to Log scale.
func (o BoardQueryGraphSettingsOutput) LogScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.LogScale }).(pulumi.BoolPtrOutput)
}

// Enable interpolatation between datapoints when the intervening time buckets have no matching events.
func (o BoardQueryGraphSettingsOutput) OmitMissingValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.OmitMissingValues }).(pulumi.BoolPtrOutput)
}

// See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.
func (o BoardQueryGraphSettingsOutput) OverlaidCharts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.OverlaidCharts }).(pulumi.BoolPtrOutput)
}

// Enable the display of groups as stacked colored area under their line graphs.
func (o BoardQueryGraphSettingsOutput) StackedGraphs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.StackedGraphs }).(pulumi.BoolPtrOutput)
}

// Set the graph's X axis to UTC.
func (o BoardQueryGraphSettingsOutput) UtcXaxis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BoardQueryGraphSettings) *bool { return v.UtcXaxis }).(pulumi.BoolPtrOutput)
}

type BoardQueryGraphSettingsPtrOutput struct{ *pulumi.OutputState }

func (BoardQueryGraphSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoardQueryGraphSettings)(nil)).Elem()
}

func (o BoardQueryGraphSettingsPtrOutput) ToBoardQueryGraphSettingsPtrOutput() BoardQueryGraphSettingsPtrOutput {
	return o
}

func (o BoardQueryGraphSettingsPtrOutput) ToBoardQueryGraphSettingsPtrOutputWithContext(ctx context.Context) BoardQueryGraphSettingsPtrOutput {
	return o
}

func (o BoardQueryGraphSettingsPtrOutput) Elem() BoardQueryGraphSettingsOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) BoardQueryGraphSettings {
		if v != nil {
			return *v
		}
		var ret BoardQueryGraphSettings
		return ret
	}).(BoardQueryGraphSettingsOutput)
}

// Disable the overlay of Markers on the graph.
func (o BoardQueryGraphSettingsPtrOutput) HideMarkers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.HideMarkers
	}).(pulumi.BoolPtrOutput)
}

// Set the graph's Y axis to Log scale.
func (o BoardQueryGraphSettingsPtrOutput) LogScale() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.LogScale
	}).(pulumi.BoolPtrOutput)
}

// Enable interpolatation between datapoints when the intervening time buckets have no matching events.
func (o BoardQueryGraphSettingsPtrOutput) OmitMissingValues() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.OmitMissingValues
	}).(pulumi.BoolPtrOutput)
}

// See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.
func (o BoardQueryGraphSettingsPtrOutput) OverlaidCharts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.OverlaidCharts
	}).(pulumi.BoolPtrOutput)
}

// Enable the display of groups as stacked colored area under their line graphs.
func (o BoardQueryGraphSettingsPtrOutput) StackedGraphs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.StackedGraphs
	}).(pulumi.BoolPtrOutput)
}

// Set the graph's X axis to UTC.
func (o BoardQueryGraphSettingsPtrOutput) UtcXaxis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoardQueryGraphSettings) *bool {
		if v == nil {
			return nil
		}
		return v.UtcXaxis
	}).(pulumi.BoolPtrOutput)
}

type GetQuerySpecificationCalculation struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op string `pulumi:"op"`
}

// GetQuerySpecificationCalculationInput is an input type that accepts GetQuerySpecificationCalculationArgs and GetQuerySpecificationCalculationOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationInput` via:
//
//	GetQuerySpecificationCalculationArgs{...}
type GetQuerySpecificationCalculationInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput
	ToGetQuerySpecificationCalculationOutputWithContext(context.Context) GetQuerySpecificationCalculationOutput
}

type GetQuerySpecificationCalculationArgs struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringInput `pulumi:"op"`
}

func (GetQuerySpecificationCalculationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return i.ToGetQuerySpecificationCalculationOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationOutput)
}

// GetQuerySpecificationCalculationArrayInput is an input type that accepts GetQuerySpecificationCalculationArray and GetQuerySpecificationCalculationArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationArrayInput` via:
//
//	GetQuerySpecificationCalculationArray{ GetQuerySpecificationCalculationArgs{...} }
type GetQuerySpecificationCalculationArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput
	ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Context) GetQuerySpecificationCalculationArrayOutput
}

type GetQuerySpecificationCalculationArray []GetQuerySpecificationCalculationInput

func (GetQuerySpecificationCalculationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return i.ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationArrayOutput)
}

type GetQuerySpecificationCalculationOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return o
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return o
}

// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationCalculationOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationCalculationOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) string { return v.Op }).(pulumi.StringOutput)
}

type GetQuerySpecificationCalculationArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationCalculationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationCalculation {
		return vs[0].([]GetQuerySpecificationCalculation)[vs[1].(int)]
	}).(GetQuerySpecificationCalculationOutput)
}

type GetQuerySpecificationFilter struct {
	// The column to apply the filter to.
	Column string `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op string `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
	Value *string `pulumi:"value"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
	//
	// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
	//
	// Deprecated: Use of attribute `valueBoolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
	ValueBoolean *bool `pulumi:"valueBoolean"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueFloat` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueFloat *float64 `pulumi:"valueFloat"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueInteger` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueInteger *int `pulumi:"valueInteger"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueString` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
	ValueString *string `pulumi:"valueString"`
}

// GetQuerySpecificationFilterInput is an input type that accepts GetQuerySpecificationFilterArgs and GetQuerySpecificationFilterOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterInput` via:
//
//	GetQuerySpecificationFilterArgs{...}
type GetQuerySpecificationFilterInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput
	ToGetQuerySpecificationFilterOutputWithContext(context.Context) GetQuerySpecificationFilterOutput
}

type GetQuerySpecificationFilterArgs struct {
	// The column to apply the filter to.
	Column pulumi.StringInput `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
	//
	// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
	//
	// Deprecated: Use of attribute `valueBoolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
	ValueBoolean pulumi.BoolPtrInput `pulumi:"valueBoolean"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueFloat` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueFloat pulumi.Float64PtrInput `pulumi:"valueFloat"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueInteger` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
	ValueInteger pulumi.IntPtrInput `pulumi:"valueInteger"`
	// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
	//
	// Deprecated: Use of attribute `valueString` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
	ValueString pulumi.StringPtrInput `pulumi:"valueString"`
}

func (GetQuerySpecificationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return i.ToGetQuerySpecificationFilterOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterOutput)
}

// GetQuerySpecificationFilterArrayInput is an input type that accepts GetQuerySpecificationFilterArray and GetQuerySpecificationFilterArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterArrayInput` via:
//
//	GetQuerySpecificationFilterArray{ GetQuerySpecificationFilterArgs{...} }
type GetQuerySpecificationFilterArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput
	ToGetQuerySpecificationFilterArrayOutputWithContext(context.Context) GetQuerySpecificationFilterArrayOutput
}

type GetQuerySpecificationFilterArray []GetQuerySpecificationFilterInput

func (GetQuerySpecificationFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return i.ToGetQuerySpecificationFilterArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterArrayOutput)
}

type GetQuerySpecificationFilterOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return o
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return o
}

// The column to apply the filter to.
func (o GetQuerySpecificationFilterOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Column }).(pulumi.StringOutput)
}

// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
func (o GetQuerySpecificationFilterOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Op }).(pulumi.StringOutput)
}

// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
func (o GetQuerySpecificationFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.
//
// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
//
// Deprecated: Use of attribute `valueBoolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueBoolean() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *bool { return v.ValueBoolean }).(pulumi.BoolPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `valueFloat` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueFloat() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *float64 { return v.ValueFloat }).(pulumi.Float64PtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `valueInteger` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueInteger() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *int { return v.ValueInteger }).(pulumi.IntPtrOutput)
}

// Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.
//
// Deprecated: Use of attribute `valueString` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged.
func (o GetQuerySpecificationFilterOutput) ValueString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *string { return v.ValueString }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationFilter {
		return vs[0].([]GetQuerySpecificationFilter)[vs[1].(int)]
	}).(GetQuerySpecificationFilterOutput)
}

type GetQuerySpecificationHaving struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp string `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op string `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	//
	// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
	Value float64 `pulumi:"value"`
}

// GetQuerySpecificationHavingInput is an input type that accepts GetQuerySpecificationHavingArgs and GetQuerySpecificationHavingOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingInput` via:
//
//	GetQuerySpecificationHavingArgs{...}
type GetQuerySpecificationHavingInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput
	ToGetQuerySpecificationHavingOutputWithContext(context.Context) GetQuerySpecificationHavingOutput
}

type GetQuerySpecificationHavingArgs struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp pulumi.StringInput `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	//
	// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (GetQuerySpecificationHavingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return i.ToGetQuerySpecificationHavingOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingOutput)
}

// GetQuerySpecificationHavingArrayInput is an input type that accepts GetQuerySpecificationHavingArray and GetQuerySpecificationHavingArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingArrayInput` via:
//
//	GetQuerySpecificationHavingArray{ GetQuerySpecificationHavingArgs{...} }
type GetQuerySpecificationHavingArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput
	ToGetQuerySpecificationHavingArrayOutputWithContext(context.Context) GetQuerySpecificationHavingArrayOutput
}

type GetQuerySpecificationHavingArray []GetQuerySpecificationHavingInput

func (GetQuerySpecificationHavingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return i.ToGetQuerySpecificationHavingArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingArrayOutput)
}

type GetQuerySpecificationHavingOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return o
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return o
}

// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
func (o GetQuerySpecificationHavingOutput) CalculateOp() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.CalculateOp }).(pulumi.StringOutput)
}

// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationHavingOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
func (o GetQuerySpecificationHavingOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.Op }).(pulumi.StringOutput)
}

// The value used with `op`. Currently assumed to be a number.
//
// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
func (o GetQuerySpecificationHavingOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v GetQuerySpecificationHaving) float64 { return v.Value }).(pulumi.Float64Output)
}

type GetQuerySpecificationHavingArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationHavingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationHaving {
		return vs[0].([]GetQuerySpecificationHaving)[vs[1].(int)]
	}).(GetQuerySpecificationHavingOutput)
}

type GetQuerySpecificationOrder struct {
	// Either a column present in `breakdown` or a column to `op` applies to.
	Column *string `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op *string `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order *string `pulumi:"order"`
}

// GetQuerySpecificationOrderInput is an input type that accepts GetQuerySpecificationOrderArgs and GetQuerySpecificationOrderOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderInput` via:
//
//	GetQuerySpecificationOrderArgs{...}
type GetQuerySpecificationOrderInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput
	ToGetQuerySpecificationOrderOutputWithContext(context.Context) GetQuerySpecificationOrderOutput
}

type GetQuerySpecificationOrderArgs struct {
	// Either a column present in `breakdown` or a column to `op` applies to.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringPtrInput `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (GetQuerySpecificationOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return i.ToGetQuerySpecificationOrderOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderOutput)
}

// GetQuerySpecificationOrderArrayInput is an input type that accepts GetQuerySpecificationOrderArray and GetQuerySpecificationOrderArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderArrayInput` via:
//
//	GetQuerySpecificationOrderArray{ GetQuerySpecificationOrderArgs{...} }
type GetQuerySpecificationOrderArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput
	ToGetQuerySpecificationOrderArrayOutputWithContext(context.Context) GetQuerySpecificationOrderArrayOutput
}

type GetQuerySpecificationOrderArray []GetQuerySpecificationOrderInput

func (GetQuerySpecificationOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return i.ToGetQuerySpecificationOrderArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderArrayOutput)
}

type GetQuerySpecificationOrderOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return o
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return o
}

// Either a column present in `breakdown` or a column to `op` applies to.
func (o GetQuerySpecificationOrderOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationOrderOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// The sort direction, if set must be `ascending` or `descending`.
func (o GetQuerySpecificationOrderOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationOrderArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationOrder {
		return vs[0].([]GetQuerySpecificationOrder)[vs[1].(int)]
	}).(GetQuerySpecificationOrderOutput)
}

type GetRecipientDetailFilter struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetRecipientDetailFilterInput is an input type that accepts GetRecipientDetailFilterArgs and GetRecipientDetailFilterOutput values.
// You can construct a concrete instance of `GetRecipientDetailFilterInput` via:
//
//	GetRecipientDetailFilterArgs{...}
type GetRecipientDetailFilterInput interface {
	pulumi.Input

	ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput
	ToGetRecipientDetailFilterOutputWithContext(context.Context) GetRecipientDetailFilterOutput
}

type GetRecipientDetailFilterArgs struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetRecipientDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientDetailFilter)(nil)).Elem()
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput {
	return i.ToGetRecipientDetailFilterOutputWithContext(context.Background())
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterOutputWithContext(ctx context.Context) GetRecipientDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterOutput)
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return i.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetRecipientDetailFilterArgs) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterOutput).ToGetRecipientDetailFilterPtrOutputWithContext(ctx)
}

// GetRecipientDetailFilterPtrInput is an input type that accepts GetRecipientDetailFilterArgs, GetRecipientDetailFilterPtr and GetRecipientDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetRecipientDetailFilterPtrInput` via:
//
//	        GetRecipientDetailFilterArgs{...}
//
//	or:
//
//	        nil
type GetRecipientDetailFilterPtrInput interface {
	pulumi.Input

	ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput
	ToGetRecipientDetailFilterPtrOutputWithContext(context.Context) GetRecipientDetailFilterPtrOutput
}

type getRecipientDetailFilterPtrType GetRecipientDetailFilterArgs

func GetRecipientDetailFilterPtr(v *GetRecipientDetailFilterArgs) GetRecipientDetailFilterPtrInput {
	return (*getRecipientDetailFilterPtrType)(v)
}

func (*getRecipientDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientDetailFilter)(nil)).Elem()
}

func (i *getRecipientDetailFilterPtrType) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return i.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getRecipientDetailFilterPtrType) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientDetailFilterPtrOutput)
}

type GetRecipientDetailFilterOutput struct{ *pulumi.OutputState }

func (GetRecipientDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientDetailFilter)(nil)).Elem()
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterOutput() GetRecipientDetailFilterOutput {
	return o
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterOutputWithContext(ctx context.Context) GetRecipientDetailFilterOutput {
	return o
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return o.ToGetRecipientDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetRecipientDetailFilterOutput) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRecipientDetailFilter) *GetRecipientDetailFilter {
		return &v
	}).(GetRecipientDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetRecipientDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetRecipientDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetRecipientDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetRecipientDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientDetailFilter)(nil)).Elem()
}

func (o GetRecipientDetailFilterPtrOutput) ToGetRecipientDetailFilterPtrOutput() GetRecipientDetailFilterPtrOutput {
	return o
}

func (o GetRecipientDetailFilterPtrOutput) ToGetRecipientDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientDetailFilterPtrOutput {
	return o
}

func (o GetRecipientDetailFilterPtrOutput) Elem() GetRecipientDetailFilterOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) GetRecipientDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetRecipientDetailFilter
		return ret
	}).(GetRecipientDetailFilterOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetRecipientDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetRecipientDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type GetRecipientsDetailFilter struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetRecipientsDetailFilterInput is an input type that accepts GetRecipientsDetailFilterArgs and GetRecipientsDetailFilterOutput values.
// You can construct a concrete instance of `GetRecipientsDetailFilterInput` via:
//
//	GetRecipientsDetailFilterArgs{...}
type GetRecipientsDetailFilterInput interface {
	pulumi.Input

	ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput
	ToGetRecipientsDetailFilterOutputWithContext(context.Context) GetRecipientsDetailFilterOutput
}

type GetRecipientsDetailFilterArgs struct {
	// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetRecipientsDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientsDetailFilter)(nil)).Elem()
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput {
	return i.ToGetRecipientsDetailFilterOutputWithContext(context.Background())
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterOutputWithContext(ctx context.Context) GetRecipientsDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterOutput)
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return i.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetRecipientsDetailFilterArgs) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterOutput).ToGetRecipientsDetailFilterPtrOutputWithContext(ctx)
}

// GetRecipientsDetailFilterPtrInput is an input type that accepts GetRecipientsDetailFilterArgs, GetRecipientsDetailFilterPtr and GetRecipientsDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetRecipientsDetailFilterPtrInput` via:
//
//	        GetRecipientsDetailFilterArgs{...}
//
//	or:
//
//	        nil
type GetRecipientsDetailFilterPtrInput interface {
	pulumi.Input

	ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput
	ToGetRecipientsDetailFilterPtrOutputWithContext(context.Context) GetRecipientsDetailFilterPtrOutput
}

type getRecipientsDetailFilterPtrType GetRecipientsDetailFilterArgs

func GetRecipientsDetailFilterPtr(v *GetRecipientsDetailFilterArgs) GetRecipientsDetailFilterPtrInput {
	return (*getRecipientsDetailFilterPtrType)(v)
}

func (*getRecipientsDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientsDetailFilter)(nil)).Elem()
}

func (i *getRecipientsDetailFilterPtrType) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return i.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getRecipientsDetailFilterPtrType) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecipientsDetailFilterPtrOutput)
}

type GetRecipientsDetailFilterOutput struct{ *pulumi.OutputState }

func (GetRecipientsDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecipientsDetailFilter)(nil)).Elem()
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterOutput() GetRecipientsDetailFilterOutput {
	return o
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterOutputWithContext(ctx context.Context) GetRecipientsDetailFilterOutput {
	return o
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return o.ToGetRecipientsDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetRecipientsDetailFilterOutput) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetRecipientsDetailFilter) *GetRecipientsDetailFilter {
		return &v
	}).(GetRecipientsDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientsDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetRecipientsDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetRecipientsDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRecipientsDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetRecipientsDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetRecipientsDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetRecipientsDetailFilter)(nil)).Elem()
}

func (o GetRecipientsDetailFilterPtrOutput) ToGetRecipientsDetailFilterPtrOutput() GetRecipientsDetailFilterPtrOutput {
	return o
}

func (o GetRecipientsDetailFilterPtrOutput) ToGetRecipientsDetailFilterPtrOutputWithContext(ctx context.Context) GetRecipientsDetailFilterPtrOutput {
	return o
}

func (o GetRecipientsDetailFilterPtrOutput) Elem() GetRecipientsDetailFilterOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) GetRecipientsDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetRecipientsDetailFilter
		return ret
	}).(GetRecipientsDetailFilterOutput)
}

// The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integrationName`, and `url`.
func (o GetRecipientsDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetRecipientsDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetRecipientsDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetRecipientsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryInput)(nil)).Elem(), BoardQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryArrayInput)(nil)).Elem(), BoardQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryGraphSettingsInput)(nil)).Elem(), BoardQueryGraphSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoardQueryGraphSettingsPtrInput)(nil)).Elem(), BoardQueryGraphSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationInput)(nil)).Elem(), GetQuerySpecificationCalculationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationArrayInput)(nil)).Elem(), GetQuerySpecificationCalculationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterInput)(nil)).Elem(), GetQuerySpecificationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterArrayInput)(nil)).Elem(), GetQuerySpecificationFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingInput)(nil)).Elem(), GetQuerySpecificationHavingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingArrayInput)(nil)).Elem(), GetQuerySpecificationHavingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderInput)(nil)).Elem(), GetQuerySpecificationOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderArrayInput)(nil)).Elem(), GetQuerySpecificationOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientDetailFilterInput)(nil)).Elem(), GetRecipientDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientDetailFilterPtrInput)(nil)).Elem(), GetRecipientDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientsDetailFilterInput)(nil)).Elem(), GetRecipientsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecipientsDetailFilterPtrInput)(nil)).Elem(), GetRecipientsDetailFilterArgs{})
	pulumi.RegisterOutputType(BoardQueryOutput{})
	pulumi.RegisterOutputType(BoardQueryArrayOutput{})
	pulumi.RegisterOutputType(BoardQueryGraphSettingsOutput{})
	pulumi.RegisterOutputType(BoardQueryGraphSettingsPtrOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderArrayOutput{})
	pulumi.RegisterOutputType(GetRecipientDetailFilterOutput{})
	pulumi.RegisterOutputType(GetRecipientDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(GetRecipientsDetailFilterOutput{})
	pulumi.RegisterOutputType(GetRecipientsDetailFilterPtrOutput{})
}
