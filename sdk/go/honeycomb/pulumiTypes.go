// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

var _ = internal.GetEnvOrDefault

type ApiKeyPermissions struct {
	// Allow this key to create missing datasets when sending telemetry. Defaults to `false`.
	CreateDatasets *bool `pulumi:"createDatasets"`
}

// ApiKeyPermissionsInput is an input type that accepts ApiKeyPermissionsArgs and ApiKeyPermissionsOutput values.
// You can construct a concrete instance of `ApiKeyPermissionsInput` via:
//
//	ApiKeyPermissionsArgs{...}
type ApiKeyPermissionsInput interface {
	pulumi.Input

	ToApiKeyPermissionsOutput() ApiKeyPermissionsOutput
	ToApiKeyPermissionsOutputWithContext(context.Context) ApiKeyPermissionsOutput
}

type ApiKeyPermissionsArgs struct {
	// Allow this key to create missing datasets when sending telemetry. Defaults to `false`.
	CreateDatasets pulumi.BoolPtrInput `pulumi:"createDatasets"`
}

func (ApiKeyPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyPermissions)(nil)).Elem()
}

func (i ApiKeyPermissionsArgs) ToApiKeyPermissionsOutput() ApiKeyPermissionsOutput {
	return i.ToApiKeyPermissionsOutputWithContext(context.Background())
}

func (i ApiKeyPermissionsArgs) ToApiKeyPermissionsOutputWithContext(ctx context.Context) ApiKeyPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyPermissionsOutput)
}

func (i ApiKeyPermissionsArgs) ToApiKeyPermissionsPtrOutput() ApiKeyPermissionsPtrOutput {
	return i.ToApiKeyPermissionsPtrOutputWithContext(context.Background())
}

func (i ApiKeyPermissionsArgs) ToApiKeyPermissionsPtrOutputWithContext(ctx context.Context) ApiKeyPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyPermissionsOutput).ToApiKeyPermissionsPtrOutputWithContext(ctx)
}

// ApiKeyPermissionsPtrInput is an input type that accepts ApiKeyPermissionsArgs, ApiKeyPermissionsPtr and ApiKeyPermissionsPtrOutput values.
// You can construct a concrete instance of `ApiKeyPermissionsPtrInput` via:
//
//	        ApiKeyPermissionsArgs{...}
//
//	or:
//
//	        nil
type ApiKeyPermissionsPtrInput interface {
	pulumi.Input

	ToApiKeyPermissionsPtrOutput() ApiKeyPermissionsPtrOutput
	ToApiKeyPermissionsPtrOutputWithContext(context.Context) ApiKeyPermissionsPtrOutput
}

type apiKeyPermissionsPtrType ApiKeyPermissionsArgs

func ApiKeyPermissionsPtr(v *ApiKeyPermissionsArgs) ApiKeyPermissionsPtrInput {
	return (*apiKeyPermissionsPtrType)(v)
}

func (*apiKeyPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyPermissions)(nil)).Elem()
}

func (i *apiKeyPermissionsPtrType) ToApiKeyPermissionsPtrOutput() ApiKeyPermissionsPtrOutput {
	return i.ToApiKeyPermissionsPtrOutputWithContext(context.Background())
}

func (i *apiKeyPermissionsPtrType) ToApiKeyPermissionsPtrOutputWithContext(ctx context.Context) ApiKeyPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyPermissionsPtrOutput)
}

type ApiKeyPermissionsOutput struct{ *pulumi.OutputState }

func (ApiKeyPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiKeyPermissions)(nil)).Elem()
}

func (o ApiKeyPermissionsOutput) ToApiKeyPermissionsOutput() ApiKeyPermissionsOutput {
	return o
}

func (o ApiKeyPermissionsOutput) ToApiKeyPermissionsOutputWithContext(ctx context.Context) ApiKeyPermissionsOutput {
	return o
}

func (o ApiKeyPermissionsOutput) ToApiKeyPermissionsPtrOutput() ApiKeyPermissionsPtrOutput {
	return o.ToApiKeyPermissionsPtrOutputWithContext(context.Background())
}

func (o ApiKeyPermissionsOutput) ToApiKeyPermissionsPtrOutputWithContext(ctx context.Context) ApiKeyPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiKeyPermissions) *ApiKeyPermissions {
		return &v
	}).(ApiKeyPermissionsPtrOutput)
}

// Allow this key to create missing datasets when sending telemetry. Defaults to `false`.
func (o ApiKeyPermissionsOutput) CreateDatasets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiKeyPermissions) *bool { return v.CreateDatasets }).(pulumi.BoolPtrOutput)
}

type ApiKeyPermissionsPtrOutput struct{ *pulumi.OutputState }

func (ApiKeyPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyPermissions)(nil)).Elem()
}

func (o ApiKeyPermissionsPtrOutput) ToApiKeyPermissionsPtrOutput() ApiKeyPermissionsPtrOutput {
	return o
}

func (o ApiKeyPermissionsPtrOutput) ToApiKeyPermissionsPtrOutputWithContext(ctx context.Context) ApiKeyPermissionsPtrOutput {
	return o
}

func (o ApiKeyPermissionsPtrOutput) Elem() ApiKeyPermissionsOutput {
	return o.ApplyT(func(v *ApiKeyPermissions) ApiKeyPermissions {
		if v != nil {
			return *v
		}
		var ret ApiKeyPermissions
		return ret
	}).(ApiKeyPermissionsOutput)
}

// Allow this key to create missing datasets when sending telemetry. Defaults to `false`.
func (o ApiKeyPermissionsPtrOutput) CreateDatasets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApiKeyPermissions) *bool {
		if v == nil {
			return nil
		}
		return v.CreateDatasets
	}).(pulumi.BoolPtrOutput)
}

type BurnAlertRecipient struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id *string `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	//
	// | Type      | Target              |
	// |-----------|---------------------|
	// | email     | an email address    |
	// | pagerduty | _N/A_               |
	// | slack     | name of the channel |
	// | webhook   | name of the webhook |
	NotificationDetails *BurnAlertRecipientNotificationDetails `pulumi:"notificationDetails"`
	// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target *string `pulumi:"target"`
	// The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type *string `pulumi:"type"`
}

// BurnAlertRecipientInput is an input type that accepts BurnAlertRecipientArgs and BurnAlertRecipientOutput values.
// You can construct a concrete instance of `BurnAlertRecipientInput` via:
//
//	BurnAlertRecipientArgs{...}
type BurnAlertRecipientInput interface {
	pulumi.Input

	ToBurnAlertRecipientOutput() BurnAlertRecipientOutput
	ToBurnAlertRecipientOutputWithContext(context.Context) BurnAlertRecipientOutput
}

type BurnAlertRecipientArgs struct {
	// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	//
	// | Type      | Target              |
	// |-----------|---------------------|
	// | email     | an email address    |
	// | pagerduty | _N/A_               |
	// | slack     | name of the channel |
	// | webhook   | name of the webhook |
	NotificationDetails BurnAlertRecipientNotificationDetailsPtrInput `pulumi:"notificationDetails"`
	// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (BurnAlertRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipient)(nil)).Elem()
}

func (i BurnAlertRecipientArgs) ToBurnAlertRecipientOutput() BurnAlertRecipientOutput {
	return i.ToBurnAlertRecipientOutputWithContext(context.Background())
}

func (i BurnAlertRecipientArgs) ToBurnAlertRecipientOutputWithContext(ctx context.Context) BurnAlertRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientOutput)
}

// BurnAlertRecipientArrayInput is an input type that accepts BurnAlertRecipientArray and BurnAlertRecipientArrayOutput values.
// You can construct a concrete instance of `BurnAlertRecipientArrayInput` via:
//
//	BurnAlertRecipientArray{ BurnAlertRecipientArgs{...} }
type BurnAlertRecipientArrayInput interface {
	pulumi.Input

	ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput
	ToBurnAlertRecipientArrayOutputWithContext(context.Context) BurnAlertRecipientArrayOutput
}

type BurnAlertRecipientArray []BurnAlertRecipientInput

func (BurnAlertRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BurnAlertRecipient)(nil)).Elem()
}

func (i BurnAlertRecipientArray) ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput {
	return i.ToBurnAlertRecipientArrayOutputWithContext(context.Background())
}

func (i BurnAlertRecipientArray) ToBurnAlertRecipientArrayOutputWithContext(ctx context.Context) BurnAlertRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientArrayOutput)
}

type BurnAlertRecipientOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipient)(nil)).Elem()
}

func (o BurnAlertRecipientOutput) ToBurnAlertRecipientOutput() BurnAlertRecipientOutput {
	return o
}

func (o BurnAlertRecipientOutput) ToBurnAlertRecipientOutputWithContext(ctx context.Context) BurnAlertRecipientOutput {
	return o
}

// The ID of an already existing recipient. Should not be used in combination with `type` and `target`.
func (o BurnAlertRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
//
// | Type      | Target              |
// |-----------|---------------------|
// | email     | an email address    |
// | pagerduty | _N/A_               |
// | slack     | name of the channel |
// | webhook   | name of the webhook |
func (o BurnAlertRecipientOutput) NotificationDetails() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *BurnAlertRecipientNotificationDetails { return v.NotificationDetails }).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

// Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.
func (o BurnAlertRecipientOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.
func (o BurnAlertRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type BurnAlertRecipientArrayOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BurnAlertRecipient)(nil)).Elem()
}

func (o BurnAlertRecipientArrayOutput) ToBurnAlertRecipientArrayOutput() BurnAlertRecipientArrayOutput {
	return o
}

func (o BurnAlertRecipientArrayOutput) ToBurnAlertRecipientArrayOutputWithContext(ctx context.Context) BurnAlertRecipientArrayOutput {
	return o
}

func (o BurnAlertRecipientArrayOutput) Index(i pulumi.IntInput) BurnAlertRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BurnAlertRecipient {
		return vs[0].([]BurnAlertRecipient)[vs[1].(int)]
	}).(BurnAlertRecipientOutput)
}

type BurnAlertRecipientNotificationDetails struct {
	// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
	PagerdutySeverity *string `pulumi:"pagerdutySeverity"`
}

// BurnAlertRecipientNotificationDetailsInput is an input type that accepts BurnAlertRecipientNotificationDetailsArgs and BurnAlertRecipientNotificationDetailsOutput values.
// You can construct a concrete instance of `BurnAlertRecipientNotificationDetailsInput` via:
//
//	BurnAlertRecipientNotificationDetailsArgs{...}
type BurnAlertRecipientNotificationDetailsInput interface {
	pulumi.Input

	ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput
	ToBurnAlertRecipientNotificationDetailsOutputWithContext(context.Context) BurnAlertRecipientNotificationDetailsOutput
}

type BurnAlertRecipientNotificationDetailsArgs struct {
	// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
	PagerdutySeverity pulumi.StringPtrInput `pulumi:"pagerdutySeverity"`
}

func (BurnAlertRecipientNotificationDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput {
	return i.ToBurnAlertRecipientNotificationDetailsOutputWithContext(context.Background())
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsOutput)
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return i.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i BurnAlertRecipientNotificationDetailsArgs) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsOutput).ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx)
}

// BurnAlertRecipientNotificationDetailsPtrInput is an input type that accepts BurnAlertRecipientNotificationDetailsArgs, BurnAlertRecipientNotificationDetailsPtr and BurnAlertRecipientNotificationDetailsPtrOutput values.
// You can construct a concrete instance of `BurnAlertRecipientNotificationDetailsPtrInput` via:
//
//	        BurnAlertRecipientNotificationDetailsArgs{...}
//
//	or:
//
//	        nil
type BurnAlertRecipientNotificationDetailsPtrInput interface {
	pulumi.Input

	ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput
	ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Context) BurnAlertRecipientNotificationDetailsPtrOutput
}

type burnAlertRecipientNotificationDetailsPtrType BurnAlertRecipientNotificationDetailsArgs

func BurnAlertRecipientNotificationDetailsPtr(v *BurnAlertRecipientNotificationDetailsArgs) BurnAlertRecipientNotificationDetailsPtrInput {
	return (*burnAlertRecipientNotificationDetailsPtrType)(v)
}

func (*burnAlertRecipientNotificationDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (i *burnAlertRecipientNotificationDetailsPtrType) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return i.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i *burnAlertRecipientNotificationDetailsPtrType) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

type BurnAlertRecipientNotificationDetailsOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientNotificationDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsOutput() BurnAlertRecipientNotificationDetailsOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (o BurnAlertRecipientNotificationDetailsOutput) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BurnAlertRecipientNotificationDetails) *BurnAlertRecipientNotificationDetails {
		return &v
	}).(BurnAlertRecipientNotificationDetailsPtrOutput)
}

// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
func (o BurnAlertRecipientNotificationDetailsOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BurnAlertRecipientNotificationDetails) *string { return v.PagerdutySeverity }).(pulumi.StringPtrOutput)
}

type BurnAlertRecipientNotificationDetailsPtrOutput struct{ *pulumi.OutputState }

func (BurnAlertRecipientNotificationDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BurnAlertRecipientNotificationDetails)(nil)).Elem()
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) ToBurnAlertRecipientNotificationDetailsPtrOutput() BurnAlertRecipientNotificationDetailsPtrOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) ToBurnAlertRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) BurnAlertRecipientNotificationDetailsPtrOutput {
	return o
}

func (o BurnAlertRecipientNotificationDetailsPtrOutput) Elem() BurnAlertRecipientNotificationDetailsOutput {
	return o.ApplyT(func(v *BurnAlertRecipientNotificationDetails) BurnAlertRecipientNotificationDetails {
		if v != nil {
			return *v
		}
		var ret BurnAlertRecipientNotificationDetails
		return ret
	}).(BurnAlertRecipientNotificationDetailsOutput)
}

// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
func (o BurnAlertRecipientNotificationDetailsPtrOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BurnAlertRecipientNotificationDetails) *string {
		if v == nil {
			return nil
		}
		return v.PagerdutySeverity
	}).(pulumi.StringPtrOutput)
}

type GetAuthMetadataApiKeyAccess struct {
	// `true` if this API key can create and manage Boards.
	Boards bool `pulumi:"boards"`
	// `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
	Columns bool `pulumi:"columns"`
	// `true` if this API key can create and manage Datasets.
	Datasets bool `pulumi:"datasets"`
	// `true` if this API key can key can send events to Honeycomb.
	Events bool `pulumi:"events"`
	// `true` if this API key can create and manage Markers.
	Markers bool `pulumi:"markers"`
	// `true` if this API key can execute existing Queries via the Query Data API.
	Queries bool `pulumi:"queries"`
	// `true` if this API key can create and manage Recipients.
	Recipients bool `pulumi:"recipients"`
	// `true` if this API key can create and manage SLOs.
	Slos bool `pulumi:"slos"`
	// `true` if this API key can create and manage Triggers.
	Triggers bool `pulumi:"triggers"`
}

// GetAuthMetadataApiKeyAccessInput is an input type that accepts GetAuthMetadataApiKeyAccessArgs and GetAuthMetadataApiKeyAccessOutput values.
// You can construct a concrete instance of `GetAuthMetadataApiKeyAccessInput` via:
//
//	GetAuthMetadataApiKeyAccessArgs{...}
type GetAuthMetadataApiKeyAccessInput interface {
	pulumi.Input

	ToGetAuthMetadataApiKeyAccessOutput() GetAuthMetadataApiKeyAccessOutput
	ToGetAuthMetadataApiKeyAccessOutputWithContext(context.Context) GetAuthMetadataApiKeyAccessOutput
}

type GetAuthMetadataApiKeyAccessArgs struct {
	// `true` if this API key can create and manage Boards.
	Boards pulumi.BoolInput `pulumi:"boards"`
	// `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
	Columns pulumi.BoolInput `pulumi:"columns"`
	// `true` if this API key can create and manage Datasets.
	Datasets pulumi.BoolInput `pulumi:"datasets"`
	// `true` if this API key can key can send events to Honeycomb.
	Events pulumi.BoolInput `pulumi:"events"`
	// `true` if this API key can create and manage Markers.
	Markers pulumi.BoolInput `pulumi:"markers"`
	// `true` if this API key can execute existing Queries via the Query Data API.
	Queries pulumi.BoolInput `pulumi:"queries"`
	// `true` if this API key can create and manage Recipients.
	Recipients pulumi.BoolInput `pulumi:"recipients"`
	// `true` if this API key can create and manage SLOs.
	Slos pulumi.BoolInput `pulumi:"slos"`
	// `true` if this API key can create and manage Triggers.
	Triggers pulumi.BoolInput `pulumi:"triggers"`
}

func (GetAuthMetadataApiKeyAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataApiKeyAccess)(nil)).Elem()
}

func (i GetAuthMetadataApiKeyAccessArgs) ToGetAuthMetadataApiKeyAccessOutput() GetAuthMetadataApiKeyAccessOutput {
	return i.ToGetAuthMetadataApiKeyAccessOutputWithContext(context.Background())
}

func (i GetAuthMetadataApiKeyAccessArgs) ToGetAuthMetadataApiKeyAccessOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataApiKeyAccessOutput)
}

func (i GetAuthMetadataApiKeyAccessArgs) ToGetAuthMetadataApiKeyAccessPtrOutput() GetAuthMetadataApiKeyAccessPtrOutput {
	return i.ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(context.Background())
}

func (i GetAuthMetadataApiKeyAccessArgs) ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataApiKeyAccessOutput).ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(ctx)
}

// GetAuthMetadataApiKeyAccessPtrInput is an input type that accepts GetAuthMetadataApiKeyAccessArgs, GetAuthMetadataApiKeyAccessPtr and GetAuthMetadataApiKeyAccessPtrOutput values.
// You can construct a concrete instance of `GetAuthMetadataApiKeyAccessPtrInput` via:
//
//	        GetAuthMetadataApiKeyAccessArgs{...}
//
//	or:
//
//	        nil
type GetAuthMetadataApiKeyAccessPtrInput interface {
	pulumi.Input

	ToGetAuthMetadataApiKeyAccessPtrOutput() GetAuthMetadataApiKeyAccessPtrOutput
	ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(context.Context) GetAuthMetadataApiKeyAccessPtrOutput
}

type getAuthMetadataApiKeyAccessPtrType GetAuthMetadataApiKeyAccessArgs

func GetAuthMetadataApiKeyAccessPtr(v *GetAuthMetadataApiKeyAccessArgs) GetAuthMetadataApiKeyAccessPtrInput {
	return (*getAuthMetadataApiKeyAccessPtrType)(v)
}

func (*getAuthMetadataApiKeyAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataApiKeyAccess)(nil)).Elem()
}

func (i *getAuthMetadataApiKeyAccessPtrType) ToGetAuthMetadataApiKeyAccessPtrOutput() GetAuthMetadataApiKeyAccessPtrOutput {
	return i.ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(context.Background())
}

func (i *getAuthMetadataApiKeyAccessPtrType) ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataApiKeyAccessPtrOutput)
}

type GetAuthMetadataApiKeyAccessOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataApiKeyAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataApiKeyAccess)(nil)).Elem()
}

func (o GetAuthMetadataApiKeyAccessOutput) ToGetAuthMetadataApiKeyAccessOutput() GetAuthMetadataApiKeyAccessOutput {
	return o
}

func (o GetAuthMetadataApiKeyAccessOutput) ToGetAuthMetadataApiKeyAccessOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessOutput {
	return o
}

func (o GetAuthMetadataApiKeyAccessOutput) ToGetAuthMetadataApiKeyAccessPtrOutput() GetAuthMetadataApiKeyAccessPtrOutput {
	return o.ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(context.Background())
}

func (o GetAuthMetadataApiKeyAccessOutput) ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAuthMetadataApiKeyAccess) *GetAuthMetadataApiKeyAccess {
		return &v
	}).(GetAuthMetadataApiKeyAccessPtrOutput)
}

// `true` if this API key can create and manage Boards.
func (o GetAuthMetadataApiKeyAccessOutput) Boards() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Boards }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
func (o GetAuthMetadataApiKeyAccessOutput) Columns() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Columns }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage Datasets.
func (o GetAuthMetadataApiKeyAccessOutput) Datasets() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Datasets }).(pulumi.BoolOutput)
}

// `true` if this API key can key can send events to Honeycomb.
func (o GetAuthMetadataApiKeyAccessOutput) Events() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Events }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage Markers.
func (o GetAuthMetadataApiKeyAccessOutput) Markers() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Markers }).(pulumi.BoolOutput)
}

// `true` if this API key can execute existing Queries via the Query Data API.
func (o GetAuthMetadataApiKeyAccessOutput) Queries() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Queries }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage Recipients.
func (o GetAuthMetadataApiKeyAccessOutput) Recipients() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Recipients }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage SLOs.
func (o GetAuthMetadataApiKeyAccessOutput) Slos() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Slos }).(pulumi.BoolOutput)
}

// `true` if this API key can create and manage Triggers.
func (o GetAuthMetadataApiKeyAccessOutput) Triggers() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataApiKeyAccess) bool { return v.Triggers }).(pulumi.BoolOutput)
}

type GetAuthMetadataApiKeyAccessPtrOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataApiKeyAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataApiKeyAccess)(nil)).Elem()
}

func (o GetAuthMetadataApiKeyAccessPtrOutput) ToGetAuthMetadataApiKeyAccessPtrOutput() GetAuthMetadataApiKeyAccessPtrOutput {
	return o
}

func (o GetAuthMetadataApiKeyAccessPtrOutput) ToGetAuthMetadataApiKeyAccessPtrOutputWithContext(ctx context.Context) GetAuthMetadataApiKeyAccessPtrOutput {
	return o
}

func (o GetAuthMetadataApiKeyAccessPtrOutput) Elem() GetAuthMetadataApiKeyAccessOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) GetAuthMetadataApiKeyAccess {
		if v != nil {
			return *v
		}
		var ret GetAuthMetadataApiKeyAccess
		return ret
	}).(GetAuthMetadataApiKeyAccessOutput)
}

// `true` if this API key can create and manage Boards.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Boards() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Boards
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations
func (o GetAuthMetadataApiKeyAccessPtrOutput) Columns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Columns
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage Datasets.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Datasets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Datasets
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can key can send events to Honeycomb.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Events() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Events
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage Markers.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Markers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Markers
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can execute existing Queries via the Query Data API.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Queries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Queries
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage Recipients.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Recipients() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Recipients
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage SLOs.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Slos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Slos
	}).(pulumi.BoolPtrOutput)
}

// `true` if this API key can create and manage Triggers.
func (o GetAuthMetadataApiKeyAccessPtrOutput) Triggers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataApiKeyAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.Triggers
	}).(pulumi.BoolPtrOutput)
}

type GetAuthMetadataEnvironment struct {
	// `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
	Classic bool `pulumi:"classic"`
	// The name of the Team.
	Name string `pulumi:"name"`
	// The slug of the Team.
	Slug string `pulumi:"slug"`
}

// GetAuthMetadataEnvironmentInput is an input type that accepts GetAuthMetadataEnvironmentArgs and GetAuthMetadataEnvironmentOutput values.
// You can construct a concrete instance of `GetAuthMetadataEnvironmentInput` via:
//
//	GetAuthMetadataEnvironmentArgs{...}
type GetAuthMetadataEnvironmentInput interface {
	pulumi.Input

	ToGetAuthMetadataEnvironmentOutput() GetAuthMetadataEnvironmentOutput
	ToGetAuthMetadataEnvironmentOutputWithContext(context.Context) GetAuthMetadataEnvironmentOutput
}

type GetAuthMetadataEnvironmentArgs struct {
	// `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
	Classic pulumi.BoolInput `pulumi:"classic"`
	// The name of the Team.
	Name pulumi.StringInput `pulumi:"name"`
	// The slug of the Team.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetAuthMetadataEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataEnvironment)(nil)).Elem()
}

func (i GetAuthMetadataEnvironmentArgs) ToGetAuthMetadataEnvironmentOutput() GetAuthMetadataEnvironmentOutput {
	return i.ToGetAuthMetadataEnvironmentOutputWithContext(context.Background())
}

func (i GetAuthMetadataEnvironmentArgs) ToGetAuthMetadataEnvironmentOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataEnvironmentOutput)
}

func (i GetAuthMetadataEnvironmentArgs) ToGetAuthMetadataEnvironmentPtrOutput() GetAuthMetadataEnvironmentPtrOutput {
	return i.ToGetAuthMetadataEnvironmentPtrOutputWithContext(context.Background())
}

func (i GetAuthMetadataEnvironmentArgs) ToGetAuthMetadataEnvironmentPtrOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataEnvironmentOutput).ToGetAuthMetadataEnvironmentPtrOutputWithContext(ctx)
}

// GetAuthMetadataEnvironmentPtrInput is an input type that accepts GetAuthMetadataEnvironmentArgs, GetAuthMetadataEnvironmentPtr and GetAuthMetadataEnvironmentPtrOutput values.
// You can construct a concrete instance of `GetAuthMetadataEnvironmentPtrInput` via:
//
//	        GetAuthMetadataEnvironmentArgs{...}
//
//	or:
//
//	        nil
type GetAuthMetadataEnvironmentPtrInput interface {
	pulumi.Input

	ToGetAuthMetadataEnvironmentPtrOutput() GetAuthMetadataEnvironmentPtrOutput
	ToGetAuthMetadataEnvironmentPtrOutputWithContext(context.Context) GetAuthMetadataEnvironmentPtrOutput
}

type getAuthMetadataEnvironmentPtrType GetAuthMetadataEnvironmentArgs

func GetAuthMetadataEnvironmentPtr(v *GetAuthMetadataEnvironmentArgs) GetAuthMetadataEnvironmentPtrInput {
	return (*getAuthMetadataEnvironmentPtrType)(v)
}

func (*getAuthMetadataEnvironmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataEnvironment)(nil)).Elem()
}

func (i *getAuthMetadataEnvironmentPtrType) ToGetAuthMetadataEnvironmentPtrOutput() GetAuthMetadataEnvironmentPtrOutput {
	return i.ToGetAuthMetadataEnvironmentPtrOutputWithContext(context.Background())
}

func (i *getAuthMetadataEnvironmentPtrType) ToGetAuthMetadataEnvironmentPtrOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataEnvironmentPtrOutput)
}

type GetAuthMetadataEnvironmentOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataEnvironment)(nil)).Elem()
}

func (o GetAuthMetadataEnvironmentOutput) ToGetAuthMetadataEnvironmentOutput() GetAuthMetadataEnvironmentOutput {
	return o
}

func (o GetAuthMetadataEnvironmentOutput) ToGetAuthMetadataEnvironmentOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentOutput {
	return o
}

func (o GetAuthMetadataEnvironmentOutput) ToGetAuthMetadataEnvironmentPtrOutput() GetAuthMetadataEnvironmentPtrOutput {
	return o.ToGetAuthMetadataEnvironmentPtrOutputWithContext(context.Background())
}

func (o GetAuthMetadataEnvironmentOutput) ToGetAuthMetadataEnvironmentPtrOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAuthMetadataEnvironment) *GetAuthMetadataEnvironment {
		return &v
	}).(GetAuthMetadataEnvironmentPtrOutput)
}

// `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
func (o GetAuthMetadataEnvironmentOutput) Classic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAuthMetadataEnvironment) bool { return v.Classic }).(pulumi.BoolOutput)
}

// The name of the Team.
func (o GetAuthMetadataEnvironmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMetadataEnvironment) string { return v.Name }).(pulumi.StringOutput)
}

// The slug of the Team.
func (o GetAuthMetadataEnvironmentOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMetadataEnvironment) string { return v.Slug }).(pulumi.StringOutput)
}

type GetAuthMetadataEnvironmentPtrOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataEnvironmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataEnvironment)(nil)).Elem()
}

func (o GetAuthMetadataEnvironmentPtrOutput) ToGetAuthMetadataEnvironmentPtrOutput() GetAuthMetadataEnvironmentPtrOutput {
	return o
}

func (o GetAuthMetadataEnvironmentPtrOutput) ToGetAuthMetadataEnvironmentPtrOutputWithContext(ctx context.Context) GetAuthMetadataEnvironmentPtrOutput {
	return o
}

func (o GetAuthMetadataEnvironmentPtrOutput) Elem() GetAuthMetadataEnvironmentOutput {
	return o.ApplyT(func(v *GetAuthMetadataEnvironment) GetAuthMetadataEnvironment {
		if v != nil {
			return *v
		}
		var ret GetAuthMetadataEnvironment
		return ret
	}).(GetAuthMetadataEnvironmentOutput)
}

// `true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.
func (o GetAuthMetadataEnvironmentPtrOutput) Classic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataEnvironment) *bool {
		if v == nil {
			return nil
		}
		return &v.Classic
	}).(pulumi.BoolPtrOutput)
}

// The name of the Team.
func (o GetAuthMetadataEnvironmentPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The slug of the Team.
func (o GetAuthMetadataEnvironmentPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataEnvironment) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type GetAuthMetadataTeam struct {
	// The name of the Team.
	Name string `pulumi:"name"`
	// The slug of the Team.
	Slug string `pulumi:"slug"`
}

// GetAuthMetadataTeamInput is an input type that accepts GetAuthMetadataTeamArgs and GetAuthMetadataTeamOutput values.
// You can construct a concrete instance of `GetAuthMetadataTeamInput` via:
//
//	GetAuthMetadataTeamArgs{...}
type GetAuthMetadataTeamInput interface {
	pulumi.Input

	ToGetAuthMetadataTeamOutput() GetAuthMetadataTeamOutput
	ToGetAuthMetadataTeamOutputWithContext(context.Context) GetAuthMetadataTeamOutput
}

type GetAuthMetadataTeamArgs struct {
	// The name of the Team.
	Name pulumi.StringInput `pulumi:"name"`
	// The slug of the Team.
	Slug pulumi.StringInput `pulumi:"slug"`
}

func (GetAuthMetadataTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataTeam)(nil)).Elem()
}

func (i GetAuthMetadataTeamArgs) ToGetAuthMetadataTeamOutput() GetAuthMetadataTeamOutput {
	return i.ToGetAuthMetadataTeamOutputWithContext(context.Background())
}

func (i GetAuthMetadataTeamArgs) ToGetAuthMetadataTeamOutputWithContext(ctx context.Context) GetAuthMetadataTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataTeamOutput)
}

func (i GetAuthMetadataTeamArgs) ToGetAuthMetadataTeamPtrOutput() GetAuthMetadataTeamPtrOutput {
	return i.ToGetAuthMetadataTeamPtrOutputWithContext(context.Background())
}

func (i GetAuthMetadataTeamArgs) ToGetAuthMetadataTeamPtrOutputWithContext(ctx context.Context) GetAuthMetadataTeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataTeamOutput).ToGetAuthMetadataTeamPtrOutputWithContext(ctx)
}

// GetAuthMetadataTeamPtrInput is an input type that accepts GetAuthMetadataTeamArgs, GetAuthMetadataTeamPtr and GetAuthMetadataTeamPtrOutput values.
// You can construct a concrete instance of `GetAuthMetadataTeamPtrInput` via:
//
//	        GetAuthMetadataTeamArgs{...}
//
//	or:
//
//	        nil
type GetAuthMetadataTeamPtrInput interface {
	pulumi.Input

	ToGetAuthMetadataTeamPtrOutput() GetAuthMetadataTeamPtrOutput
	ToGetAuthMetadataTeamPtrOutputWithContext(context.Context) GetAuthMetadataTeamPtrOutput
}

type getAuthMetadataTeamPtrType GetAuthMetadataTeamArgs

func GetAuthMetadataTeamPtr(v *GetAuthMetadataTeamArgs) GetAuthMetadataTeamPtrInput {
	return (*getAuthMetadataTeamPtrType)(v)
}

func (*getAuthMetadataTeamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataTeam)(nil)).Elem()
}

func (i *getAuthMetadataTeamPtrType) ToGetAuthMetadataTeamPtrOutput() GetAuthMetadataTeamPtrOutput {
	return i.ToGetAuthMetadataTeamPtrOutputWithContext(context.Background())
}

func (i *getAuthMetadataTeamPtrType) ToGetAuthMetadataTeamPtrOutputWithContext(ctx context.Context) GetAuthMetadataTeamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthMetadataTeamPtrOutput)
}

type GetAuthMetadataTeamOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthMetadataTeam)(nil)).Elem()
}

func (o GetAuthMetadataTeamOutput) ToGetAuthMetadataTeamOutput() GetAuthMetadataTeamOutput {
	return o
}

func (o GetAuthMetadataTeamOutput) ToGetAuthMetadataTeamOutputWithContext(ctx context.Context) GetAuthMetadataTeamOutput {
	return o
}

func (o GetAuthMetadataTeamOutput) ToGetAuthMetadataTeamPtrOutput() GetAuthMetadataTeamPtrOutput {
	return o.ToGetAuthMetadataTeamPtrOutputWithContext(context.Background())
}

func (o GetAuthMetadataTeamOutput) ToGetAuthMetadataTeamPtrOutputWithContext(ctx context.Context) GetAuthMetadataTeamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetAuthMetadataTeam) *GetAuthMetadataTeam {
		return &v
	}).(GetAuthMetadataTeamPtrOutput)
}

// The name of the Team.
func (o GetAuthMetadataTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMetadataTeam) string { return v.Name }).(pulumi.StringOutput)
}

// The slug of the Team.
func (o GetAuthMetadataTeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthMetadataTeam) string { return v.Slug }).(pulumi.StringOutput)
}

type GetAuthMetadataTeamPtrOutput struct{ *pulumi.OutputState }

func (GetAuthMetadataTeamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetAuthMetadataTeam)(nil)).Elem()
}

func (o GetAuthMetadataTeamPtrOutput) ToGetAuthMetadataTeamPtrOutput() GetAuthMetadataTeamPtrOutput {
	return o
}

func (o GetAuthMetadataTeamPtrOutput) ToGetAuthMetadataTeamPtrOutputWithContext(ctx context.Context) GetAuthMetadataTeamPtrOutput {
	return o
}

func (o GetAuthMetadataTeamPtrOutput) Elem() GetAuthMetadataTeamOutput {
	return o.ApplyT(func(v *GetAuthMetadataTeam) GetAuthMetadataTeam {
		if v != nil {
			return *v
		}
		var ret GetAuthMetadataTeam
		return ret
	}).(GetAuthMetadataTeamOutput)
}

// The name of the Team.
func (o GetAuthMetadataTeamPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataTeam) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The slug of the Team.
func (o GetAuthMetadataTeamPtrOutput) Slug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetAuthMetadataTeam) *string {
		if v == nil {
			return nil
		}
		return &v.Slug
	}).(pulumi.StringPtrOutput)
}

type GetDatasetsDetailFilter struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetDatasetsDetailFilterInput is an input type that accepts GetDatasetsDetailFilterArgs and GetDatasetsDetailFilterOutput values.
// You can construct a concrete instance of `GetDatasetsDetailFilterInput` via:
//
//	GetDatasetsDetailFilterArgs{...}
type GetDatasetsDetailFilterInput interface {
	pulumi.Input

	ToGetDatasetsDetailFilterOutput() GetDatasetsDetailFilterOutput
	ToGetDatasetsDetailFilterOutputWithContext(context.Context) GetDatasetsDetailFilterOutput
}

type GetDatasetsDetailFilterArgs struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetDatasetsDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDetailFilter)(nil)).Elem()
}

func (i GetDatasetsDetailFilterArgs) ToGetDatasetsDetailFilterOutput() GetDatasetsDetailFilterOutput {
	return i.ToGetDatasetsDetailFilterOutputWithContext(context.Background())
}

func (i GetDatasetsDetailFilterArgs) ToGetDatasetsDetailFilterOutputWithContext(ctx context.Context) GetDatasetsDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDetailFilterOutput)
}

func (i GetDatasetsDetailFilterArgs) ToGetDatasetsDetailFilterPtrOutput() GetDatasetsDetailFilterPtrOutput {
	return i.ToGetDatasetsDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetDatasetsDetailFilterArgs) ToGetDatasetsDetailFilterPtrOutputWithContext(ctx context.Context) GetDatasetsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDetailFilterOutput).ToGetDatasetsDetailFilterPtrOutputWithContext(ctx)
}

// GetDatasetsDetailFilterPtrInput is an input type that accepts GetDatasetsDetailFilterArgs, GetDatasetsDetailFilterPtr and GetDatasetsDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetDatasetsDetailFilterPtrInput` via:
//
//	        GetDatasetsDetailFilterArgs{...}
//
//	or:
//
//	        nil
type GetDatasetsDetailFilterPtrInput interface {
	pulumi.Input

	ToGetDatasetsDetailFilterPtrOutput() GetDatasetsDetailFilterPtrOutput
	ToGetDatasetsDetailFilterPtrOutputWithContext(context.Context) GetDatasetsDetailFilterPtrOutput
}

type getDatasetsDetailFilterPtrType GetDatasetsDetailFilterArgs

func GetDatasetsDetailFilterPtr(v *GetDatasetsDetailFilterArgs) GetDatasetsDetailFilterPtrInput {
	return (*getDatasetsDetailFilterPtrType)(v)
}

func (*getDatasetsDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatasetsDetailFilter)(nil)).Elem()
}

func (i *getDatasetsDetailFilterPtrType) ToGetDatasetsDetailFilterPtrOutput() GetDatasetsDetailFilterPtrOutput {
	return i.ToGetDatasetsDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getDatasetsDetailFilterPtrType) ToGetDatasetsDetailFilterPtrOutputWithContext(ctx context.Context) GetDatasetsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatasetsDetailFilterPtrOutput)
}

type GetDatasetsDetailFilterOutput struct{ *pulumi.OutputState }

func (GetDatasetsDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatasetsDetailFilter)(nil)).Elem()
}

func (o GetDatasetsDetailFilterOutput) ToGetDatasetsDetailFilterOutput() GetDatasetsDetailFilterOutput {
	return o
}

func (o GetDatasetsDetailFilterOutput) ToGetDatasetsDetailFilterOutputWithContext(ctx context.Context) GetDatasetsDetailFilterOutput {
	return o
}

func (o GetDatasetsDetailFilterOutput) ToGetDatasetsDetailFilterPtrOutput() GetDatasetsDetailFilterPtrOutput {
	return o.ToGetDatasetsDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetDatasetsDetailFilterOutput) ToGetDatasetsDetailFilterPtrOutputWithContext(ctx context.Context) GetDatasetsDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetDatasetsDetailFilter) *GetDatasetsDetailFilter {
		return &v
	}).(GetDatasetsDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetDatasetsDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatasetsDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetDatasetsDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetDatasetsDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDatasetsDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetDatasetsDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetDatasetsDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetDatasetsDetailFilter)(nil)).Elem()
}

func (o GetDatasetsDetailFilterPtrOutput) ToGetDatasetsDetailFilterPtrOutput() GetDatasetsDetailFilterPtrOutput {
	return o
}

func (o GetDatasetsDetailFilterPtrOutput) ToGetDatasetsDetailFilterPtrOutputWithContext(ctx context.Context) GetDatasetsDetailFilterPtrOutput {
	return o
}

func (o GetDatasetsDetailFilterPtrOutput) Elem() GetDatasetsDetailFilterOutput {
	return o.ApplyT(func(v *GetDatasetsDetailFilter) GetDatasetsDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetDatasetsDetailFilter
		return ret
	}).(GetDatasetsDetailFilterOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetDatasetsDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatasetsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetDatasetsDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatasetsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetDatasetsDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetDatasetsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type GetEnvironmentsDetailFilter struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetEnvironmentsDetailFilterInput is an input type that accepts GetEnvironmentsDetailFilterArgs and GetEnvironmentsDetailFilterOutput values.
// You can construct a concrete instance of `GetEnvironmentsDetailFilterInput` via:
//
//	GetEnvironmentsDetailFilterArgs{...}
type GetEnvironmentsDetailFilterInput interface {
	pulumi.Input

	ToGetEnvironmentsDetailFilterOutput() GetEnvironmentsDetailFilterOutput
	ToGetEnvironmentsDetailFilterOutputWithContext(context.Context) GetEnvironmentsDetailFilterOutput
}

type GetEnvironmentsDetailFilterArgs struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetEnvironmentsDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsDetailFilter)(nil)).Elem()
}

func (i GetEnvironmentsDetailFilterArgs) ToGetEnvironmentsDetailFilterOutput() GetEnvironmentsDetailFilterOutput {
	return i.ToGetEnvironmentsDetailFilterOutputWithContext(context.Background())
}

func (i GetEnvironmentsDetailFilterArgs) ToGetEnvironmentsDetailFilterOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsDetailFilterOutput)
}

func (i GetEnvironmentsDetailFilterArgs) ToGetEnvironmentsDetailFilterPtrOutput() GetEnvironmentsDetailFilterPtrOutput {
	return i.ToGetEnvironmentsDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetEnvironmentsDetailFilterArgs) ToGetEnvironmentsDetailFilterPtrOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsDetailFilterOutput).ToGetEnvironmentsDetailFilterPtrOutputWithContext(ctx)
}

// GetEnvironmentsDetailFilterPtrInput is an input type that accepts GetEnvironmentsDetailFilterArgs, GetEnvironmentsDetailFilterPtr and GetEnvironmentsDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetEnvironmentsDetailFilterPtrInput` via:
//
//	        GetEnvironmentsDetailFilterArgs{...}
//
//	or:
//
//	        nil
type GetEnvironmentsDetailFilterPtrInput interface {
	pulumi.Input

	ToGetEnvironmentsDetailFilterPtrOutput() GetEnvironmentsDetailFilterPtrOutput
	ToGetEnvironmentsDetailFilterPtrOutputWithContext(context.Context) GetEnvironmentsDetailFilterPtrOutput
}

type getEnvironmentsDetailFilterPtrType GetEnvironmentsDetailFilterArgs

func GetEnvironmentsDetailFilterPtr(v *GetEnvironmentsDetailFilterArgs) GetEnvironmentsDetailFilterPtrInput {
	return (*getEnvironmentsDetailFilterPtrType)(v)
}

func (*getEnvironmentsDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetEnvironmentsDetailFilter)(nil)).Elem()
}

func (i *getEnvironmentsDetailFilterPtrType) ToGetEnvironmentsDetailFilterPtrOutput() GetEnvironmentsDetailFilterPtrOutput {
	return i.ToGetEnvironmentsDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getEnvironmentsDetailFilterPtrType) ToGetEnvironmentsDetailFilterPtrOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEnvironmentsDetailFilterPtrOutput)
}

type GetEnvironmentsDetailFilterOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsDetailFilter)(nil)).Elem()
}

func (o GetEnvironmentsDetailFilterOutput) ToGetEnvironmentsDetailFilterOutput() GetEnvironmentsDetailFilterOutput {
	return o
}

func (o GetEnvironmentsDetailFilterOutput) ToGetEnvironmentsDetailFilterOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterOutput {
	return o
}

func (o GetEnvironmentsDetailFilterOutput) ToGetEnvironmentsDetailFilterPtrOutput() GetEnvironmentsDetailFilterPtrOutput {
	return o.ToGetEnvironmentsDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetEnvironmentsDetailFilterOutput) ToGetEnvironmentsDetailFilterPtrOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetEnvironmentsDetailFilter) *GetEnvironmentsDetailFilter {
		return &v
	}).(GetEnvironmentsDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetEnvironmentsDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetEnvironmentsDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEnvironmentsDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetEnvironmentsDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEnvironmentsDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetEnvironmentsDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetEnvironmentsDetailFilter)(nil)).Elem()
}

func (o GetEnvironmentsDetailFilterPtrOutput) ToGetEnvironmentsDetailFilterPtrOutput() GetEnvironmentsDetailFilterPtrOutput {
	return o
}

func (o GetEnvironmentsDetailFilterPtrOutput) ToGetEnvironmentsDetailFilterPtrOutputWithContext(ctx context.Context) GetEnvironmentsDetailFilterPtrOutput {
	return o
}

func (o GetEnvironmentsDetailFilterPtrOutput) Elem() GetEnvironmentsDetailFilterOutput {
	return o.ApplyT(func(v *GetEnvironmentsDetailFilter) GetEnvironmentsDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetEnvironmentsDetailFilter
		return ret
	}).(GetEnvironmentsDetailFilterOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetEnvironmentsDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetEnvironmentsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetEnvironmentsDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetEnvironmentsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetEnvironmentsDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetEnvironmentsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationCalculation struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op string `pulumi:"op"`
}

// GetQuerySpecificationCalculationInput is an input type that accepts GetQuerySpecificationCalculationArgs and GetQuerySpecificationCalculationOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationInput` via:
//
//	GetQuerySpecificationCalculationArgs{...}
type GetQuerySpecificationCalculationInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput
	ToGetQuerySpecificationCalculationOutputWithContext(context.Context) GetQuerySpecificationCalculationOutput
}

type GetQuerySpecificationCalculationArgs struct {
	// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringInput `pulumi:"op"`
}

func (GetQuerySpecificationCalculationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return i.ToGetQuerySpecificationCalculationOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArgs) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationOutput)
}

// GetQuerySpecificationCalculationArrayInput is an input type that accepts GetQuerySpecificationCalculationArray and GetQuerySpecificationCalculationArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationCalculationArrayInput` via:
//
//	GetQuerySpecificationCalculationArray{ GetQuerySpecificationCalculationArgs{...} }
type GetQuerySpecificationCalculationArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput
	ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Context) GetQuerySpecificationCalculationArrayOutput
}

type GetQuerySpecificationCalculationArray []GetQuerySpecificationCalculationInput

func (GetQuerySpecificationCalculationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return i.ToGetQuerySpecificationCalculationArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationCalculationArray) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationCalculationArrayOutput)
}

type GetQuerySpecificationCalculationOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutput() GetQuerySpecificationCalculationOutput {
	return o
}

func (o GetQuerySpecificationCalculationOutput) ToGetQuerySpecificationCalculationOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationOutput {
	return o
}

// The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationCalculationOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationCalculationOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationCalculation) string { return v.Op }).(pulumi.StringOutput)
}

type GetQuerySpecificationCalculationArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationCalculationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationCalculation)(nil)).Elem()
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutput() GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) ToGetQuerySpecificationCalculationArrayOutputWithContext(ctx context.Context) GetQuerySpecificationCalculationArrayOutput {
	return o
}

func (o GetQuerySpecificationCalculationArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationCalculationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationCalculation {
		return vs[0].([]GetQuerySpecificationCalculation)[vs[1].(int)]
	}).(GetQuerySpecificationCalculationOutput)
}

type GetQuerySpecificationFilter struct {
	// The column to apply the filter to.
	Column string `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op string `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
	//
	// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
	Value *string `pulumi:"value"`
}

// GetQuerySpecificationFilterInput is an input type that accepts GetQuerySpecificationFilterArgs and GetQuerySpecificationFilterOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterInput` via:
//
//	GetQuerySpecificationFilterArgs{...}
type GetQuerySpecificationFilterInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput
	ToGetQuerySpecificationFilterOutputWithContext(context.Context) GetQuerySpecificationFilterOutput
}

type GetQuerySpecificationFilterArgs struct {
	// The column to apply the filter to.
	Column pulumi.StringInput `pulumi:"column"`
	// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
	//
	// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (GetQuerySpecificationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return i.ToGetQuerySpecificationFilterOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArgs) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterOutput)
}

// GetQuerySpecificationFilterArrayInput is an input type that accepts GetQuerySpecificationFilterArray and GetQuerySpecificationFilterArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationFilterArrayInput` via:
//
//	GetQuerySpecificationFilterArray{ GetQuerySpecificationFilterArgs{...} }
type GetQuerySpecificationFilterArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput
	ToGetQuerySpecificationFilterArrayOutputWithContext(context.Context) GetQuerySpecificationFilterArrayOutput
}

type GetQuerySpecificationFilterArray []GetQuerySpecificationFilterInput

func (GetQuerySpecificationFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return i.ToGetQuerySpecificationFilterArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationFilterArray) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationFilterArrayOutput)
}

type GetQuerySpecificationFilterOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutput() GetQuerySpecificationFilterOutput {
	return o
}

func (o GetQuerySpecificationFilterOutput) ToGetQuerySpecificationFilterOutputWithContext(ctx context.Context) GetQuerySpecificationFilterOutput {
	return o
}

// The column to apply the filter to.
func (o GetQuerySpecificationFilterOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Column }).(pulumi.StringOutput)
}

// The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.
func (o GetQuerySpecificationFilterOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) string { return v.Op }).(pulumi.StringOutput)
}

// The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.
//
// * > **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.
func (o GetQuerySpecificationFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationFilterArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationFilter)(nil)).Elem()
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutput() GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) ToGetQuerySpecificationFilterArrayOutputWithContext(ctx context.Context) GetQuerySpecificationFilterArrayOutput {
	return o
}

func (o GetQuerySpecificationFilterArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationFilter {
		return vs[0].([]GetQuerySpecificationFilter)[vs[1].(int)]
	}).(GetQuerySpecificationFilterOutput)
}

type GetQuerySpecificationHaving struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp string `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column *string `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op string `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	//
	// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
	Value float64 `pulumi:"value"`
}

// GetQuerySpecificationHavingInput is an input type that accepts GetQuerySpecificationHavingArgs and GetQuerySpecificationHavingOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingInput` via:
//
//	GetQuerySpecificationHavingArgs{...}
type GetQuerySpecificationHavingInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput
	ToGetQuerySpecificationHavingOutputWithContext(context.Context) GetQuerySpecificationHavingOutput
}

type GetQuerySpecificationHavingArgs struct {
	// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
	CalculateOp pulumi.StringInput `pulumi:"calculateOp"`
	// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
	Op pulumi.StringInput `pulumi:"op"`
	// The value used with `op`. Currently assumed to be a number.
	//
	// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (GetQuerySpecificationHavingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return i.ToGetQuerySpecificationHavingOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArgs) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingOutput)
}

// GetQuerySpecificationHavingArrayInput is an input type that accepts GetQuerySpecificationHavingArray and GetQuerySpecificationHavingArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationHavingArrayInput` via:
//
//	GetQuerySpecificationHavingArray{ GetQuerySpecificationHavingArgs{...} }
type GetQuerySpecificationHavingArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput
	ToGetQuerySpecificationHavingArrayOutputWithContext(context.Context) GetQuerySpecificationHavingArrayOutput
}

type GetQuerySpecificationHavingArray []GetQuerySpecificationHavingInput

func (GetQuerySpecificationHavingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return i.ToGetQuerySpecificationHavingArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationHavingArray) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationHavingArrayOutput)
}

type GetQuerySpecificationHavingOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutput() GetQuerySpecificationHavingOutput {
	return o
}

func (o GetQuerySpecificationHavingOutput) ToGetQuerySpecificationHavingOutputWithContext(ctx context.Context) GetQuerySpecificationHavingOutput {
	return o
}

// The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.
func (o GetQuerySpecificationHavingOutput) CalculateOp() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.CalculateOp }).(pulumi.StringOutput)
}

// The column to apply the `calculateOp` to, not needed with `COUNT` or `CONCURRENCY`.
func (o GetQuerySpecificationHavingOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The operator to apply to filter the query results. One of `=`, `!=`, `>`, `>=`, `<`, or `<=`.
func (o GetQuerySpecificationHavingOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v GetQuerySpecificationHaving) string { return v.Op }).(pulumi.StringOutput)
}

// The value used with `op`. Currently assumed to be a number.
//
// > **NOTE** A having term's `column`/`calculateOp` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculateOp` pair.
func (o GetQuerySpecificationHavingOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v GetQuerySpecificationHaving) float64 { return v.Value }).(pulumi.Float64Output)
}

type GetQuerySpecificationHavingArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationHavingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationHaving)(nil)).Elem()
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutput() GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) ToGetQuerySpecificationHavingArrayOutputWithContext(ctx context.Context) GetQuerySpecificationHavingArrayOutput {
	return o
}

func (o GetQuerySpecificationHavingArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationHavingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationHaving {
		return vs[0].([]GetQuerySpecificationHaving)[vs[1].(int)]
	}).(GetQuerySpecificationHavingOutput)
}

type GetQuerySpecificationOrder struct {
	// Either a column present in `breakdown` or a column that `op` applies to.
	Column *string `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op *string `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order *string `pulumi:"order"`
}

// GetQuerySpecificationOrderInput is an input type that accepts GetQuerySpecificationOrderArgs and GetQuerySpecificationOrderOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderInput` via:
//
//	GetQuerySpecificationOrderArgs{...}
type GetQuerySpecificationOrderInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput
	ToGetQuerySpecificationOrderOutputWithContext(context.Context) GetQuerySpecificationOrderOutput
}

type GetQuerySpecificationOrderArgs struct {
	// Either a column present in `breakdown` or a column that `op` applies to.
	Column pulumi.StringPtrInput `pulumi:"column"`
	// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
	Op pulumi.StringPtrInput `pulumi:"op"`
	// The sort direction, if set must be `ascending` or `descending`.
	Order pulumi.StringPtrInput `pulumi:"order"`
}

func (GetQuerySpecificationOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return i.ToGetQuerySpecificationOrderOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArgs) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderOutput)
}

// GetQuerySpecificationOrderArrayInput is an input type that accepts GetQuerySpecificationOrderArray and GetQuerySpecificationOrderArrayOutput values.
// You can construct a concrete instance of `GetQuerySpecificationOrderArrayInput` via:
//
//	GetQuerySpecificationOrderArray{ GetQuerySpecificationOrderArgs{...} }
type GetQuerySpecificationOrderArrayInput interface {
	pulumi.Input

	ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput
	ToGetQuerySpecificationOrderArrayOutputWithContext(context.Context) GetQuerySpecificationOrderArrayOutput
}

type GetQuerySpecificationOrderArray []GetQuerySpecificationOrderInput

func (GetQuerySpecificationOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return i.ToGetQuerySpecificationOrderArrayOutputWithContext(context.Background())
}

func (i GetQuerySpecificationOrderArray) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetQuerySpecificationOrderArrayOutput)
}

type GetQuerySpecificationOrderOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutput() GetQuerySpecificationOrderOutput {
	return o
}

func (o GetQuerySpecificationOrderOutput) ToGetQuerySpecificationOrderOutputWithContext(ctx context.Context) GetQuerySpecificationOrderOutput {
	return o
}

// Either a column present in `breakdown` or a column that `op` applies to.
func (o GetQuerySpecificationOrderOutput) Column() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Column }).(pulumi.StringPtrOutput)
}

// The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).
func (o GetQuerySpecificationOrderOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Op }).(pulumi.StringPtrOutput)
}

// The sort direction, if set must be `ascending` or `descending`.
func (o GetQuerySpecificationOrderOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetQuerySpecificationOrder) *string { return v.Order }).(pulumi.StringPtrOutput)
}

type GetQuerySpecificationOrderArrayOutput struct{ *pulumi.OutputState }

func (GetQuerySpecificationOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetQuerySpecificationOrder)(nil)).Elem()
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutput() GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) ToGetQuerySpecificationOrderArrayOutputWithContext(ctx context.Context) GetQuerySpecificationOrderArrayOutput {
	return o
}

func (o GetQuerySpecificationOrderArrayOutput) Index(i pulumi.IntInput) GetQuerySpecificationOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetQuerySpecificationOrder {
		return vs[0].([]GetQuerySpecificationOrder)[vs[1].(int)]
	}).(GetQuerySpecificationOrderOutput)
}

type GetSLOsDetailFilter struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name string `pulumi:"name"`
	// The value of the detail field to match on.
	Value *string `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex *string `pulumi:"valueRegex"`
}

// GetSLOsDetailFilterInput is an input type that accepts GetSLOsDetailFilterArgs and GetSLOsDetailFilterOutput values.
// You can construct a concrete instance of `GetSLOsDetailFilterInput` via:
//
//	GetSLOsDetailFilterArgs{...}
type GetSLOsDetailFilterInput interface {
	pulumi.Input

	ToGetSLOsDetailFilterOutput() GetSLOsDetailFilterOutput
	ToGetSLOsDetailFilterOutputWithContext(context.Context) GetSLOsDetailFilterOutput
}

type GetSLOsDetailFilterArgs struct {
	// The name of the detail field to filter by. Currently only `name` is supported.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the detail field to match on.
	Value pulumi.StringPtrInput `pulumi:"value"`
	// A regular expression string to apply to the value of the detail field to match on.
	//
	// > **Note** one of `value` or `valueRegex` is required.
	ValueRegex pulumi.StringPtrInput `pulumi:"valueRegex"`
}

func (GetSLOsDetailFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSLOsDetailFilter)(nil)).Elem()
}

func (i GetSLOsDetailFilterArgs) ToGetSLOsDetailFilterOutput() GetSLOsDetailFilterOutput {
	return i.ToGetSLOsDetailFilterOutputWithContext(context.Background())
}

func (i GetSLOsDetailFilterArgs) ToGetSLOsDetailFilterOutputWithContext(ctx context.Context) GetSLOsDetailFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSLOsDetailFilterOutput)
}

func (i GetSLOsDetailFilterArgs) ToGetSLOsDetailFilterPtrOutput() GetSLOsDetailFilterPtrOutput {
	return i.ToGetSLOsDetailFilterPtrOutputWithContext(context.Background())
}

func (i GetSLOsDetailFilterArgs) ToGetSLOsDetailFilterPtrOutputWithContext(ctx context.Context) GetSLOsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSLOsDetailFilterOutput).ToGetSLOsDetailFilterPtrOutputWithContext(ctx)
}

// GetSLOsDetailFilterPtrInput is an input type that accepts GetSLOsDetailFilterArgs, GetSLOsDetailFilterPtr and GetSLOsDetailFilterPtrOutput values.
// You can construct a concrete instance of `GetSLOsDetailFilterPtrInput` via:
//
//	        GetSLOsDetailFilterArgs{...}
//
//	or:
//
//	        nil
type GetSLOsDetailFilterPtrInput interface {
	pulumi.Input

	ToGetSLOsDetailFilterPtrOutput() GetSLOsDetailFilterPtrOutput
	ToGetSLOsDetailFilterPtrOutputWithContext(context.Context) GetSLOsDetailFilterPtrOutput
}

type getSLOsDetailFilterPtrType GetSLOsDetailFilterArgs

func GetSLOsDetailFilterPtr(v *GetSLOsDetailFilterArgs) GetSLOsDetailFilterPtrInput {
	return (*getSLOsDetailFilterPtrType)(v)
}

func (*getSLOsDetailFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSLOsDetailFilter)(nil)).Elem()
}

func (i *getSLOsDetailFilterPtrType) ToGetSLOsDetailFilterPtrOutput() GetSLOsDetailFilterPtrOutput {
	return i.ToGetSLOsDetailFilterPtrOutputWithContext(context.Background())
}

func (i *getSLOsDetailFilterPtrType) ToGetSLOsDetailFilterPtrOutputWithContext(ctx context.Context) GetSLOsDetailFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSLOsDetailFilterPtrOutput)
}

type GetSLOsDetailFilterOutput struct{ *pulumi.OutputState }

func (GetSLOsDetailFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSLOsDetailFilter)(nil)).Elem()
}

func (o GetSLOsDetailFilterOutput) ToGetSLOsDetailFilterOutput() GetSLOsDetailFilterOutput {
	return o
}

func (o GetSLOsDetailFilterOutput) ToGetSLOsDetailFilterOutputWithContext(ctx context.Context) GetSLOsDetailFilterOutput {
	return o
}

func (o GetSLOsDetailFilterOutput) ToGetSLOsDetailFilterPtrOutput() GetSLOsDetailFilterPtrOutput {
	return o.ToGetSLOsDetailFilterPtrOutputWithContext(context.Background())
}

func (o GetSLOsDetailFilterOutput) ToGetSLOsDetailFilterPtrOutputWithContext(ctx context.Context) GetSLOsDetailFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSLOsDetailFilter) *GetSLOsDetailFilter {
		return &v
	}).(GetSLOsDetailFilterPtrOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetSLOsDetailFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSLOsDetailFilter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the detail field to match on.
func (o GetSLOsDetailFilterOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSLOsDetailFilter) *string { return v.Value }).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetSLOsDetailFilterOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSLOsDetailFilter) *string { return v.ValueRegex }).(pulumi.StringPtrOutput)
}

type GetSLOsDetailFilterPtrOutput struct{ *pulumi.OutputState }

func (GetSLOsDetailFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSLOsDetailFilter)(nil)).Elem()
}

func (o GetSLOsDetailFilterPtrOutput) ToGetSLOsDetailFilterPtrOutput() GetSLOsDetailFilterPtrOutput {
	return o
}

func (o GetSLOsDetailFilterPtrOutput) ToGetSLOsDetailFilterPtrOutputWithContext(ctx context.Context) GetSLOsDetailFilterPtrOutput {
	return o
}

func (o GetSLOsDetailFilterPtrOutput) Elem() GetSLOsDetailFilterOutput {
	return o.ApplyT(func(v *GetSLOsDetailFilter) GetSLOsDetailFilter {
		if v != nil {
			return *v
		}
		var ret GetSLOsDetailFilter
		return ret
	}).(GetSLOsDetailFilterOutput)
}

// The name of the detail field to filter by. Currently only `name` is supported.
func (o GetSLOsDetailFilterPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSLOsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The value of the detail field to match on.
func (o GetSLOsDetailFilterPtrOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSLOsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.Value
	}).(pulumi.StringPtrOutput)
}

// A regular expression string to apply to the value of the detail field to match on.
//
// > **Note** one of `value` or `valueRegex` is required.
func (o GetSLOsDetailFilterPtrOutput) ValueRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSLOsDetailFilter) *string {
		if v == nil {
			return nil
		}
		return v.ValueRegex
	}).(pulumi.StringPtrOutput)
}

type TriggerEvaluationSchedule struct {
	// A list of days of the week (in lowercase) to evaluate the trigger on
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)
	EndTime string `pulumi:"endTime"`
	// UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)
	StartTime string `pulumi:"startTime"`
}

// TriggerEvaluationScheduleInput is an input type that accepts TriggerEvaluationScheduleArgs and TriggerEvaluationScheduleOutput values.
// You can construct a concrete instance of `TriggerEvaluationScheduleInput` via:
//
//	TriggerEvaluationScheduleArgs{...}
type TriggerEvaluationScheduleInput interface {
	pulumi.Input

	ToTriggerEvaluationScheduleOutput() TriggerEvaluationScheduleOutput
	ToTriggerEvaluationScheduleOutputWithContext(context.Context) TriggerEvaluationScheduleOutput
}

type TriggerEvaluationScheduleArgs struct {
	// A list of days of the week (in lowercase) to evaluate the trigger on
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (TriggerEvaluationScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEvaluationSchedule)(nil)).Elem()
}

func (i TriggerEvaluationScheduleArgs) ToTriggerEvaluationScheduleOutput() TriggerEvaluationScheduleOutput {
	return i.ToTriggerEvaluationScheduleOutputWithContext(context.Background())
}

func (i TriggerEvaluationScheduleArgs) ToTriggerEvaluationScheduleOutputWithContext(ctx context.Context) TriggerEvaluationScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEvaluationScheduleOutput)
}

func (i TriggerEvaluationScheduleArgs) ToTriggerEvaluationSchedulePtrOutput() TriggerEvaluationSchedulePtrOutput {
	return i.ToTriggerEvaluationSchedulePtrOutputWithContext(context.Background())
}

func (i TriggerEvaluationScheduleArgs) ToTriggerEvaluationSchedulePtrOutputWithContext(ctx context.Context) TriggerEvaluationSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEvaluationScheduleOutput).ToTriggerEvaluationSchedulePtrOutputWithContext(ctx)
}

// TriggerEvaluationSchedulePtrInput is an input type that accepts TriggerEvaluationScheduleArgs, TriggerEvaluationSchedulePtr and TriggerEvaluationSchedulePtrOutput values.
// You can construct a concrete instance of `TriggerEvaluationSchedulePtrInput` via:
//
//	        TriggerEvaluationScheduleArgs{...}
//
//	or:
//
//	        nil
type TriggerEvaluationSchedulePtrInput interface {
	pulumi.Input

	ToTriggerEvaluationSchedulePtrOutput() TriggerEvaluationSchedulePtrOutput
	ToTriggerEvaluationSchedulePtrOutputWithContext(context.Context) TriggerEvaluationSchedulePtrOutput
}

type triggerEvaluationSchedulePtrType TriggerEvaluationScheduleArgs

func TriggerEvaluationSchedulePtr(v *TriggerEvaluationScheduleArgs) TriggerEvaluationSchedulePtrInput {
	return (*triggerEvaluationSchedulePtrType)(v)
}

func (*triggerEvaluationSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEvaluationSchedule)(nil)).Elem()
}

func (i *triggerEvaluationSchedulePtrType) ToTriggerEvaluationSchedulePtrOutput() TriggerEvaluationSchedulePtrOutput {
	return i.ToTriggerEvaluationSchedulePtrOutputWithContext(context.Background())
}

func (i *triggerEvaluationSchedulePtrType) ToTriggerEvaluationSchedulePtrOutputWithContext(ctx context.Context) TriggerEvaluationSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerEvaluationSchedulePtrOutput)
}

type TriggerEvaluationScheduleOutput struct{ *pulumi.OutputState }

func (TriggerEvaluationScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerEvaluationSchedule)(nil)).Elem()
}

func (o TriggerEvaluationScheduleOutput) ToTriggerEvaluationScheduleOutput() TriggerEvaluationScheduleOutput {
	return o
}

func (o TriggerEvaluationScheduleOutput) ToTriggerEvaluationScheduleOutputWithContext(ctx context.Context) TriggerEvaluationScheduleOutput {
	return o
}

func (o TriggerEvaluationScheduleOutput) ToTriggerEvaluationSchedulePtrOutput() TriggerEvaluationSchedulePtrOutput {
	return o.ToTriggerEvaluationSchedulePtrOutputWithContext(context.Background())
}

func (o TriggerEvaluationScheduleOutput) ToTriggerEvaluationSchedulePtrOutputWithContext(ctx context.Context) TriggerEvaluationSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerEvaluationSchedule) *TriggerEvaluationSchedule {
		return &v
	}).(TriggerEvaluationSchedulePtrOutput)
}

// A list of days of the week (in lowercase) to evaluate the trigger on
func (o TriggerEvaluationScheduleOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TriggerEvaluationSchedule) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)
func (o TriggerEvaluationScheduleOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerEvaluationSchedule) string { return v.EndTime }).(pulumi.StringOutput)
}

// UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)
func (o TriggerEvaluationScheduleOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerEvaluationSchedule) string { return v.StartTime }).(pulumi.StringOutput)
}

type TriggerEvaluationSchedulePtrOutput struct{ *pulumi.OutputState }

func (TriggerEvaluationSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerEvaluationSchedule)(nil)).Elem()
}

func (o TriggerEvaluationSchedulePtrOutput) ToTriggerEvaluationSchedulePtrOutput() TriggerEvaluationSchedulePtrOutput {
	return o
}

func (o TriggerEvaluationSchedulePtrOutput) ToTriggerEvaluationSchedulePtrOutputWithContext(ctx context.Context) TriggerEvaluationSchedulePtrOutput {
	return o
}

func (o TriggerEvaluationSchedulePtrOutput) Elem() TriggerEvaluationScheduleOutput {
	return o.ApplyT(func(v *TriggerEvaluationSchedule) TriggerEvaluationSchedule {
		if v != nil {
			return *v
		}
		var ret TriggerEvaluationSchedule
		return ret
	}).(TriggerEvaluationScheduleOutput)
}

// A list of days of the week (in lowercase) to evaluate the trigger on
func (o TriggerEvaluationSchedulePtrOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TriggerEvaluationSchedule) []string {
		if v == nil {
			return nil
		}
		return v.DaysOfWeeks
	}).(pulumi.StringArrayOutput)
}

// UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)
func (o TriggerEvaluationSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerEvaluationSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.EndTime
	}).(pulumi.StringPtrOutput)
}

// UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)
func (o TriggerEvaluationSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerEvaluationSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type TriggerRecipient struct {
	// The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.
	Id *string `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	//
	// Type      | Target
	// ----------|-------------------------
	// email     | an email address
	// marker    | name of the marker
	// pagerduty | _N/A_
	// slack     | name of the channel
	// webhook   | name of the webhook
	NotificationDetails *TriggerRecipientNotificationDetails `pulumi:"notificationDetails"`
	// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).
	// Cannot not be used in combination with `id`.
	Target *string `pulumi:"target"`
	// The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.
	// Cannot not be used in combination with `id`.
	Type *string `pulumi:"type"`
}

// TriggerRecipientInput is an input type that accepts TriggerRecipientArgs and TriggerRecipientOutput values.
// You can construct a concrete instance of `TriggerRecipientInput` via:
//
//	TriggerRecipientArgs{...}
type TriggerRecipientInput interface {
	pulumi.Input

	ToTriggerRecipientOutput() TriggerRecipientOutput
	ToTriggerRecipientOutputWithContext(context.Context) TriggerRecipientOutput
}

type TriggerRecipientArgs struct {
	// The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
	//
	// Type      | Target
	// ----------|-------------------------
	// email     | an email address
	// marker    | name of the marker
	// pagerduty | _N/A_
	// slack     | name of the channel
	// webhook   | name of the webhook
	NotificationDetails TriggerRecipientNotificationDetailsPtrInput `pulumi:"notificationDetails"`
	// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).
	// Cannot not be used in combination with `id`.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.
	// Cannot not be used in combination with `id`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (TriggerRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipient)(nil)).Elem()
}

func (i TriggerRecipientArgs) ToTriggerRecipientOutput() TriggerRecipientOutput {
	return i.ToTriggerRecipientOutputWithContext(context.Background())
}

func (i TriggerRecipientArgs) ToTriggerRecipientOutputWithContext(ctx context.Context) TriggerRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientOutput)
}

// TriggerRecipientArrayInput is an input type that accepts TriggerRecipientArray and TriggerRecipientArrayOutput values.
// You can construct a concrete instance of `TriggerRecipientArrayInput` via:
//
//	TriggerRecipientArray{ TriggerRecipientArgs{...} }
type TriggerRecipientArrayInput interface {
	pulumi.Input

	ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput
	ToTriggerRecipientArrayOutputWithContext(context.Context) TriggerRecipientArrayOutput
}

type TriggerRecipientArray []TriggerRecipientInput

func (TriggerRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerRecipient)(nil)).Elem()
}

func (i TriggerRecipientArray) ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput {
	return i.ToTriggerRecipientArrayOutputWithContext(context.Background())
}

func (i TriggerRecipientArray) ToTriggerRecipientArrayOutputWithContext(ctx context.Context) TriggerRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientArrayOutput)
}

type TriggerRecipientOutput struct{ *pulumi.OutputState }

func (TriggerRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipient)(nil)).Elem()
}

func (o TriggerRecipientOutput) ToTriggerRecipientOutput() TriggerRecipientOutput {
	return o
}

func (o TriggerRecipientOutput) ToTriggerRecipientOutputWithContext(ctx context.Context) TriggerRecipientOutput {
	return o
}

// The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.
func (o TriggerRecipientOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// a block of additional details to send along with the notification. The only supported option currently is `pagerdutySeverity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.
//
// Type      | Target
// ----------|-------------------------
// email     | an email address
// marker    | name of the marker
// pagerduty | _N/A_
// slack     | name of the channel
// webhook   | name of the webhook
func (o TriggerRecipientOutput) NotificationDetails() TriggerRecipientNotificationDetailsPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *TriggerRecipientNotificationDetails { return v.NotificationDetails }).(TriggerRecipientNotificationDetailsPtrOutput)
}

// Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).
// Cannot not be used in combination with `id`.
func (o TriggerRecipientOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.
// Cannot not be used in combination with `id`.
func (o TriggerRecipientOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipient) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type TriggerRecipientArrayOutput struct{ *pulumi.OutputState }

func (TriggerRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TriggerRecipient)(nil)).Elem()
}

func (o TriggerRecipientArrayOutput) ToTriggerRecipientArrayOutput() TriggerRecipientArrayOutput {
	return o
}

func (o TriggerRecipientArrayOutput) ToTriggerRecipientArrayOutputWithContext(ctx context.Context) TriggerRecipientArrayOutput {
	return o
}

func (o TriggerRecipientArrayOutput) Index(i pulumi.IntInput) TriggerRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TriggerRecipient {
		return vs[0].([]TriggerRecipient)[vs[1].(int)]
	}).(TriggerRecipientOutput)
}

type TriggerRecipientNotificationDetails struct {
	// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
	PagerdutySeverity *string `pulumi:"pagerdutySeverity"`
}

// TriggerRecipientNotificationDetailsInput is an input type that accepts TriggerRecipientNotificationDetailsArgs and TriggerRecipientNotificationDetailsOutput values.
// You can construct a concrete instance of `TriggerRecipientNotificationDetailsInput` via:
//
//	TriggerRecipientNotificationDetailsArgs{...}
type TriggerRecipientNotificationDetailsInput interface {
	pulumi.Input

	ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput
	ToTriggerRecipientNotificationDetailsOutputWithContext(context.Context) TriggerRecipientNotificationDetailsOutput
}

type TriggerRecipientNotificationDetailsArgs struct {
	// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
	PagerdutySeverity pulumi.StringPtrInput `pulumi:"pagerdutySeverity"`
}

func (TriggerRecipientNotificationDetailsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput {
	return i.ToTriggerRecipientNotificationDetailsOutputWithContext(context.Background())
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsOutput)
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return i.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i TriggerRecipientNotificationDetailsArgs) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsOutput).ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx)
}

// TriggerRecipientNotificationDetailsPtrInput is an input type that accepts TriggerRecipientNotificationDetailsArgs, TriggerRecipientNotificationDetailsPtr and TriggerRecipientNotificationDetailsPtrOutput values.
// You can construct a concrete instance of `TriggerRecipientNotificationDetailsPtrInput` via:
//
//	        TriggerRecipientNotificationDetailsArgs{...}
//
//	or:
//
//	        nil
type TriggerRecipientNotificationDetailsPtrInput interface {
	pulumi.Input

	ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput
	ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Context) TriggerRecipientNotificationDetailsPtrOutput
}

type triggerRecipientNotificationDetailsPtrType TriggerRecipientNotificationDetailsArgs

func TriggerRecipientNotificationDetailsPtr(v *TriggerRecipientNotificationDetailsArgs) TriggerRecipientNotificationDetailsPtrInput {
	return (*triggerRecipientNotificationDetailsPtrType)(v)
}

func (*triggerRecipientNotificationDetailsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (i *triggerRecipientNotificationDetailsPtrType) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return i.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (i *triggerRecipientNotificationDetailsPtrType) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerRecipientNotificationDetailsPtrOutput)
}

type TriggerRecipientNotificationDetailsOutput struct{ *pulumi.OutputState }

func (TriggerRecipientNotificationDetailsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsOutput() TriggerRecipientNotificationDetailsOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return o.ToTriggerRecipientNotificationDetailsPtrOutputWithContext(context.Background())
}

func (o TriggerRecipientNotificationDetailsOutput) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerRecipientNotificationDetails) *TriggerRecipientNotificationDetails {
		return &v
	}).(TriggerRecipientNotificationDetailsPtrOutput)
}

// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
func (o TriggerRecipientNotificationDetailsOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TriggerRecipientNotificationDetails) *string { return v.PagerdutySeverity }).(pulumi.StringPtrOutput)
}

type TriggerRecipientNotificationDetailsPtrOutput struct{ *pulumi.OutputState }

func (TriggerRecipientNotificationDetailsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerRecipientNotificationDetails)(nil)).Elem()
}

func (o TriggerRecipientNotificationDetailsPtrOutput) ToTriggerRecipientNotificationDetailsPtrOutput() TriggerRecipientNotificationDetailsPtrOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsPtrOutput) ToTriggerRecipientNotificationDetailsPtrOutputWithContext(ctx context.Context) TriggerRecipientNotificationDetailsPtrOutput {
	return o
}

func (o TriggerRecipientNotificationDetailsPtrOutput) Elem() TriggerRecipientNotificationDetailsOutput {
	return o.ApplyT(func(v *TriggerRecipientNotificationDetails) TriggerRecipientNotificationDetails {
		if v != nil {
			return *v
		}
		var ret TriggerRecipientNotificationDetails
		return ret
	}).(TriggerRecipientNotificationDetailsOutput)
}

// The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.
func (o TriggerRecipientNotificationDetailsPtrOutput) PagerdutySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerRecipientNotificationDetails) *string {
		if v == nil {
			return nil
		}
		return v.PagerdutySeverity
	}).(pulumi.StringPtrOutput)
}

type TriggerThreshold struct {
	// The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.
	ExceededLimit *int `pulumi:"exceededLimit"`
	// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
	Op string `pulumi:"op"`
	// The value to be used with the operator.
	Value float64 `pulumi:"value"`
}

// TriggerThresholdInput is an input type that accepts TriggerThresholdArgs and TriggerThresholdOutput values.
// You can construct a concrete instance of `TriggerThresholdInput` via:
//
//	TriggerThresholdArgs{...}
type TriggerThresholdInput interface {
	pulumi.Input

	ToTriggerThresholdOutput() TriggerThresholdOutput
	ToTriggerThresholdOutputWithContext(context.Context) TriggerThresholdOutput
}

type TriggerThresholdArgs struct {
	// The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.
	ExceededLimit pulumi.IntPtrInput `pulumi:"exceededLimit"`
	// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
	Op pulumi.StringInput `pulumi:"op"`
	// The value to be used with the operator.
	Value pulumi.Float64Input `pulumi:"value"`
}

func (TriggerThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerThreshold)(nil)).Elem()
}

func (i TriggerThresholdArgs) ToTriggerThresholdOutput() TriggerThresholdOutput {
	return i.ToTriggerThresholdOutputWithContext(context.Background())
}

func (i TriggerThresholdArgs) ToTriggerThresholdOutputWithContext(ctx context.Context) TriggerThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdOutput)
}

func (i TriggerThresholdArgs) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return i.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (i TriggerThresholdArgs) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdOutput).ToTriggerThresholdPtrOutputWithContext(ctx)
}

// TriggerThresholdPtrInput is an input type that accepts TriggerThresholdArgs, TriggerThresholdPtr and TriggerThresholdPtrOutput values.
// You can construct a concrete instance of `TriggerThresholdPtrInput` via:
//
//	        TriggerThresholdArgs{...}
//
//	or:
//
//	        nil
type TriggerThresholdPtrInput interface {
	pulumi.Input

	ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput
	ToTriggerThresholdPtrOutputWithContext(context.Context) TriggerThresholdPtrOutput
}

type triggerThresholdPtrType TriggerThresholdArgs

func TriggerThresholdPtr(v *TriggerThresholdArgs) TriggerThresholdPtrInput {
	return (*triggerThresholdPtrType)(v)
}

func (*triggerThresholdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerThreshold)(nil)).Elem()
}

func (i *triggerThresholdPtrType) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return i.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (i *triggerThresholdPtrType) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerThresholdPtrOutput)
}

type TriggerThresholdOutput struct{ *pulumi.OutputState }

func (TriggerThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TriggerThreshold)(nil)).Elem()
}

func (o TriggerThresholdOutput) ToTriggerThresholdOutput() TriggerThresholdOutput {
	return o
}

func (o TriggerThresholdOutput) ToTriggerThresholdOutputWithContext(ctx context.Context) TriggerThresholdOutput {
	return o
}

func (o TriggerThresholdOutput) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return o.ToTriggerThresholdPtrOutputWithContext(context.Background())
}

func (o TriggerThresholdOutput) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TriggerThreshold) *TriggerThreshold {
		return &v
	}).(TriggerThresholdPtrOutput)
}

// The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.
func (o TriggerThresholdOutput) ExceededLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TriggerThreshold) *int { return v.ExceededLimit }).(pulumi.IntPtrOutput)
}

// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
func (o TriggerThresholdOutput) Op() pulumi.StringOutput {
	return o.ApplyT(func(v TriggerThreshold) string { return v.Op }).(pulumi.StringOutput)
}

// The value to be used with the operator.
func (o TriggerThresholdOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v TriggerThreshold) float64 { return v.Value }).(pulumi.Float64Output)
}

type TriggerThresholdPtrOutput struct{ *pulumi.OutputState }

func (TriggerThresholdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TriggerThreshold)(nil)).Elem()
}

func (o TriggerThresholdPtrOutput) ToTriggerThresholdPtrOutput() TriggerThresholdPtrOutput {
	return o
}

func (o TriggerThresholdPtrOutput) ToTriggerThresholdPtrOutputWithContext(ctx context.Context) TriggerThresholdPtrOutput {
	return o
}

func (o TriggerThresholdPtrOutput) Elem() TriggerThresholdOutput {
	return o.ApplyT(func(v *TriggerThreshold) TriggerThreshold {
		if v != nil {
			return *v
		}
		var ret TriggerThreshold
		return ret
	}).(TriggerThresholdOutput)
}

// The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.
func (o TriggerThresholdPtrOutput) ExceededLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TriggerThreshold) *int {
		if v == nil {
			return nil
		}
		return v.ExceededLimit
	}).(pulumi.IntPtrOutput)
}

// The operator to apply, allowed threshold operators are `>`, `>=`, `<`, and `<=`.
func (o TriggerThresholdPtrOutput) Op() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TriggerThreshold) *string {
		if v == nil {
			return nil
		}
		return &v.Op
	}).(pulumi.StringPtrOutput)
}

// The value to be used with the operator.
func (o TriggerThresholdPtrOutput) Value() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TriggerThreshold) *float64 {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyPermissionsInput)(nil)).Elem(), ApiKeyPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyPermissionsPtrInput)(nil)).Elem(), ApiKeyPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientInput)(nil)).Elem(), BurnAlertRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientArrayInput)(nil)).Elem(), BurnAlertRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientNotificationDetailsInput)(nil)).Elem(), BurnAlertRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BurnAlertRecipientNotificationDetailsPtrInput)(nil)).Elem(), BurnAlertRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataApiKeyAccessInput)(nil)).Elem(), GetAuthMetadataApiKeyAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataApiKeyAccessPtrInput)(nil)).Elem(), GetAuthMetadataApiKeyAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataEnvironmentInput)(nil)).Elem(), GetAuthMetadataEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataEnvironmentPtrInput)(nil)).Elem(), GetAuthMetadataEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataTeamInput)(nil)).Elem(), GetAuthMetadataTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthMetadataTeamPtrInput)(nil)).Elem(), GetAuthMetadataTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDetailFilterInput)(nil)).Elem(), GetDatasetsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatasetsDetailFilterPtrInput)(nil)).Elem(), GetDatasetsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsDetailFilterInput)(nil)).Elem(), GetEnvironmentsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEnvironmentsDetailFilterPtrInput)(nil)).Elem(), GetEnvironmentsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationInput)(nil)).Elem(), GetQuerySpecificationCalculationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationCalculationArrayInput)(nil)).Elem(), GetQuerySpecificationCalculationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterInput)(nil)).Elem(), GetQuerySpecificationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationFilterArrayInput)(nil)).Elem(), GetQuerySpecificationFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingInput)(nil)).Elem(), GetQuerySpecificationHavingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationHavingArrayInput)(nil)).Elem(), GetQuerySpecificationHavingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderInput)(nil)).Elem(), GetQuerySpecificationOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetQuerySpecificationOrderArrayInput)(nil)).Elem(), GetQuerySpecificationOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSLOsDetailFilterInput)(nil)).Elem(), GetSLOsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSLOsDetailFilterPtrInput)(nil)).Elem(), GetSLOsDetailFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEvaluationScheduleInput)(nil)).Elem(), TriggerEvaluationScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerEvaluationSchedulePtrInput)(nil)).Elem(), TriggerEvaluationScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientInput)(nil)).Elem(), TriggerRecipientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientArrayInput)(nil)).Elem(), TriggerRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientNotificationDetailsInput)(nil)).Elem(), TriggerRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerRecipientNotificationDetailsPtrInput)(nil)).Elem(), TriggerRecipientNotificationDetailsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerThresholdInput)(nil)).Elem(), TriggerThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerThresholdPtrInput)(nil)).Elem(), TriggerThresholdArgs{})
	pulumi.RegisterOutputType(ApiKeyPermissionsOutput{})
	pulumi.RegisterOutputType(ApiKeyPermissionsPtrOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientArrayOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientNotificationDetailsOutput{})
	pulumi.RegisterOutputType(BurnAlertRecipientNotificationDetailsPtrOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataApiKeyAccessOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataApiKeyAccessPtrOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataEnvironmentOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataEnvironmentPtrOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataTeamOutput{})
	pulumi.RegisterOutputType(GetAuthMetadataTeamPtrOutput{})
	pulumi.RegisterOutputType(GetDatasetsDetailFilterOutput{})
	pulumi.RegisterOutputType(GetDatasetsDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsDetailFilterOutput{})
	pulumi.RegisterOutputType(GetEnvironmentsDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationCalculationArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationFilterArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationHavingArrayOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderOutput{})
	pulumi.RegisterOutputType(GetQuerySpecificationOrderArrayOutput{})
	pulumi.RegisterOutputType(GetSLOsDetailFilterOutput{})
	pulumi.RegisterOutputType(GetSLOsDetailFilterPtrOutput{})
	pulumi.RegisterOutputType(TriggerEvaluationScheduleOutput{})
	pulumi.RegisterOutputType(TriggerEvaluationSchedulePtrOutput{})
	pulumi.RegisterOutputType(TriggerRecipientOutput{})
	pulumi.RegisterOutputType(TriggerRecipientArrayOutput{})
	pulumi.RegisterOutputType(TriggerRecipientNotificationDetailsOutput{})
	pulumi.RegisterOutputType(TriggerRecipientNotificationDetailsPtrOutput{})
	pulumi.RegisterOutputType(TriggerThresholdOutput{})
	pulumi.RegisterOutputType(TriggerThresholdPtrOutput{})
}
