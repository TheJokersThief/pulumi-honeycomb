// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Resource: Trigger
//
// Creates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).
//
// ## Example Usage
//
// ### Basic Example
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			dataset := cfg.Require("dataset")
//			exampleGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, &honeycomb.GetQuerySpecificationArgs{
//				Calculations: []honeycomb.GetQuerySpecificationCalculation{
//					{
//						Op:     "AVG",
//						Column: pulumi.StringRef("duration_ms"),
//					},
//				},
//				Filters: []honeycomb.GetQuerySpecificationFilter{
//					{
//						Column: "trace.parent_id",
//						Op:     "does-not-exist",
//					},
//				},
//				TimeRange: pulumi.IntRef(1800),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = honeycomb.NewTrigger(ctx, "exampleTrigger", &honeycomb.TriggerArgs{
//				Description: pulumi.String("Average duration of all requests for the last 10 minutes."),
//				QueryJson:   pulumi.String(exampleGetQuerySpecification.Json),
//				Dataset:     pulumi.String(dataset),
//				Frequency:   pulumi.Int(600),
//				AlertType:   pulumi.String("on_change"),
//				Threshold: &honeycomb.TriggerThresholdArgs{
//					Op:    pulumi.String(">"),
//					Value: pulumi.Float64(1000),
//				},
//				Recipients: honeycomb.TriggerRecipientArray{
//					&honeycomb.TriggerRecipientArgs{
//						Type:   pulumi.String("email"),
//						Target: pulumi.String("hello@example.com"),
//					},
//					&honeycomb.TriggerRecipientArgs{
//						Type:   pulumi.String("marker"),
//						Target: pulumi.String("Trigger - requests are slow"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Triggers can be imported using a combination of the dataset name and their ID, e.g.
//
// ```sh
// $ pulumi import honeycomb:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G
// ```
// You can find the ID in the URL bar when visiting the trigger from the UI.
type Trigger struct {
	pulumi.CustomResourceState

	// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
	AlertType pulumi.StringOutput `pulumi:"alertType"`
	// The dataset this trigger is associated with.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// Description of the trigger.
	Description pulumi.StringOutput `pulumi:"description"`
	// The state of the trigger. If true, the trigger will not be run. Defaults to false.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// A configuration block (described below) that determines when the trigger is run.
	// When the time is within the scheduled window the trigger will be run at the specified frequency.
	// Outside of the window, the trigger will not be run.
	// If no schedule is specified, the trigger will be run at the specified frequency at all times.
	EvaluationSchedule TriggerEvaluationSchedulePtrOutput `pulumi:"evaluationSchedule"`
	// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
	// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
	// Defaults to 900 (15 minutes).
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// Name of the trigger.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
	QueryId pulumi.StringPtrOutput `pulumi:"queryId"`
	// The Query Specfication JSON for the Trigger to execute.
	// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
	// Conflicts with `queryId`.
	QueryJson pulumi.StringPtrOutput `pulumi:"queryJson"`
	// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
	//
	// One of `queryId` or `queryJson` are required.
	//
	// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
	// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
	// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
	// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
	Recipients TriggerRecipientArrayOutput `pulumi:"recipients"`
	// A configuration block (described below) describing the threshold of the trigger.
	Threshold TriggerThresholdPtrOutput `pulumi:"threshold"`
}

// NewTrigger registers a new resource with the given unique name, arguments, and options.
func NewTrigger(ctx *pulumi.Context,
	name string, args *TriggerArgs, opts ...pulumi.ResourceOption) (*Trigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Trigger
	err := ctx.RegisterResource("honeycomb:index/trigger:Trigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrigger gets an existing Trigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TriggerState, opts ...pulumi.ResourceOption) (*Trigger, error) {
	var resource Trigger
	err := ctx.ReadResource("honeycomb:index/trigger:Trigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Trigger resources.
type triggerState struct {
	// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
	AlertType *string `pulumi:"alertType"`
	// The dataset this trigger is associated with.
	Dataset *string `pulumi:"dataset"`
	// Description of the trigger.
	Description *string `pulumi:"description"`
	// The state of the trigger. If true, the trigger will not be run. Defaults to false.
	Disabled *bool `pulumi:"disabled"`
	// A configuration block (described below) that determines when the trigger is run.
	// When the time is within the scheduled window the trigger will be run at the specified frequency.
	// Outside of the window, the trigger will not be run.
	// If no schedule is specified, the trigger will be run at the specified frequency at all times.
	EvaluationSchedule *TriggerEvaluationSchedule `pulumi:"evaluationSchedule"`
	// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
	// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
	// Defaults to 900 (15 minutes).
	Frequency *int `pulumi:"frequency"`
	// Name of the trigger.
	Name *string `pulumi:"name"`
	// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
	QueryId *string `pulumi:"queryId"`
	// The Query Specfication JSON for the Trigger to execute.
	// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
	// Conflicts with `queryId`.
	QueryJson *string `pulumi:"queryJson"`
	// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
	//
	// One of `queryId` or `queryJson` are required.
	//
	// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
	// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
	// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
	// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
	Recipients []TriggerRecipient `pulumi:"recipients"`
	// A configuration block (described below) describing the threshold of the trigger.
	Threshold *TriggerThreshold `pulumi:"threshold"`
}

type TriggerState struct {
	// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
	AlertType pulumi.StringPtrInput
	// The dataset this trigger is associated with.
	Dataset pulumi.StringPtrInput
	// Description of the trigger.
	Description pulumi.StringPtrInput
	// The state of the trigger. If true, the trigger will not be run. Defaults to false.
	Disabled pulumi.BoolPtrInput
	// A configuration block (described below) that determines when the trigger is run.
	// When the time is within the scheduled window the trigger will be run at the specified frequency.
	// Outside of the window, the trigger will not be run.
	// If no schedule is specified, the trigger will be run at the specified frequency at all times.
	EvaluationSchedule TriggerEvaluationSchedulePtrInput
	// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
	// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
	// Defaults to 900 (15 minutes).
	Frequency pulumi.IntPtrInput
	// Name of the trigger.
	Name pulumi.StringPtrInput
	// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
	QueryId pulumi.StringPtrInput
	// The Query Specfication JSON for the Trigger to execute.
	// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
	// Conflicts with `queryId`.
	QueryJson pulumi.StringPtrInput
	// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
	//
	// One of `queryId` or `queryJson` are required.
	//
	// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
	// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
	// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
	// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
	Recipients TriggerRecipientArrayInput
	// A configuration block (described below) describing the threshold of the trigger.
	Threshold TriggerThresholdPtrInput
}

func (TriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerState)(nil)).Elem()
}

type triggerArgs struct {
	// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
	AlertType *string `pulumi:"alertType"`
	// The dataset this trigger is associated with.
	Dataset string `pulumi:"dataset"`
	// Description of the trigger.
	Description *string `pulumi:"description"`
	// The state of the trigger. If true, the trigger will not be run. Defaults to false.
	Disabled *bool `pulumi:"disabled"`
	// A configuration block (described below) that determines when the trigger is run.
	// When the time is within the scheduled window the trigger will be run at the specified frequency.
	// Outside of the window, the trigger will not be run.
	// If no schedule is specified, the trigger will be run at the specified frequency at all times.
	EvaluationSchedule *TriggerEvaluationSchedule `pulumi:"evaluationSchedule"`
	// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
	// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
	// Defaults to 900 (15 minutes).
	Frequency *int `pulumi:"frequency"`
	// Name of the trigger.
	Name *string `pulumi:"name"`
	// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
	QueryId *string `pulumi:"queryId"`
	// The Query Specfication JSON for the Trigger to execute.
	// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
	// Conflicts with `queryId`.
	QueryJson *string `pulumi:"queryJson"`
	// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
	//
	// One of `queryId` or `queryJson` are required.
	//
	// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
	// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
	// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
	// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
	Recipients []TriggerRecipient `pulumi:"recipients"`
	// A configuration block (described below) describing the threshold of the trigger.
	Threshold *TriggerThreshold `pulumi:"threshold"`
}

// The set of arguments for constructing a Trigger resource.
type TriggerArgs struct {
	// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
	AlertType pulumi.StringPtrInput
	// The dataset this trigger is associated with.
	Dataset pulumi.StringInput
	// Description of the trigger.
	Description pulumi.StringPtrInput
	// The state of the trigger. If true, the trigger will not be run. Defaults to false.
	Disabled pulumi.BoolPtrInput
	// A configuration block (described below) that determines when the trigger is run.
	// When the time is within the scheduled window the trigger will be run at the specified frequency.
	// Outside of the window, the trigger will not be run.
	// If no schedule is specified, the trigger will be run at the specified frequency at all times.
	EvaluationSchedule TriggerEvaluationSchedulePtrInput
	// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
	// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
	// Defaults to 900 (15 minutes).
	Frequency pulumi.IntPtrInput
	// Name of the trigger.
	Name pulumi.StringPtrInput
	// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
	QueryId pulumi.StringPtrInput
	// The Query Specfication JSON for the Trigger to execute.
	// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
	// Conflicts with `queryId`.
	QueryJson pulumi.StringPtrInput
	// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
	//
	// One of `queryId` or `queryJson` are required.
	//
	// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
	// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
	// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
	// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
	Recipients TriggerRecipientArrayInput
	// A configuration block (described below) describing the threshold of the trigger.
	Threshold TriggerThresholdPtrInput
}

func (TriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*triggerArgs)(nil)).Elem()
}

type TriggerInput interface {
	pulumi.Input

	ToTriggerOutput() TriggerOutput
	ToTriggerOutputWithContext(ctx context.Context) TriggerOutput
}

func (*Trigger) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (i *Trigger) ToTriggerOutput() TriggerOutput {
	return i.ToTriggerOutputWithContext(context.Background())
}

func (i *Trigger) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerOutput)
}

// TriggerArrayInput is an input type that accepts TriggerArray and TriggerArrayOutput values.
// You can construct a concrete instance of `TriggerArrayInput` via:
//
//	TriggerArray{ TriggerArgs{...} }
type TriggerArrayInput interface {
	pulumi.Input

	ToTriggerArrayOutput() TriggerArrayOutput
	ToTriggerArrayOutputWithContext(context.Context) TriggerArrayOutput
}

type TriggerArray []TriggerInput

func (TriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (i TriggerArray) ToTriggerArrayOutput() TriggerArrayOutput {
	return i.ToTriggerArrayOutputWithContext(context.Background())
}

func (i TriggerArray) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerArrayOutput)
}

// TriggerMapInput is an input type that accepts TriggerMap and TriggerMapOutput values.
// You can construct a concrete instance of `TriggerMapInput` via:
//
//	TriggerMap{ "key": TriggerArgs{...} }
type TriggerMapInput interface {
	pulumi.Input

	ToTriggerMapOutput() TriggerMapOutput
	ToTriggerMapOutputWithContext(context.Context) TriggerMapOutput
}

type TriggerMap map[string]TriggerInput

func (TriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (i TriggerMap) ToTriggerMapOutput() TriggerMapOutput {
	return i.ToTriggerMapOutputWithContext(context.Background())
}

func (i TriggerMap) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TriggerMapOutput)
}

type TriggerOutput struct{ *pulumi.OutputState }

func (TriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Trigger)(nil)).Elem()
}

func (o TriggerOutput) ToTriggerOutput() TriggerOutput {
	return o
}

func (o TriggerOutput) ToTriggerOutputWithContext(ctx context.Context) TriggerOutput {
	return o
}

// The frequency for the alert to trigger. (`onChange` is the default behavior, `onTrue` can also be selected)
func (o TriggerOutput) AlertType() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.AlertType }).(pulumi.StringOutput)
}

// The dataset this trigger is associated with.
func (o TriggerOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// Description of the trigger.
func (o TriggerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The state of the trigger. If true, the trigger will not be run. Defaults to false.
func (o TriggerOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Trigger) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// A configuration block (described below) that determines when the trigger is run.
// When the time is within the scheduled window the trigger will be run at the specified frequency.
// Outside of the window, the trigger will not be run.
// If no schedule is specified, the trigger will be run at the specified frequency at all times.
func (o TriggerOutput) EvaluationSchedule() TriggerEvaluationSchedulePtrOutput {
	return o.ApplyT(func(v *Trigger) TriggerEvaluationSchedulePtrOutput { return v.EvaluationSchedule }).(TriggerEvaluationSchedulePtrOutput)
}

// The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
// This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
// Defaults to 900 (15 minutes).
func (o TriggerOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *Trigger) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// Name of the trigger.
func (o TriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Query that the Trigger will execute. Conflicts with `queryJson`.
func (o TriggerOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.QueryId }).(pulumi.StringPtrOutput)
}

// The Query Specfication JSON for the Trigger to execute.
// Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
// Conflicts with `queryId`.
func (o TriggerOutput) QueryJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Trigger) pulumi.StringPtrOutput { return v.QueryJson }).(pulumi.StringPtrOutput)
}

// Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
//
// One of `queryId` or `queryJson` are required.
//
// > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filterCombination` and `breakdowns` fields.
// The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
// See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
// For example: if using the default query `timeRange` of `7200` the lowest `frequency` for a trigger is `1800`.
func (o TriggerOutput) Recipients() TriggerRecipientArrayOutput {
	return o.ApplyT(func(v *Trigger) TriggerRecipientArrayOutput { return v.Recipients }).(TriggerRecipientArrayOutput)
}

// A configuration block (described below) describing the threshold of the trigger.
func (o TriggerOutput) Threshold() TriggerThresholdPtrOutput {
	return o.ApplyT(func(v *Trigger) TriggerThresholdPtrOutput { return v.Threshold }).(TriggerThresholdPtrOutput)
}

type TriggerArrayOutput struct{ *pulumi.OutputState }

func (TriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Trigger)(nil)).Elem()
}

func (o TriggerArrayOutput) ToTriggerArrayOutput() TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) ToTriggerArrayOutputWithContext(ctx context.Context) TriggerArrayOutput {
	return o
}

func (o TriggerArrayOutput) Index(i pulumi.IntInput) TriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].([]*Trigger)[vs[1].(int)]
	}).(TriggerOutput)
}

type TriggerMapOutput struct{ *pulumi.OutputState }

func (TriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Trigger)(nil)).Elem()
}

func (o TriggerMapOutput) ToTriggerMapOutput() TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) ToTriggerMapOutputWithContext(ctx context.Context) TriggerMapOutput {
	return o
}

func (o TriggerMapOutput) MapIndex(k pulumi.StringInput) TriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Trigger {
		return vs[0].(map[string]*Trigger)[vs[1].(string)]
	}).(TriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerInput)(nil)).Elem(), &Trigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerArrayInput)(nil)).Elem(), TriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TriggerMapInput)(nil)).Elem(), TriggerMap{})
	pulumi.RegisterOutputType(TriggerOutput{})
	pulumi.RegisterOutputType(TriggerArrayOutput{})
	pulumi.RegisterOutputType(TriggerMapOutput{})
}
