// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Resource: Query
//
// Creates a Query scoped to a Dataset or Environment.
//
// Queries can be used by Triggers and Boards, or be executed via the [Query Data API](https://docs.honeycomb.io/api/query-results/).
//
// > **Note** Queries are immutable and can not be deleted -- only created or read.
//
//	Any changes will result in a new query object being created.
//
// ## Import
//
// Querys can be imported using a combination of the dataset name and their ID, e.g.
//
// ```sh
// $ pulumi import honeycomb:index/query:Query my_query my-dataset/bj8BwOa1uRz
// ```
type Query struct {
	pulumi.CustomResourceState

	// The dataset this query is scoped to.
	// Use `__all__` for Environment-wide queries.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
	// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
	QueryJson pulumi.StringOutput `pulumi:"queryJson"`
}

// NewQuery registers a new resource with the given unique name, arguments, and options.
func NewQuery(ctx *pulumi.Context,
	name string, args *QueryArgs, opts ...pulumi.ResourceOption) (*Query, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	if args.QueryJson == nil {
		return nil, errors.New("invalid value for required argument 'QueryJson'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Query
	err := ctx.RegisterResource("honeycomb:index/query:Query", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuery gets an existing Query resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryState, opts ...pulumi.ResourceOption) (*Query, error) {
	var resource Query
	err := ctx.ReadResource("honeycomb:index/query:Query", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Query resources.
type queryState struct {
	// The dataset this query is scoped to.
	// Use `__all__` for Environment-wide queries.
	Dataset *string `pulumi:"dataset"`
	// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
	// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
	QueryJson *string `pulumi:"queryJson"`
}

type QueryState struct {
	// The dataset this query is scoped to.
	// Use `__all__` for Environment-wide queries.
	Dataset pulumi.StringPtrInput
	// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
	// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
	QueryJson pulumi.StringPtrInput
}

func (QueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryState)(nil)).Elem()
}

type queryArgs struct {
	// The dataset this query is scoped to.
	// Use `__all__` for Environment-wide queries.
	Dataset string `pulumi:"dataset"`
	// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
	// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
	QueryJson string `pulumi:"queryJson"`
}

// The set of arguments for constructing a Query resource.
type QueryArgs struct {
	// The dataset this query is scoped to.
	// Use `__all__` for Environment-wide queries.
	Dataset pulumi.StringInput
	// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
	// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
	QueryJson pulumi.StringInput
}

func (QueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryArgs)(nil)).Elem()
}

type QueryInput interface {
	pulumi.Input

	ToQueryOutput() QueryOutput
	ToQueryOutputWithContext(ctx context.Context) QueryOutput
}

func (*Query) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (i *Query) ToQueryOutput() QueryOutput {
	return i.ToQueryOutputWithContext(context.Background())
}

func (i *Query) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryOutput)
}

// QueryArrayInput is an input type that accepts QueryArray and QueryArrayOutput values.
// You can construct a concrete instance of `QueryArrayInput` via:
//
//	QueryArray{ QueryArgs{...} }
type QueryArrayInput interface {
	pulumi.Input

	ToQueryArrayOutput() QueryArrayOutput
	ToQueryArrayOutputWithContext(context.Context) QueryArrayOutput
}

type QueryArray []QueryInput

func (QueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (i QueryArray) ToQueryArrayOutput() QueryArrayOutput {
	return i.ToQueryArrayOutputWithContext(context.Background())
}

func (i QueryArray) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryArrayOutput)
}

// QueryMapInput is an input type that accepts QueryMap and QueryMapOutput values.
// You can construct a concrete instance of `QueryMapInput` via:
//
//	QueryMap{ "key": QueryArgs{...} }
type QueryMapInput interface {
	pulumi.Input

	ToQueryMapOutput() QueryMapOutput
	ToQueryMapOutputWithContext(context.Context) QueryMapOutput
}

type QueryMap map[string]QueryInput

func (QueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (i QueryMap) ToQueryMapOutput() QueryMapOutput {
	return i.ToQueryMapOutputWithContext(context.Background())
}

func (i QueryMap) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryMapOutput)
}

type QueryOutput struct{ *pulumi.OutputState }

func (QueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (o QueryOutput) ToQueryOutput() QueryOutput {
	return o
}

func (o QueryOutput) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return o
}

// The dataset this query is scoped to.
// Use `__all__` for Environment-wide queries.
func (o QueryOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).
// While the JSON can be constructed manually, using the `GetQuerySpecification` data source provides deeper validation.
func (o QueryOutput) QueryJson() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.QueryJson }).(pulumi.StringOutput)
}

type QueryArrayOutput struct{ *pulumi.OutputState }

func (QueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (o QueryArrayOutput) ToQueryArrayOutput() QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) Index(i pulumi.IntInput) QueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Query {
		return vs[0].([]*Query)[vs[1].(int)]
	}).(QueryOutput)
}

type QueryMapOutput struct{ *pulumi.OutputState }

func (QueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (o QueryMapOutput) ToQueryMapOutput() QueryMapOutput {
	return o
}

func (o QueryMapOutput) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return o
}

func (o QueryMapOutput) MapIndex(k pulumi.StringInput) QueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Query {
		return vs[0].(map[string]*Query)[vs[1].(string)]
	}).(QueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryInput)(nil)).Elem(), &Query{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryArrayInput)(nil)).Elem(), QueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryMapInput)(nil)).Elem(), QueryMap{})
	pulumi.RegisterOutputType(QueryOutput{})
	pulumi.RegisterOutputType(QueryArrayOutput{})
	pulumi.RegisterOutputType(QueryMapOutput{})
}
