// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Resource: MSTeamsRecipient
//
// `MSTeamsRecipient` allows you to define and manage an MSTeams recipient that can be used by Triggers or BurnAlerts notifications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := honeycomb.NewMSTeamsRecipient(ctx, "prod", &honeycomb.MSTeamsRecipientArgs{
//				Url: pulumi.String("https://mycorp.webhook.office.com/webhookb2/abcd12345"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MSTeams Recipients can be imported by their ID, e.g.
//
// ```sh
// $ pulumi import honeycomb:index/mSTeamsRecipient:MSTeamsRecipient my_recipient nx2zsefB1cX
// ```
type MSTeamsRecipient struct {
	pulumi.CustomResourceState

	// The name of the MS Teams Integration to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Incoming Webhook URL to send the notification to.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewMSTeamsRecipient registers a new resource with the given unique name, arguments, and options.
func NewMSTeamsRecipient(ctx *pulumi.Context,
	name string, args *MSTeamsRecipientArgs, opts ...pulumi.ResourceOption) (*MSTeamsRecipient, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MSTeamsRecipient
	err := ctx.RegisterResource("honeycomb:index/mSTeamsRecipient:MSTeamsRecipient", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMSTeamsRecipient gets an existing MSTeamsRecipient resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMSTeamsRecipient(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MSTeamsRecipientState, opts ...pulumi.ResourceOption) (*MSTeamsRecipient, error) {
	var resource MSTeamsRecipient
	err := ctx.ReadResource("honeycomb:index/mSTeamsRecipient:MSTeamsRecipient", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MSTeamsRecipient resources.
type msteamsRecipientState struct {
	// The name of the MS Teams Integration to create.
	Name *string `pulumi:"name"`
	// The Incoming Webhook URL to send the notification to.
	Url *string `pulumi:"url"`
}

type MSTeamsRecipientState struct {
	// The name of the MS Teams Integration to create.
	Name pulumi.StringPtrInput
	// The Incoming Webhook URL to send the notification to.
	Url pulumi.StringPtrInput
}

func (MSTeamsRecipientState) ElementType() reflect.Type {
	return reflect.TypeOf((*msteamsRecipientState)(nil)).Elem()
}

type msteamsRecipientArgs struct {
	// The name of the MS Teams Integration to create.
	Name *string `pulumi:"name"`
	// The Incoming Webhook URL to send the notification to.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a MSTeamsRecipient resource.
type MSTeamsRecipientArgs struct {
	// The name of the MS Teams Integration to create.
	Name pulumi.StringPtrInput
	// The Incoming Webhook URL to send the notification to.
	Url pulumi.StringInput
}

func (MSTeamsRecipientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*msteamsRecipientArgs)(nil)).Elem()
}

type MSTeamsRecipientInput interface {
	pulumi.Input

	ToMSTeamsRecipientOutput() MSTeamsRecipientOutput
	ToMSTeamsRecipientOutputWithContext(ctx context.Context) MSTeamsRecipientOutput
}

func (*MSTeamsRecipient) ElementType() reflect.Type {
	return reflect.TypeOf((**MSTeamsRecipient)(nil)).Elem()
}

func (i *MSTeamsRecipient) ToMSTeamsRecipientOutput() MSTeamsRecipientOutput {
	return i.ToMSTeamsRecipientOutputWithContext(context.Background())
}

func (i *MSTeamsRecipient) ToMSTeamsRecipientOutputWithContext(ctx context.Context) MSTeamsRecipientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MSTeamsRecipientOutput)
}

// MSTeamsRecipientArrayInput is an input type that accepts MSTeamsRecipientArray and MSTeamsRecipientArrayOutput values.
// You can construct a concrete instance of `MSTeamsRecipientArrayInput` via:
//
//	MSTeamsRecipientArray{ MSTeamsRecipientArgs{...} }
type MSTeamsRecipientArrayInput interface {
	pulumi.Input

	ToMSTeamsRecipientArrayOutput() MSTeamsRecipientArrayOutput
	ToMSTeamsRecipientArrayOutputWithContext(context.Context) MSTeamsRecipientArrayOutput
}

type MSTeamsRecipientArray []MSTeamsRecipientInput

func (MSTeamsRecipientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MSTeamsRecipient)(nil)).Elem()
}

func (i MSTeamsRecipientArray) ToMSTeamsRecipientArrayOutput() MSTeamsRecipientArrayOutput {
	return i.ToMSTeamsRecipientArrayOutputWithContext(context.Background())
}

func (i MSTeamsRecipientArray) ToMSTeamsRecipientArrayOutputWithContext(ctx context.Context) MSTeamsRecipientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MSTeamsRecipientArrayOutput)
}

// MSTeamsRecipientMapInput is an input type that accepts MSTeamsRecipientMap and MSTeamsRecipientMapOutput values.
// You can construct a concrete instance of `MSTeamsRecipientMapInput` via:
//
//	MSTeamsRecipientMap{ "key": MSTeamsRecipientArgs{...} }
type MSTeamsRecipientMapInput interface {
	pulumi.Input

	ToMSTeamsRecipientMapOutput() MSTeamsRecipientMapOutput
	ToMSTeamsRecipientMapOutputWithContext(context.Context) MSTeamsRecipientMapOutput
}

type MSTeamsRecipientMap map[string]MSTeamsRecipientInput

func (MSTeamsRecipientMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MSTeamsRecipient)(nil)).Elem()
}

func (i MSTeamsRecipientMap) ToMSTeamsRecipientMapOutput() MSTeamsRecipientMapOutput {
	return i.ToMSTeamsRecipientMapOutputWithContext(context.Background())
}

func (i MSTeamsRecipientMap) ToMSTeamsRecipientMapOutputWithContext(ctx context.Context) MSTeamsRecipientMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MSTeamsRecipientMapOutput)
}

type MSTeamsRecipientOutput struct{ *pulumi.OutputState }

func (MSTeamsRecipientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MSTeamsRecipient)(nil)).Elem()
}

func (o MSTeamsRecipientOutput) ToMSTeamsRecipientOutput() MSTeamsRecipientOutput {
	return o
}

func (o MSTeamsRecipientOutput) ToMSTeamsRecipientOutputWithContext(ctx context.Context) MSTeamsRecipientOutput {
	return o
}

// The name of the MS Teams Integration to create.
func (o MSTeamsRecipientOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MSTeamsRecipient) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Incoming Webhook URL to send the notification to.
func (o MSTeamsRecipientOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *MSTeamsRecipient) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type MSTeamsRecipientArrayOutput struct{ *pulumi.OutputState }

func (MSTeamsRecipientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MSTeamsRecipient)(nil)).Elem()
}

func (o MSTeamsRecipientArrayOutput) ToMSTeamsRecipientArrayOutput() MSTeamsRecipientArrayOutput {
	return o
}

func (o MSTeamsRecipientArrayOutput) ToMSTeamsRecipientArrayOutputWithContext(ctx context.Context) MSTeamsRecipientArrayOutput {
	return o
}

func (o MSTeamsRecipientArrayOutput) Index(i pulumi.IntInput) MSTeamsRecipientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MSTeamsRecipient {
		return vs[0].([]*MSTeamsRecipient)[vs[1].(int)]
	}).(MSTeamsRecipientOutput)
}

type MSTeamsRecipientMapOutput struct{ *pulumi.OutputState }

func (MSTeamsRecipientMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MSTeamsRecipient)(nil)).Elem()
}

func (o MSTeamsRecipientMapOutput) ToMSTeamsRecipientMapOutput() MSTeamsRecipientMapOutput {
	return o
}

func (o MSTeamsRecipientMapOutput) ToMSTeamsRecipientMapOutputWithContext(ctx context.Context) MSTeamsRecipientMapOutput {
	return o
}

func (o MSTeamsRecipientMapOutput) MapIndex(k pulumi.StringInput) MSTeamsRecipientOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MSTeamsRecipient {
		return vs[0].(map[string]*MSTeamsRecipient)[vs[1].(string)]
	}).(MSTeamsRecipientOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MSTeamsRecipientInput)(nil)).Elem(), &MSTeamsRecipient{})
	pulumi.RegisterInputType(reflect.TypeOf((*MSTeamsRecipientArrayInput)(nil)).Elem(), MSTeamsRecipientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MSTeamsRecipientMapInput)(nil)).Elem(), MSTeamsRecipientMap{})
	pulumi.RegisterOutputType(MSTeamsRecipientOutput{})
	pulumi.RegisterOutputType(MSTeamsRecipientArrayOutput{})
	pulumi.RegisterOutputType(MSTeamsRecipientMapOutput{})
}
