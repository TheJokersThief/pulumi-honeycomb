// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "honeycomb:index/board:Board":
		r = &Board{}
	case "honeycomb:index/column:Column":
		r = &Column{}
	case "honeycomb:index/dataset:Dataset":
		r = &Dataset{}
	case "honeycomb:index/datasetDefinition:DatasetDefinition":
		r = &DatasetDefinition{}
	case "honeycomb:index/derivedColumn:DerivedColumn":
		r = &DerivedColumn{}
	case "honeycomb:index/emailRecipient:EmailRecipient":
		r = &EmailRecipient{}
	case "honeycomb:index/mSTeamsRecipient:MSTeamsRecipient":
		r = &MSTeamsRecipient{}
	case "honeycomb:index/marker:Marker":
		r = &Marker{}
	case "honeycomb:index/markerSetting:MarkerSetting":
		r = &MarkerSetting{}
	case "honeycomb:index/pagerDutyRecipient:PagerDutyRecipient":
		r = &PagerDutyRecipient{}
	case "honeycomb:index/query:Query":
		r = &Query{}
	case "honeycomb:index/queryAnnotation:QueryAnnotation":
		r = &QueryAnnotation{}
	case "honeycomb:index/sLO:SLO":
		r = &SLO{}
	case "honeycomb:index/slackRecipient:SlackRecipient":
		r = &SlackRecipient{}
	case "honeycomb:index/webhookRecipient:WebhookRecipient":
		r = &WebhookRecipient{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:honeycomb" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/board",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/column",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/dataset",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/datasetDefinition",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/derivedColumn",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/emailRecipient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/mSTeamsRecipient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/marker",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/markerSetting",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/pagerDutyRecipient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/query",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/queryAnnotation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/sLO",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/slackRecipient",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"honeycomb",
		"index/webhookRecipient",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"honeycomb",
		&pkg{version},
	)
}
