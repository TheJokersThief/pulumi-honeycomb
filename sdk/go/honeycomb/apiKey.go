// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Resource: ApiKey
//
// Creates a Honeycomb API Key.
// For more information about API Keys, check out [Best Practices for API Keys](https://docs.honeycomb.io/get-started/best-practices/api-keys/).
//
// > **NOTE** This resource requires the provider be configured with a Management Key with `api-keys:write` in the configured scopes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := honeycomb.NewApiKey(ctx, "prodIngest", &honeycomb.ApiKeyArgs{
//				Type:          pulumi.String("ingest"),
//				EnvironmentId: pulumi.Any(_var.Environment_id),
//				Permissions: &honeycomb.ApiKeyPermissionsArgs{
//					CreateDatasets: pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("ingestKey", pulumi.Sprintf("%v%v", honeycomb_api_key.Prod_ingest.Id, honeycomb_api_key.Prod_ingest.Secret))
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Keys cannot be imported.
type ApiKey struct {
	pulumi.CustomResourceState

	// Whether the API key is disabled. Defaults to `false`.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// The Environment ID the API key is scoped to.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	// The name of the API key.
	Name pulumi.StringOutput `pulumi:"name"`
	// A configuration block (described below) setting what actions the API key can perform.
	Permissions ApiKeyPermissionsPtrOutput `pulumi:"permissions"`
	// The secret portion of the API Key.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The type of API key. Currently only `ingest` is supported.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApiKey registers a new resource with the given unique name, arguments, and options.
func NewApiKey(ctx *pulumi.Context,
	name string, args *ApiKeyArgs, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKey
	err := ctx.RegisterResource("honeycomb:index/apiKey:ApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKey gets an existing ApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyState, opts ...pulumi.ResourceOption) (*ApiKey, error) {
	var resource ApiKey
	err := ctx.ReadResource("honeycomb:index/apiKey:ApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKey resources.
type apiKeyState struct {
	// Whether the API key is disabled. Defaults to `false`.
	Disabled *bool `pulumi:"disabled"`
	// The Environment ID the API key is scoped to.
	EnvironmentId *string `pulumi:"environmentId"`
	// The name of the API key.
	Name *string `pulumi:"name"`
	// A configuration block (described below) setting what actions the API key can perform.
	Permissions *ApiKeyPermissions `pulumi:"permissions"`
	// The secret portion of the API Key.
	Secret *string `pulumi:"secret"`
	// The type of API key. Currently only `ingest` is supported.
	Type *string `pulumi:"type"`
}

type ApiKeyState struct {
	// Whether the API key is disabled. Defaults to `false`.
	Disabled pulumi.BoolPtrInput
	// The Environment ID the API key is scoped to.
	EnvironmentId pulumi.StringPtrInput
	// The name of the API key.
	Name pulumi.StringPtrInput
	// A configuration block (described below) setting what actions the API key can perform.
	Permissions ApiKeyPermissionsPtrInput
	// The secret portion of the API Key.
	Secret pulumi.StringPtrInput
	// The type of API key. Currently only `ingest` is supported.
	Type pulumi.StringPtrInput
}

func (ApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyState)(nil)).Elem()
}

type apiKeyArgs struct {
	// Whether the API key is disabled. Defaults to `false`.
	Disabled *bool `pulumi:"disabled"`
	// The Environment ID the API key is scoped to.
	EnvironmentId string `pulumi:"environmentId"`
	// The name of the API key.
	Name *string `pulumi:"name"`
	// A configuration block (described below) setting what actions the API key can perform.
	Permissions *ApiKeyPermissions `pulumi:"permissions"`
	// The type of API key. Currently only `ingest` is supported.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ApiKey resource.
type ApiKeyArgs struct {
	// Whether the API key is disabled. Defaults to `false`.
	Disabled pulumi.BoolPtrInput
	// The Environment ID the API key is scoped to.
	EnvironmentId pulumi.StringInput
	// The name of the API key.
	Name pulumi.StringPtrInput
	// A configuration block (described below) setting what actions the API key can perform.
	Permissions ApiKeyPermissionsPtrInput
	// The type of API key. Currently only `ingest` is supported.
	Type pulumi.StringInput
}

func (ApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyArgs)(nil)).Elem()
}

type ApiKeyInput interface {
	pulumi.Input

	ToApiKeyOutput() ApiKeyOutput
	ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput
}

func (*ApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (i *ApiKey) ToApiKeyOutput() ApiKeyOutput {
	return i.ToApiKeyOutputWithContext(context.Background())
}

func (i *ApiKey) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyOutput)
}

// ApiKeyArrayInput is an input type that accepts ApiKeyArray and ApiKeyArrayOutput values.
// You can construct a concrete instance of `ApiKeyArrayInput` via:
//
//	ApiKeyArray{ ApiKeyArgs{...} }
type ApiKeyArrayInput interface {
	pulumi.Input

	ToApiKeyArrayOutput() ApiKeyArrayOutput
	ToApiKeyArrayOutputWithContext(context.Context) ApiKeyArrayOutput
}

type ApiKeyArray []ApiKeyInput

func (ApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (i ApiKeyArray) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return i.ToApiKeyArrayOutputWithContext(context.Background())
}

func (i ApiKeyArray) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyArrayOutput)
}

// ApiKeyMapInput is an input type that accepts ApiKeyMap and ApiKeyMapOutput values.
// You can construct a concrete instance of `ApiKeyMapInput` via:
//
//	ApiKeyMap{ "key": ApiKeyArgs{...} }
type ApiKeyMapInput interface {
	pulumi.Input

	ToApiKeyMapOutput() ApiKeyMapOutput
	ToApiKeyMapOutputWithContext(context.Context) ApiKeyMapOutput
}

type ApiKeyMap map[string]ApiKeyInput

func (ApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (i ApiKeyMap) ToApiKeyMapOutput() ApiKeyMapOutput {
	return i.ToApiKeyMapOutputWithContext(context.Background())
}

func (i ApiKeyMap) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyMapOutput)
}

type ApiKeyOutput struct{ *pulumi.OutputState }

func (ApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKey)(nil)).Elem()
}

func (o ApiKeyOutput) ToApiKeyOutput() ApiKeyOutput {
	return o
}

func (o ApiKeyOutput) ToApiKeyOutputWithContext(ctx context.Context) ApiKeyOutput {
	return o
}

// Whether the API key is disabled. Defaults to `false`.
func (o ApiKeyOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// The Environment ID the API key is scoped to.
func (o ApiKeyOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The name of the API key.
func (o ApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A configuration block (described below) setting what actions the API key can perform.
func (o ApiKeyOutput) Permissions() ApiKeyPermissionsPtrOutput {
	return o.ApplyT(func(v *ApiKey) ApiKeyPermissionsPtrOutput { return v.Permissions }).(ApiKeyPermissionsPtrOutput)
}

// The secret portion of the API Key.
func (o ApiKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// The type of API key. Currently only `ingest` is supported.
func (o ApiKeyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKey) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ApiKeyArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKey)(nil)).Elem()
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutput() ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) ToApiKeyArrayOutputWithContext(ctx context.Context) ApiKeyArrayOutput {
	return o
}

func (o ApiKeyArrayOutput) Index(i pulumi.IntInput) ApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].([]*ApiKey)[vs[1].(int)]
	}).(ApiKeyOutput)
}

type ApiKeyMapOutput struct{ *pulumi.OutputState }

func (ApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKey)(nil)).Elem()
}

func (o ApiKeyMapOutput) ToApiKeyMapOutput() ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) ToApiKeyMapOutputWithContext(ctx context.Context) ApiKeyMapOutput {
	return o
}

func (o ApiKeyMapOutput) MapIndex(k pulumi.StringInput) ApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKey {
		return vs[0].(map[string]*ApiKey)[vs[1].(string)]
	}).(ApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyInput)(nil)).Elem(), &ApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyArrayInput)(nil)).Elem(), ApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyMapInput)(nil)).Elem(), ApiKeyMap{})
	pulumi.RegisterOutputType(ApiKeyOutput{})
	pulumi.RegisterOutputType(ApiKeyArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyMapOutput{})
}
