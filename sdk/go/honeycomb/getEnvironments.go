// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

// ## # Data Source: GetEnvironments
//
// The Environments data source retrieves the Team's environments.
//
// > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := honeycomb.GetEnvironments(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = honeycomb.GetEnvironments(ctx, &honeycomb.GetEnvironmentsArgs{
//				DetailFilter: honeycomb.GetEnvironmentsDetailFilter{
//					Name:       "name",
//					ValueRegex: pulumi.StringRef("foo_*"),
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetEnvironments(ctx *pulumi.Context, args *GetEnvironmentsArgs, opts ...pulumi.InvokeOption) (*GetEnvironmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEnvironmentsResult
	err := ctx.Invoke("honeycomb:index/getEnvironments:GetEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetEnvironments.
type GetEnvironmentsArgs struct {
	// a block to further filter results as described below. `name` must be set when providing a filter.
	DetailFilter *GetEnvironmentsDetailFilter `pulumi:"detailFilter"`
}

// A collection of values returned by GetEnvironments.
type GetEnvironmentsResult struct {
	DetailFilter *GetEnvironmentsDetailFilter `pulumi:"detailFilter"`
	Id           string                       `pulumi:"id"`
	// a list of all the Environment IDs found in the Team.
	Ids []string `pulumi:"ids"`
}

func GetEnvironmentsOutput(ctx *pulumi.Context, args GetEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) GetEnvironmentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEnvironmentsResult, error) {
			args := v.(GetEnvironmentsArgs)
			r, err := GetEnvironments(ctx, &args, opts...)
			var s GetEnvironmentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEnvironmentsResultOutput)
}

// A collection of arguments for invoking GetEnvironments.
type GetEnvironmentsOutputArgs struct {
	// a block to further filter results as described below. `name` must be set when providing a filter.
	DetailFilter GetEnvironmentsDetailFilterPtrInput `pulumi:"detailFilter"`
}

func (GetEnvironmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsArgs)(nil)).Elem()
}

// A collection of values returned by GetEnvironments.
type GetEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (GetEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEnvironmentsResult)(nil)).Elem()
}

func (o GetEnvironmentsResultOutput) ToGetEnvironmentsResultOutput() GetEnvironmentsResultOutput {
	return o
}

func (o GetEnvironmentsResultOutput) ToGetEnvironmentsResultOutputWithContext(ctx context.Context) GetEnvironmentsResultOutput {
	return o
}

func (o GetEnvironmentsResultOutput) DetailFilter() GetEnvironmentsDetailFilterPtrOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) *GetEnvironmentsDetailFilter { return v.DetailFilter }).(GetEnvironmentsDetailFilterPtrOutput)
}

func (o GetEnvironmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// a list of all the Environment IDs found in the Team.
func (o GetEnvironmentsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEnvironmentsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEnvironmentsResultOutput{})
}
