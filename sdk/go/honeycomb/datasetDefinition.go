// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package honeycomb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb/internal"
)

type DatasetDefinition struct {
	pulumi.CustomResourceState

	// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
	Column pulumi.StringOutput `pulumi:"column"`
	// The type of the column assigned to the definition. Either `column` or `derivedColumn`.
	ColumnType pulumi.StringOutput `pulumi:"columnType"`
	// The dataset to set the Dataset Definition for.
	Dataset pulumi.StringOutput `pulumi:"dataset"`
	// The name of the definition being set.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDatasetDefinition registers a new resource with the given unique name, arguments, and options.
func NewDatasetDefinition(ctx *pulumi.Context,
	name string, args *DatasetDefinitionArgs, opts ...pulumi.ResourceOption) (*DatasetDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Column == nil {
		return nil, errors.New("invalid value for required argument 'Column'")
	}
	if args.Dataset == nil {
		return nil, errors.New("invalid value for required argument 'Dataset'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatasetDefinition
	err := ctx.RegisterResource("honeycomb:index/datasetDefinition:DatasetDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatasetDefinition gets an existing DatasetDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatasetDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatasetDefinitionState, opts ...pulumi.ResourceOption) (*DatasetDefinition, error) {
	var resource DatasetDefinition
	err := ctx.ReadResource("honeycomb:index/datasetDefinition:DatasetDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatasetDefinition resources.
type datasetDefinitionState struct {
	// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
	Column *string `pulumi:"column"`
	// The type of the column assigned to the definition. Either `column` or `derivedColumn`.
	ColumnType *string `pulumi:"columnType"`
	// The dataset to set the Dataset Definition for.
	Dataset *string `pulumi:"dataset"`
	// The name of the definition being set.
	Name *string `pulumi:"name"`
}

type DatasetDefinitionState struct {
	// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
	Column pulumi.StringPtrInput
	// The type of the column assigned to the definition. Either `column` or `derivedColumn`.
	ColumnType pulumi.StringPtrInput
	// The dataset to set the Dataset Definition for.
	Dataset pulumi.StringPtrInput
	// The name of the definition being set.
	Name pulumi.StringPtrInput
}

func (DatasetDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDefinitionState)(nil)).Elem()
}

type datasetDefinitionArgs struct {
	// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
	Column string `pulumi:"column"`
	// The dataset to set the Dataset Definition for.
	Dataset string `pulumi:"dataset"`
	// The name of the definition being set.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DatasetDefinition resource.
type DatasetDefinitionArgs struct {
	// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
	Column pulumi.StringInput
	// The dataset to set the Dataset Definition for.
	Dataset pulumi.StringInput
	// The name of the definition being set.
	Name pulumi.StringPtrInput
}

func (DatasetDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datasetDefinitionArgs)(nil)).Elem()
}

type DatasetDefinitionInput interface {
	pulumi.Input

	ToDatasetDefinitionOutput() DatasetDefinitionOutput
	ToDatasetDefinitionOutputWithContext(ctx context.Context) DatasetDefinitionOutput
}

func (*DatasetDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefinition)(nil)).Elem()
}

func (i *DatasetDefinition) ToDatasetDefinitionOutput() DatasetDefinitionOutput {
	return i.ToDatasetDefinitionOutputWithContext(context.Background())
}

func (i *DatasetDefinition) ToDatasetDefinitionOutputWithContext(ctx context.Context) DatasetDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionOutput)
}

// DatasetDefinitionArrayInput is an input type that accepts DatasetDefinitionArray and DatasetDefinitionArrayOutput values.
// You can construct a concrete instance of `DatasetDefinitionArrayInput` via:
//
//	DatasetDefinitionArray{ DatasetDefinitionArgs{...} }
type DatasetDefinitionArrayInput interface {
	pulumi.Input

	ToDatasetDefinitionArrayOutput() DatasetDefinitionArrayOutput
	ToDatasetDefinitionArrayOutputWithContext(context.Context) DatasetDefinitionArrayOutput
}

type DatasetDefinitionArray []DatasetDefinitionInput

func (DatasetDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetDefinition)(nil)).Elem()
}

func (i DatasetDefinitionArray) ToDatasetDefinitionArrayOutput() DatasetDefinitionArrayOutput {
	return i.ToDatasetDefinitionArrayOutputWithContext(context.Background())
}

func (i DatasetDefinitionArray) ToDatasetDefinitionArrayOutputWithContext(ctx context.Context) DatasetDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionArrayOutput)
}

// DatasetDefinitionMapInput is an input type that accepts DatasetDefinitionMap and DatasetDefinitionMapOutput values.
// You can construct a concrete instance of `DatasetDefinitionMapInput` via:
//
//	DatasetDefinitionMap{ "key": DatasetDefinitionArgs{...} }
type DatasetDefinitionMapInput interface {
	pulumi.Input

	ToDatasetDefinitionMapOutput() DatasetDefinitionMapOutput
	ToDatasetDefinitionMapOutputWithContext(context.Context) DatasetDefinitionMapOutput
}

type DatasetDefinitionMap map[string]DatasetDefinitionInput

func (DatasetDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetDefinition)(nil)).Elem()
}

func (i DatasetDefinitionMap) ToDatasetDefinitionMapOutput() DatasetDefinitionMapOutput {
	return i.ToDatasetDefinitionMapOutputWithContext(context.Background())
}

func (i DatasetDefinitionMap) ToDatasetDefinitionMapOutputWithContext(ctx context.Context) DatasetDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatasetDefinitionMapOutput)
}

type DatasetDefinitionOutput struct{ *pulumi.OutputState }

func (DatasetDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatasetDefinition)(nil)).Elem()
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionOutput() DatasetDefinitionOutput {
	return o
}

func (o DatasetDefinitionOutput) ToDatasetDefinitionOutputWithContext(ctx context.Context) DatasetDefinitionOutput {
	return o
}

// The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.
func (o DatasetDefinitionOutput) Column() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetDefinition) pulumi.StringOutput { return v.Column }).(pulumi.StringOutput)
}

// The type of the column assigned to the definition. Either `column` or `derivedColumn`.
func (o DatasetDefinitionOutput) ColumnType() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetDefinition) pulumi.StringOutput { return v.ColumnType }).(pulumi.StringOutput)
}

// The dataset to set the Dataset Definition for.
func (o DatasetDefinitionOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetDefinition) pulumi.StringOutput { return v.Dataset }).(pulumi.StringOutput)
}

// The name of the definition being set.
func (o DatasetDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatasetDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DatasetDefinitionArrayOutput struct{ *pulumi.OutputState }

func (DatasetDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatasetDefinition)(nil)).Elem()
}

func (o DatasetDefinitionArrayOutput) ToDatasetDefinitionArrayOutput() DatasetDefinitionArrayOutput {
	return o
}

func (o DatasetDefinitionArrayOutput) ToDatasetDefinitionArrayOutputWithContext(ctx context.Context) DatasetDefinitionArrayOutput {
	return o
}

func (o DatasetDefinitionArrayOutput) Index(i pulumi.IntInput) DatasetDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatasetDefinition {
		return vs[0].([]*DatasetDefinition)[vs[1].(int)]
	}).(DatasetDefinitionOutput)
}

type DatasetDefinitionMapOutput struct{ *pulumi.OutputState }

func (DatasetDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatasetDefinition)(nil)).Elem()
}

func (o DatasetDefinitionMapOutput) ToDatasetDefinitionMapOutput() DatasetDefinitionMapOutput {
	return o
}

func (o DatasetDefinitionMapOutput) ToDatasetDefinitionMapOutputWithContext(ctx context.Context) DatasetDefinitionMapOutput {
	return o
}

func (o DatasetDefinitionMapOutput) MapIndex(k pulumi.StringInput) DatasetDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatasetDefinition {
		return vs[0].(map[string]*DatasetDefinition)[vs[1].(string)]
	}).(DatasetDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDefinitionInput)(nil)).Elem(), &DatasetDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDefinitionArrayInput)(nil)).Elem(), DatasetDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatasetDefinitionMapInput)(nil)).Elem(), DatasetDefinitionMap{})
	pulumi.RegisterOutputType(DatasetDefinitionOutput{})
	pulumi.RegisterOutputType(DatasetDefinitionArrayOutput{})
	pulumi.RegisterOutputType(DatasetDefinitionMapOutput{})
}
