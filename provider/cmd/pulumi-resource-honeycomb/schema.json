{
    "name": "honeycomb",
    "description": "A Pulumi package for creating and managing honeycomb cloud resources.",
    "keywords": [
        "thejokersthief",
        "honeycomb",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`honeycombio` Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio).",
    "repository": "https://github.com/thejokersthief/pulumi-honeycomb",
    "publisher": "thejokersthief",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing honeycomb cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-honeycomb` repo](https://github.com/thejokersthief/pulumi-honeycomb/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-honeycomb` repo](https://github.com/thejokersthief/pulumi-honeycomb/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        },
        "defaults": [
            "apiKey"
        ]
    },
    "types": {
        "honeycomb:index/BoardQuery:BoardQuery": {
            "properties": {
                "caption": {
                    "type": "string",
                    "description": "A description of the query that will be displayed on the board. Supports markdown.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is associated with.\n",
                    "deprecationMessage": "Board Queries no longer require the dataset as they rely on the provided Query ID's dataset."
                },
                "graphSettings": {
                    "$ref": "#/types/honeycomb:index/BoardQueryGraphSettings:BoardQueryGraphSettings",
                    "description": "A map of boolean toggles to manages the settings for this query's graph on the board.\nIf a value is unspecified, it is assumed to be false.\nCurrently supported toggles are:\n"
                },
                "queryAnnotationId": {
                    "type": "string",
                    "description": "The ID of the Query Annotation to associate with this query.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the Query to run.\n"
                },
                "queryStyle": {
                    "type": "string",
                    "description": "How the query should be displayed within the board, either `graph` (the default), `table` or `combo`.\n"
                }
            },
            "type": "object",
            "required": [
                "queryId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dataset",
                        "graphSettings",
                        "queryId",
                        "queryStyle"
                    ]
                }
            }
        },
        "honeycomb:index/BoardQueryGraphSettings:BoardQueryGraphSettings": {
            "properties": {
                "hideMarkers": {
                    "type": "boolean",
                    "description": "Disable the overlay of Markers on the graph.\n"
                },
                "logScale": {
                    "type": "boolean",
                    "description": "Set the graph's Y axis to Log scale.\n"
                },
                "omitMissingValues": {
                    "type": "boolean",
                    "description": "Enable interpolatation between datapoints when the interveneing time buckets have no matching events.\n"
                },
                "overlaidCharts": {
                    "type": "boolean",
                    "description": "See [Graph Settings](https://docs.honeycomb.io/working-with-your-data/graph-settings/) in the documentation for more information on any individual setting.\n"
                },
                "stackedGraphs": {
                    "type": "boolean",
                    "description": "Enable the display of groups as stacked colored area under their line graphs.\n"
                },
                "utcXaxis": {
                    "type": "boolean",
                    "description": "Set the graph's X axis to UTC.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hideMarkers",
                        "logScale",
                        "omitMissingValues",
                        "overlaidCharts",
                        "stackedGraphs",
                        "utcXaxis"
                    ]
                }
            }
        },
        "honeycomb:index/BurnAlertRecipient:BurnAlertRecipient": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an already existing recipient. Should not be used in combination with `type` and `target`.\n"
                },
                "notificationDetails": {
                    "$ref": "#/types/honeycomb:index/BurnAlertRecipientNotificationDetails:BurnAlertRecipientNotificationDetails",
                    "description": "a block of additional details to send along with the notification. The only supported option currently is `pagerduty_severity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n\nType      | Target\n----------|-------------------------\nemail     | an email address\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "notificationDetails",
                        "target",
                        "type"
                    ]
                }
            }
        },
        "honeycomb:index/BurnAlertRecipientNotificationDetails:BurnAlertRecipientNotificationDetails": {
            "properties": {
                "pagerdutySeverity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pagerdutySeverity"
            ]
        },
        "honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
                }
            },
            "type": "object",
            "required": [
                "op"
            ]
        },
        "honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the filter to.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value used for the filter. Not needed if op is `exists`, `not-exists`, `in` or `not-in`. Mutually exclusive with the other `value_*` options.\n"
                },
                "valueBoolean": {
                    "type": "boolean",
                    "description": "Deprecated: use 'value' instead. The value used for the filter when the column is a boolean. Mutually exclusive with `value` and the other `value_*` options.\n\n\u003e **NOTE** The type of the filter value should match with the type of the column. To determine the type of a column visit the dataset settings page, all the columns and their type are listed under _Schema_. This provider will not be able to detect invalid combinations.\n\n\u003e **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value_string` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.\n",
                    "deprecationMessage": "Use of attribute `value_boolean` is discouraged and will fail to plan if using 'false'. Use of `value` is encouraged."
                },
                "valueFloat": {
                    "type": "number",
                    "description": "Deprecated: use 'value' instead. The value used for the filter when the column is a float. Mutually exclusive with `value` and the other `value_*` options.\n",
                    "deprecationMessage": "Use of attribute `value_float` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged."
                },
                "valueInteger": {
                    "type": "integer",
                    "description": "Deprecated: use 'value' instead. The value used for the filter when the column is an integer. Mutually exclusive with `value` and the other `value_*` options.\n",
                    "deprecationMessage": "Use of attribute `value_integer` is discouraged and will fail to plan if using '0'. Use of `value` is encouraged."
                },
                "valueString": {
                    "type": "string",
                    "description": "Deprecated: use 'value' instead. The value used for the filter when the column is a string. Mutually exclusive with `value` and the other `value_*` options.\n",
                    "deprecationMessage": "Use of attribute `value_string` is discouraged and will fail to plan if using the empty string. Use of `value` is encouraged."
                }
            },
            "type": "object",
            "required": [
                "column",
                "op"
            ]
        },
        "honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving": {
            "properties": {
                "calculateOp": {
                    "type": "string",
                    "description": "The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.\n"
                },
                "column": {
                    "type": "string",
                    "description": "The column to apply the `calculate_op` to, not needed with `COUNT` or `CONCURRENCY`.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply to filter the query results. One of `=`, `!=`, `\u003e`, `\u003e=`, `\u003c`, or `\u003c=`.\n"
                },
                "value": {
                    "type": "number",
                    "description": "The value used with `op`. Currently assumed to be a number.\n\n\u003e **NOTE** A having term's `column`/`calculate_op` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculate_op` pair.\n"
                }
            },
            "type": "object",
            "required": [
                "calculateOp",
                "op",
                "value"
            ]
        },
        "honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "Either a column present in `breakdown` or a column to `op` applies to.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
                },
                "order": {
                    "type": "string",
                    "description": "The sort direction, if set must be `ascending` or `descending`.\n"
                }
            },
            "type": "object"
        },
        "honeycomb:index/GetRecipientDetailFilter:GetRecipientDetailFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integration_name`, and `url`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the detail field to match on.\n"
                },
                "valueRegex": {
                    "type": "string",
                    "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "honeycomb:index/GetRecipientsDetailFilter:GetRecipientsDetailFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the detail field to filter by. Allowed values are `address`, `channel`, `name`, `integration_name`, and `url`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the detail field to match on.\n"
                },
                "valueRegex": {
                    "type": "string",
                    "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "honeycomb:index/TriggerRecipient:TriggerRecipient": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an already existing recipient. Should not be used in combination with `type` and `target`.\n"
                },
                "notificationDetails": {
                    "$ref": "#/types/honeycomb:index/TriggerRecipientNotificationDetails:TriggerRecipientNotificationDetails",
                    "description": "a block of additional details to send along with the notification. The only supported option currently is `pagerduty_severity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the trigger recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`. Should not be used in combination with `id`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "notificationDetails",
                        "target",
                        "type"
                    ]
                }
            }
        },
        "honeycomb:index/TriggerRecipientNotificationDetails:TriggerRecipientNotificationDetails": {
            "properties": {
                "pagerdutySeverity": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pagerdutySeverity"
            ]
        },
        "honeycomb:index/TriggerThreshold:TriggerThreshold": {
            "properties": {
                "op": {
                    "type": "string",
                    "description": "The operator to apply, allowed threshold operators are `\u003e`, `\u003e=`, `\u003c`, and `\u003c=`.\n"
                },
                "value": {
                    "type": "number",
                    "description": "The value to be used with the operator.\n"
                }
            },
            "type": "object",
            "required": [
                "op",
                "value"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the honeycombio package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        },
        "required": [
            "apiKey"
        ],
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiUrl": {
                "type": "string"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        },
        "requiredInputs": [
            "apiKey"
        ]
    },
    "resources": {
        "honeycomb:index/board:Board": {
            "description": "## # Resource: honeycomb.Board\n\nCreates a board. For more information about boards, check out [Collaborate with Boards](https://docs.honeycomb.io/working-with-your-data/collaborating/boards/#docs-sidebar).\n\n## Example Usage\n\n### Simple Board\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst queryGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"P99\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    breakdowns: [\"app.tenant\"],\n});\nconst queryQuery = new honeycomb.Query(\"queryQuery\", {\n    dataset: _var.dataset,\n    queryJson: queryGetQuerySpecification.then(queryGetQuerySpecification =\u003e queryGetQuerySpecification.json),\n});\nconst board = new honeycomb.Board(\"board\", {queries: [{\n    queryId: queryQuery.id,\n}]});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nquery_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"P99\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    breakdowns=[\"app.tenant\"])\nquery_query = honeycomb.Query(\"queryQuery\",\n    dataset=var[\"dataset\"],\n    query_json=query_get_query_specification.json)\nboard = honeycomb.Board(\"board\", queries=[{\n    \"query_id\": query_query.id,\n}])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var queryGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"P99\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        Breakdowns = new[]\n        {\n            \"app.tenant\",\n        },\n    });\n\n    var queryQuery = new Honeycomb.Query(\"queryQuery\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryJson = queryGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var board = new Honeycomb.Board(\"board\", new()\n    {\n        Queries = new[]\n        {\n            new Honeycomb.Inputs.BoardQueryArgs\n            {\n                QueryId = queryQuery.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tqueryGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"P99\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.tenant\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tqueryQuery, err := honeycomb.NewQuery(ctx, \"queryQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.Any(_var.Dataset),\n\t\t\tQueryJson: pulumi.String(queryGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewBoard(ctx, \"board\", \u0026honeycomb.BoardArgs{\n\t\t\tQueries: honeycomb.BoardQueryArray{\n\t\t\t\t\u0026honeycomb.BoardQueryArgs{\n\t\t\t\t\tQueryId: queryQuery.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport com.pulumi.honeycomb.Board;\nimport com.pulumi.honeycomb.BoardArgs;\nimport com.pulumi.honeycomb.inputs.BoardQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var queryGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"P99\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .breakdowns(\"app.tenant\")\n            .build());\n\n        var queryQuery = new Query(\"queryQuery\", QueryArgs.builder()\n            .dataset(var_.dataset())\n            .queryJson(queryGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var board = new Board(\"board\", BoardArgs.builder()\n            .queries(BoardQueryArgs.builder()\n                .queryId(queryQuery.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  queryQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${var.dataset}\n      queryJson: ${queryGetQuerySpecification.json}\n  board:\n    type: honeycomb:Board\n    properties:\n      queries:\n        - queryId: ${queryQuery.id}\nvariables:\n  queryGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: P99\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        breakdowns:\n          - app.tenant\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Annotated Board\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst latencyByUseridGetQuerySpecification = honeycomb.GetQuerySpecification({\n    timeRange: 86400,\n    breakdowns: [\"app.user_id\"],\n    calculations: [\n        {\n            op: \"HEATMAP\",\n            column: \"duration_ms\",\n        },\n        {\n            op: \"P99\",\n            column: \"duration_ms\",\n        },\n    ],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    orders: [{\n        column: \"duration_ms\",\n        op: \"P99\",\n        order: \"descending\",\n    }],\n});\nconst latencyByUseridQuery = new honeycomb.Query(\"latencyByUseridQuery\", {\n    dataset: _var.dataset,\n    queryJson: latencyByUseridGetQuerySpecification.then(latencyByUseridGetQuerySpecification =\u003e latencyByUseridGetQuerySpecification.json),\n});\nconst latencyByUseridQueryAnnotation = new honeycomb.QueryAnnotation(\"latencyByUseridQueryAnnotation\", {\n    dataset: _var.dataset,\n    queryId: latencyByUseridQuery.id,\n    description: \"A breakdown of trace latency by User over the last 24 hours\",\n});\nconst overview = new honeycomb.Board(\"overview\", {\n    style: \"visual\",\n    queries: [{\n        caption: \"Latency by User\",\n        queryId: latencyByUseridQuery.id,\n        queryAnnotationId: latencyByUseridQueryAnnotation.id,\n        graphSettings: {\n            utcXaxis: true,\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nlatency_by_userid_get_query_specification = honeycomb.get_query_specification(time_range=86400,\n    breakdowns=[\"app.user_id\"],\n    calculations=[\n        {\n            \"op\": \"HEATMAP\",\n            \"column\": \"duration_ms\",\n        },\n        {\n            \"op\": \"P99\",\n            \"column\": \"duration_ms\",\n        },\n    ],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    orders=[{\n        \"column\": \"duration_ms\",\n        \"op\": \"P99\",\n        \"order\": \"descending\",\n    }])\nlatency_by_userid_query = honeycomb.Query(\"latencyByUseridQuery\",\n    dataset=var[\"dataset\"],\n    query_json=latency_by_userid_get_query_specification.json)\nlatency_by_userid_query_annotation = honeycomb.QueryAnnotation(\"latencyByUseridQueryAnnotation\",\n    dataset=var[\"dataset\"],\n    query_id=latency_by_userid_query.id,\n    description=\"A breakdown of trace latency by User over the last 24 hours\")\noverview = honeycomb.Board(\"overview\",\n    style=\"visual\",\n    queries=[{\n        \"caption\": \"Latency by User\",\n        \"query_id\": latency_by_userid_query.id,\n        \"query_annotation_id\": latency_by_userid_query_annotation.id,\n        \"graph_settings\": {\n            \"utc_xaxis\": True,\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var latencyByUseridGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        TimeRange = 86400,\n        Breakdowns = new[]\n        {\n            \"app.user_id\",\n        },\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"HEATMAP\",\n                Column = \"duration_ms\",\n            },\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"P99\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        Orders = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationOrderInputArgs\n            {\n                Column = \"duration_ms\",\n                Op = \"P99\",\n                Order = \"descending\",\n            },\n        },\n    });\n\n    var latencyByUseridQuery = new Honeycomb.Query(\"latencyByUseridQuery\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryJson = latencyByUseridGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var latencyByUseridQueryAnnotation = new Honeycomb.QueryAnnotation(\"latencyByUseridQueryAnnotation\", new()\n    {\n        Dataset = @var.Dataset,\n        QueryId = latencyByUseridQuery.Id,\n        Description = \"A breakdown of trace latency by User over the last 24 hours\",\n    });\n\n    var overview = new Honeycomb.Board(\"overview\", new()\n    {\n        Style = \"visual\",\n        Queries = new[]\n        {\n            new Honeycomb.Inputs.BoardQueryArgs\n            {\n                Caption = \"Latency by User\",\n                QueryId = latencyByUseridQuery.Id,\n                QueryAnnotationId = latencyByUseridQueryAnnotation.Id,\n                GraphSettings = new Honeycomb.Inputs.BoardQueryGraphSettingsArgs\n                {\n                    UtcXaxis = true,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlatencyByUseridGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tTimeRange: pulumi.IntRef(86400),\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.user_id\",\n\t\t\t},\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"HEATMAP\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tOp:     \"P99\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tOrders: []honeycomb.GetQuerySpecificationOrder{\n\t\t\t\t{\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t\tOp:     pulumi.StringRef(\"P99\"),\n\t\t\t\t\tOrder:  pulumi.StringRef(\"descending\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlatencyByUseridQuery, err := honeycomb.NewQuery(ctx, \"latencyByUseridQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.Any(_var.Dataset),\n\t\t\tQueryJson: pulumi.String(latencyByUseridGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlatencyByUseridQueryAnnotation, err := honeycomb.NewQueryAnnotation(ctx, \"latencyByUseridQueryAnnotation\", \u0026honeycomb.QueryAnnotationArgs{\n\t\t\tDataset:     pulumi.Any(_var.Dataset),\n\t\t\tQueryId:     latencyByUseridQuery.ID(),\n\t\t\tDescription: pulumi.String(\"A breakdown of trace latency by User over the last 24 hours\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewBoard(ctx, \"overview\", \u0026honeycomb.BoardArgs{\n\t\t\tStyle: pulumi.String(\"visual\"),\n\t\t\tQueries: honeycomb.BoardQueryArray{\n\t\t\t\t\u0026honeycomb.BoardQueryArgs{\n\t\t\t\t\tCaption:           pulumi.String(\"Latency by User\"),\n\t\t\t\t\tQueryId:           latencyByUseridQuery.ID(),\n\t\t\t\t\tQueryAnnotationId: latencyByUseridQueryAnnotation.ID(),\n\t\t\t\t\tGraphSettings: \u0026honeycomb.BoardQueryGraphSettingsArgs{\n\t\t\t\t\t\tUtcXaxis: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport com.pulumi.honeycomb.QueryAnnotation;\nimport com.pulumi.honeycomb.QueryAnnotationArgs;\nimport com.pulumi.honeycomb.Board;\nimport com.pulumi.honeycomb.BoardArgs;\nimport com.pulumi.honeycomb.inputs.BoardQueryArgs;\nimport com.pulumi.honeycomb.inputs.BoardQueryGraphSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var latencyByUseridGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .timeRange(86400)\n            .breakdowns(\"app.user_id\")\n            .calculations(            \n                GetQuerySpecificationCalculationArgs.builder()\n                    .op(\"HEATMAP\")\n                    .column(\"duration_ms\")\n                    .build(),\n                GetQuerySpecificationCalculationArgs.builder()\n                    .op(\"P99\")\n                    .column(\"duration_ms\")\n                    .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .orders(GetQuerySpecificationOrderArgs.builder()\n                .column(\"duration_ms\")\n                .op(\"P99\")\n                .order(\"descending\")\n                .build())\n            .build());\n\n        var latencyByUseridQuery = new Query(\"latencyByUseridQuery\", QueryArgs.builder()\n            .dataset(var_.dataset())\n            .queryJson(latencyByUseridGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var latencyByUseridQueryAnnotation = new QueryAnnotation(\"latencyByUseridQueryAnnotation\", QueryAnnotationArgs.builder()\n            .dataset(var_.dataset())\n            .queryId(latencyByUseridQuery.id())\n            .description(\"A breakdown of trace latency by User over the last 24 hours\")\n            .build());\n\n        var overview = new Board(\"overview\", BoardArgs.builder()\n            .style(\"visual\")\n            .queries(BoardQueryArgs.builder()\n                .caption(\"Latency by User\")\n                .queryId(latencyByUseridQuery.id())\n                .queryAnnotationId(latencyByUseridQueryAnnotation.id())\n                .graphSettings(BoardQueryGraphSettingsArgs.builder()\n                    .utcXaxis(true)\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  latencyByUseridQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${var.dataset}\n      queryJson: ${latencyByUseridGetQuerySpecification.json}\n  latencyByUseridQueryAnnotation:\n    type: honeycomb:QueryAnnotation\n    properties:\n      dataset: ${var.dataset}\n      queryId: ${latencyByUseridQuery.id}\n      description: A breakdown of trace latency by User over the last 24 hours\n  overview:\n    type: honeycomb:Board\n    properties:\n      style: visual\n      queries:\n        - caption: Latency by User\n          queryId: ${latencyByUseridQuery.id}\n          queryAnnotationId: ${latencyByUseridQueryAnnotation.id}\n          graphSettings:\n            utcXaxis: true\nvariables:\n  latencyByUseridGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        timeRange: 86400\n        breakdowns:\n          - app.user_id\n        calculations:\n          - op: HEATMAP\n            column: duration_ms\n          - op: P99\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        orders:\n          - column: duration_ms\n            op: P99\n            order: descending\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBoards can be imported using their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/board:Board my_board AobW9oAZX71\n```\n\nYou can find the ID in the URL bar when visiting the board from the UI.\n\n",
            "properties": {
                "boardUrl": {
                    "type": "string",
                    "description": "The URL to the board in the Honeycomb UI.\n"
                },
                "columnLayout": {
                    "type": "string",
                    "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the board. Supports markdown.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the board.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BoardQuery:BoardQuery"
                    },
                    "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
                },
                "style": {
                    "type": "string",
                    "description": "How the board should be displayed in the UI, either `list` (the default) or `visual`.\n"
                }
            },
            "required": [
                "boardUrl",
                "columnLayout",
                "name"
            ],
            "inputProperties": {
                "columnLayout": {
                    "type": "string",
                    "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the board. Supports markdown.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the board.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BoardQuery:BoardQuery"
                    },
                    "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
                },
                "style": {
                    "type": "string",
                    "description": "How the board should be displayed in the UI, either `list` (the default) or `visual`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Board resources.\n",
                "properties": {
                    "boardUrl": {
                        "type": "string",
                        "description": "The URL to the board in the Honeycomb UI.\n"
                    },
                    "columnLayout": {
                        "type": "string",
                        "description": "the number of columns to layout on the board, either `multi` (the default) or `single`. Only `visual` style boards (see below) have a column layout.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the board. Supports markdown.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the board.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/BoardQuery:BoardQuery"
                        },
                        "description": "Zero or more configurations blocks (described below) with the queries of the board.\n"
                    },
                    "style": {
                        "type": "string",
                        "description": "How the board should be displayed in the UI, either `list` (the default) or `visual`.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/burnAlert:BurnAlert": {
            "description": "## # Resource: honeycomb.BurnAlert\n\nCreates a burn alert. For more information about burn alerts, check out [Define Burn Alerts](https://docs.honeycomb.io/working-with-your-data/slos/slo-process/#define-burn-alerts).\n\n## Example Usage\n\n### Basic Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst exampleAlert = new honeycomb.BurnAlert(\"exampleAlert\", {\n    dataset: dataset,\n    sloId: sloId,\n    exhaustionMinutes: 480,\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"slack\",\n            target: \"#example-channel\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\nexample_alert = honeycomb.BurnAlert(\"exampleAlert\",\n    dataset=dataset,\n    slo_id=slo_id,\n    exhaustion_minutes=480,\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"slack\",\n            \"target\": \"#example-channel\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var exampleAlert = new Honeycomb.BurnAlert(\"exampleAlert\", new()\n    {\n        Dataset = dataset,\n        SloId = sloId,\n        ExhaustionMinutes = 480,\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"slack\",\n                Target = \"#example-channel\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\t_, err := honeycomb.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycomb.BurnAlertArgs{\n\t\t\tDataset:           pulumi.String(dataset),\n\t\t\tSloId:             pulumi.String(sloId),\n\t\t\tExhaustionMinutes: pulumi.Int(480),\n\t\t\tRecipients: honeycomb.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"slack\"),\n\t\t\t\t\tTarget: pulumi.String(\"#example-channel\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.BurnAlert;\nimport com.pulumi.honeycomb.BurnAlertArgs;\nimport com.pulumi.honeycomb.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .dataset(dataset)\n            .sloId(sloId)\n            .exhaustionMinutes(480)\n            .recipients(            \n                BurnAlertRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                BurnAlertRecipientArgs.builder()\n                    .type(\"slack\")\n                    .target(\"#example-channel\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycomb:BurnAlert\n    properties:\n      dataset: ${dataset}\n      sloId: ${sloId}\n      exhaustionMinutes: 480\n      # one or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: slack\n          target: '#example-channel'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with PagerDuty Recipient and Severity\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst pd-prod = honeycomb.GetRecipient({\n    type: \"pagerduty\",\n    detailFilter: {\n        name: \"integration_name\",\n        value: \"Prod On-Call\",\n    },\n});\nconst exampleAlert = new honeycomb.BurnAlert(\"exampleAlert\", {\n    dataset: dataset,\n    sloId: sloId,\n    exhaustionMinutes: 60,\n    recipients: [{\n        id: pd_prod.then(pd_prod =\u003e pd_prod.id),\n        notificationDetails: {\n            pagerdutySeverity: \"critical\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\npd_prod = honeycomb.get_recipient(type=\"pagerduty\",\n    detail_filter={\n        \"name\": \"integration_name\",\n        \"value\": \"Prod On-Call\",\n    })\nexample_alert = honeycomb.BurnAlert(\"exampleAlert\",\n    dataset=dataset,\n    slo_id=slo_id,\n    exhaustion_minutes=60,\n    recipients=[{\n        \"id\": pd_prod.id,\n        \"notification_details\": {\n            \"pagerduty_severity\": \"critical\",\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var pd_prod = Honeycomb.GetRecipient.Invoke(new()\n    {\n        Type = \"pagerduty\",\n        DetailFilter = new Honeycomb.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"integration_name\",\n            Value = \"Prod On-Call\",\n        },\n    });\n\n    var exampleAlert = new Honeycomb.BurnAlert(\"exampleAlert\", new()\n    {\n        Dataset = dataset,\n        SloId = sloId,\n        ExhaustionMinutes = 60,\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Id = pd_prod.Apply(pd_prod =\u003e pd_prod.Apply(getRecipientResult =\u003e getRecipientResult.Id)),\n                NotificationDetails = new Honeycomb.Inputs.BurnAlertRecipientNotificationDetailsArgs\n                {\n                    PagerdutySeverity = \"critical\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\tpd_prod, err := honeycomb.GetRecipient(ctx, \u0026honeycomb.GetRecipientArgs{\n\t\t\tType: \"pagerduty\",\n\t\t\tDetailFilter: honeycomb.GetRecipientDetailFilter{\n\t\t\t\tName:  \"integration_name\",\n\t\t\t\tValue: pulumi.StringRef(\"Prod On-Call\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycomb.BurnAlertArgs{\n\t\t\tDataset:           pulumi.String(dataset),\n\t\t\tSloId:             pulumi.String(sloId),\n\t\t\tExhaustionMinutes: pulumi.Int(60),\n\t\t\tRecipients: honeycomb.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tId: pulumi.String(pd_prod.Id),\n\t\t\t\t\tNotificationDetails: \u0026honeycomb.BurnAlertRecipientNotificationDetailsArgs{\n\t\t\t\t\t\tPagerdutySeverity: pulumi.String(\"critical\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetRecipientArgs;\nimport com.pulumi.honeycomb.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycomb.BurnAlert;\nimport com.pulumi.honeycomb.BurnAlertArgs;\nimport com.pulumi.honeycomb.inputs.BurnAlertRecipientArgs;\nimport com.pulumi.honeycomb.inputs.BurnAlertRecipientNotificationDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        final var pd-prod = HoneycombFunctions.GetRecipient(GetRecipientArgs.builder()\n            .type(\"pagerduty\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"integration_name\")\n                .value(\"Prod On-Call\")\n                .build())\n            .build());\n\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .dataset(dataset)\n            .sloId(sloId)\n            .exhaustionMinutes(60)\n            .recipients(BurnAlertRecipientArgs.builder()\n                .id(pd_prod.id())\n                .notificationDetails(BurnAlertRecipientNotificationDetailsArgs.builder()\n                    .pagerdutySeverity(\"critical\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycomb:BurnAlert\n    properties:\n      dataset: ${dataset}\n      sloId: ${sloId}\n      exhaustionMinutes: 60\n      recipients:\n        - id: ${[\"pd-prod\"].id}\n          notificationDetails:\n            pagerdutySeverity: critical\nvariables:\n  pd-prod:\n    fn::invoke:\n      Function: honeycomb:GetRecipient\n      Arguments:\n        type: pagerduty\n        detailFilter:\n          name: integration_name\n          value: Prod On-Call\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBurn Alerts can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/burnAlert:BurnAlert my_alert my-dataset/bj9BwOb1uKz\n```\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this burn alert is associated with.\n"
                },
                "exhaustionMinutes": {
                    "type": "integer",
                    "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "ID of the SLO this burn alert is associated with.\n"
                }
            },
            "required": [
                "dataset",
                "exhaustionMinutes",
                "recipients",
                "sloId"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this burn alert is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "exhaustionMinutes": {
                    "type": "integer",
                    "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "ID of the SLO this burn alert is associated with.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataset",
                "exhaustionMinutes",
                "recipients",
                "sloId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BurnAlert resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this burn alert is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "exhaustionMinutes": {
                        "type": "integer",
                        "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and the alert will fire.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                        },
                        "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                    },
                    "sloId": {
                        "type": "string",
                        "description": "ID of the SLO this burn alert is associated with.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/column:Column": {
            "description": "## # Resource: honeycomb.Column\n\nProvides a Honeycomb Column resource.\nThis can be used to create, update, and delete columns in a dataset.\n\n\u003e **Note**: deleting a column is a destructive and irreversible operation which also removes the data in the column.\n\n\u003e **Note**: prior to version 0.13.0 of the provider, columns were *not* deleted on destroy but left in place and only removed from state.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst durationMs = new honeycomb.Column(\"durationMs\", {\n    type: \"float\",\n    description: \"Duration of the trace\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nduration_ms = honeycomb.Column(\"durationMs\",\n    type=\"float\",\n    description=\"Duration of the trace\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var durationMs = new Honeycomb.Column(\"durationMs\", new()\n    {\n        Type = \"float\",\n        Description = \"Duration of the trace\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.NewColumn(ctx, \"durationMs\", \u0026honeycomb.ColumnArgs{\n\t\t\tType:        pulumi.String(\"float\"),\n\t\t\tDescription: pulumi.String(\"Duration of the trace\"),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.Column;\nimport com.pulumi.honeycomb.ColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        var durationMs = new Column(\"durationMs\", ColumnArgs.builder()\n            .type(\"float\")\n            .description(\"Duration of the trace\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  durationMs:\n    type: honeycomb:Column\n    properties:\n      type: float\n      description: Duration of the trace\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nColumns can be imported using a combination of the dataset name and their name, e.g.\n\n```sh\n$ pulumi import honeycomb:index/column:Column my_column my-dataset/duration_ms\n```\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "ISO8601 formatted time the column was created\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this column is added to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description that is shown in the UI.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
                },
                "keyName": {
                    "type": "string",
                    "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
                    "deprecationMessage": "Please set `name` instead."
                },
                "lastWrittenAt": {
                    "type": "string",
                    "description": "ISO8601 formatted time the column was last written to (received event data)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column. Must be unique per dataset.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "ISO8601 formatted time the column was updated\n"
                }
            },
            "required": [
                "createdAt",
                "dataset",
                "keyName",
                "lastWrittenAt",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this column is added to.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A description that is shown in the UI.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
                },
                "keyName": {
                    "type": "string",
                    "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
                    "deprecationMessage": "Please set `name` instead.",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the column. Must be unique per dataset.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
                }
            },
            "requiredInputs": [
                "dataset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Column resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO8601 formatted time the column was created\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this column is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A description that is shown in the UI.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Whether this column should be hidden in the query builder and sample data. Defaults to false.\n"
                    },
                    "keyName": {
                        "type": "string",
                        "description": "Please use `name` instead. The name of the column. Must be unique per dataset. Conficts with `name`.\n",
                        "deprecationMessage": "Please set `name` instead.",
                        "willReplaceOnChanges": true
                    },
                    "lastWrittenAt": {
                        "type": "string",
                        "description": "ISO8601 formatted time the column was last written to (received event data)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the column. Must be unique per dataset.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the column, allowed values are `string`, `float`, `integer` and `boolean`. Defaults to `string`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "ISO8601 formatted time the column was updated\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/dataset:Dataset": {
            "description": "## # Resource: honeycomb.Dataset\n\nCreates a dataset.\n\n\u003e **Note** If this dataset already exists, creating this resource is a no-op.\n\n\u003e **Note** Destroying or replacing this resource will not delete the created dataset. It's not possible to delete a dataset using the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst myDataset = new honeycomb.Dataset(\"myDataset\", {description: \"buzzing with data\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nmy_dataset = honeycomb.Dataset(\"myDataset\", description=\"buzzing with data\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDataset = new Honeycomb.Dataset(\"myDataset\", new()\n    {\n        Description = \"buzzing with data\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewDataset(ctx, \"myDataset\", \u0026honeycomb.DatasetArgs{\n\t\t\tDescription: pulumi.String(\"buzzing with data\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.Dataset;\nimport com.pulumi.honeycomb.DatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDataset = new Dataset(\"myDataset\", DatasetArgs.builder()\n            .description(\"buzzing with data\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDataset:\n    type: honeycomb:Dataset\n    properties:\n      description: buzzing with data\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatasets can be imported by their slug, e.g.\n\n```sh\n$ pulumi import honeycomb:index/dataset:Dataset my_dataset my-dataset\n```\n\nYou can find the slug in the URL bar when visiting the Dataset from the UI.\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "ISO8601 formatted time the column was created\n"
                },
                "description": {
                    "type": "string",
                    "description": "A longer description for dataset.\n"
                },
                "expandJsonDepth": {
                    "type": "integer",
                    "description": "The maximum unpacking depth of nested JSON fields.\n"
                },
                "lastWrittenAt": {
                    "type": "string",
                    "description": "ISO8601 formatted time the column was last written to (received event data)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dataset.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the dataset.\n"
                }
            },
            "required": [
                "createdAt",
                "lastWrittenAt",
                "name",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A longer description for dataset.\n"
                },
                "expandJsonDepth": {
                    "type": "integer",
                    "description": "The maximum unpacking depth of nested JSON fields.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dataset.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dataset resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO8601 formatted time the column was created\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A longer description for dataset.\n"
                    },
                    "expandJsonDepth": {
                        "type": "integer",
                        "description": "The maximum unpacking depth of nested JSON fields.\n"
                    },
                    "lastWrittenAt": {
                        "type": "string",
                        "description": "ISO8601 formatted time the column was last written to (received event data)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dataset.\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the dataset.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/datasetDefinition:DatasetDefinition": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
                },
                "columnType": {
                    "type": "string",
                    "description": "The type of the column assigned to the definition. Either `column` or `derived_column`.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset to set the Dataset Definition for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the definition being set.\n"
                }
            },
            "required": [
                "column",
                "columnType",
                "dataset",
                "name"
            ],
            "inputProperties": {
                "column": {
                    "type": "string",
                    "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset to set the Dataset Definition for.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the definition being set.\n"
                }
            },
            "requiredInputs": [
                "column",
                "dataset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatasetDefinition resources.\n",
                "properties": {
                    "column": {
                        "type": "string",
                        "description": "The column to set the definition to. Must be the name of an existing Column or the alias of an existing Derived Column.\n"
                    },
                    "columnType": {
                        "type": "string",
                        "description": "The type of the column assigned to the definition. Either `column` or `derived_column`.\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset to set the Dataset Definition for.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the definition being set.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/derivedColumn:DerivedColumn": {
            "description": "## # Resource: honeycomb.DerivedColumn\n\nCreates a derived column. For more information about derived columns, check out [Calculate with derived columns](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst durationMsLog = new honeycomb.DerivedColumn(\"durationMsLog\", {\n    alias: \"duration_ms_log10\",\n    expression: \"LOG10($duration_ms)\",\n    description: \"LOG10 of duration_ms\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nduration_ms_log = honeycomb.DerivedColumn(\"durationMsLog\",\n    alias=\"duration_ms_log10\",\n    expression=\"LOG10($duration_ms)\",\n    description=\"LOG10 of duration_ms\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var durationMsLog = new Honeycomb.DerivedColumn(\"durationMsLog\", new()\n    {\n        Alias = \"duration_ms_log10\",\n        Expression = \"LOG10($duration_ms)\",\n        Description = \"LOG10 of duration_ms\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.NewDerivedColumn(ctx, \"durationMsLog\", \u0026honeycomb.DerivedColumnArgs{\n\t\t\tAlias:       pulumi.String(\"duration_ms_log10\"),\n\t\t\tExpression:  pulumi.String(\"LOG10($duration_ms)\"),\n\t\t\tDescription: pulumi.String(\"LOG10 of duration_ms\"),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.DerivedColumn;\nimport com.pulumi.honeycomb.DerivedColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        var durationMsLog = new DerivedColumn(\"durationMsLog\", DerivedColumnArgs.builder()\n            .alias(\"duration_ms_log10\")\n            .expression(\"LOG10($duration_ms)\")\n            .description(\"LOG10 of duration_ms\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  durationMsLog:\n    type: honeycomb:DerivedColumn\n    properties:\n      alias: duration_ms_log10\n      expression: LOG10($duration_ms)\n      description: LOG10 of duration_ms\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDerived columns can be imported using a combination of the dataset name and their alias, e.g.\n\n```sh\n$ pulumi import honeycomb:index/derivedColumn:DerivedColumn my_column my-dataset/duration_ms_log10\n```\n",
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The name of the derived column. Must be unique per dataset.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this derived column is added to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description that is shown in the UI.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
                }
            },
            "required": [
                "alias",
                "dataset",
                "expression"
            ],
            "inputProperties": {
                "alias": {
                    "type": "string",
                    "description": "The name of the derived column. Must be unique per dataset.\n",
                    "willReplaceOnChanges": true
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this derived column is added to.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A description that is shown in the UI.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
                }
            },
            "requiredInputs": [
                "alias",
                "dataset",
                "expression"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DerivedColumn resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The name of the derived column. Must be unique per dataset.\n",
                        "willReplaceOnChanges": true
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this derived column is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A description that is shown in the UI.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "The function of the derived column. See [Derived Column Syntax](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/derived-columns/#derived-column-syntax).\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/emailRecipient:EmailRecipient": {
            "description": "## # Resource: honeycomb.EmailRecipient\n\n`honeycomb.EmailRecipient` allows you to define and manage an Email recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst alerts = new honeycomb.EmailRecipient(\"alerts\", {address: \"alerts@example.com\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nalerts = honeycomb.EmailRecipient(\"alerts\", address=\"alerts@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alerts = new Honeycomb.EmailRecipient(\"alerts\", new()\n    {\n        Address = \"alerts@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewEmailRecipient(ctx, \"alerts\", \u0026honeycomb.EmailRecipientArgs{\n\t\t\tAddress: pulumi.String(\"alerts@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.EmailRecipient;\nimport com.pulumi.honeycomb.EmailRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alerts = new EmailRecipient(\"alerts\", EmailRecipientArgs.builder()\n            .address(\"alerts@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alerts:\n    type: honeycomb:EmailRecipient\n    properties:\n      address: alerts@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEmail Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/emailRecipient:EmailRecipient my_recipient nx2zsegA0dZ\n```\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The email address to send the notification to.\n"
                }
            },
            "required": [
                "address"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The email address to send the notification to.\n"
                }
            },
            "requiredInputs": [
                "address"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EmailRecipient resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The email address to send the notification to.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/marker:Marker": {
            "description": "## # Resource: honeycomb.Marker\n\nCreates a marker. For more information about markers, check out [Annotate the timeline with Markers](https://docs.honeycomb.io/working-with-your-data/customizing-your-query/markers/).\n\n\u003e **Note** Destroying or replacing this resource will not delete the previously created marker. This is intentional to preserve the markers. At this time, it is not possible to remove markers using this provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst appVersion = config.require(\"appVersion\");\nconst marker = new honeycomb.Marker(\"marker\", {\n    message: `deploy ${appVersion}`,\n    type: \"deploy\",\n    url: \"http://www.example.com/\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\napp_version = config.require(\"appVersion\")\nmarker = honeycomb.Marker(\"marker\",\n    message=f\"deploy {app_version}\",\n    type=\"deploy\",\n    url=\"http://www.example.com/\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var appVersion = config.Require(\"appVersion\");\n    var marker = new Honeycomb.Marker(\"marker\", new()\n    {\n        Message = $\"deploy {appVersion}\",\n        Type = \"deploy\",\n        Url = \"http://www.example.com/\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tappVersion := cfg.Require(\"appVersion\")\n\t\t_, err := honeycomb.NewMarker(ctx, \"marker\", \u0026honeycomb.MarkerArgs{\n\t\t\tMessage: pulumi.Sprintf(\"deploy %v\", appVersion),\n\t\t\tType:    pulumi.String(\"deploy\"),\n\t\t\tUrl:     pulumi.String(\"http://www.example.com/\"),\n\t\t\tDataset: pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.Marker;\nimport com.pulumi.honeycomb.MarkerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var appVersion = config.get(\"appVersion\");\n        var marker = new Marker(\"marker\", MarkerArgs.builder()\n            .message(String.format(\"deploy %s\", appVersion))\n            .type(\"deploy\")\n            .url(\"http://www.example.com/\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  appVersion:\n    type: string\nresources:\n  marker:\n    type: honeycomb:Marker\n    properties:\n      message: deploy ${appVersion}\n      type: deploy\n      url: http://www.example.com/\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this marker is placed on.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message on the marker.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n"
                }
            },
            "required": [
                "dataset"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this marker is placed on.\n",
                    "willReplaceOnChanges": true
                },
                "message": {
                    "type": "string",
                    "description": "The message on the marker.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Marker resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this marker is placed on.\n",
                        "willReplaceOnChanges": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The message on the marker.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the marker, Honeycomb.io can display markers in different colors depending on their type.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "A target for the Marker. If you click on the Marker text, it will take you to this URL.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/markerSetting:MarkerSetting": {
            "description": "## # Resource: honeycomb.MarkerSetting\n\nCreates a marker setting. For more information about marker settings, check out the [Marker Settings API](https://docs.honeycomb.io/api/marker-settings/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst type = config.require(\"type\");\nconst markerSetting = new honeycomb.MarkerSetting(\"markerSetting\", {\n    type: type,\n    color: \"#DF4661\",\n    dataset: dataset,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ntype = config.require(\"type\")\nmarker_setting = honeycomb.MarkerSetting(\"markerSetting\",\n    type=type,\n    color=\"#DF4661\",\n    dataset=dataset)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var type = config.Require(\"type\");\n    var markerSetting = new Honeycomb.MarkerSetting(\"markerSetting\", new()\n    {\n        Type = type,\n        Color = \"#DF4661\",\n        Dataset = dataset,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_type := cfg.Require(\"type\")\n\t\t_, err := honeycomb.NewMarkerSetting(ctx, \"markerSetting\", \u0026honeycomb.MarkerSettingArgs{\n\t\t\tType:    pulumi.String(_type),\n\t\t\tColor:   pulumi.String(\"#DF4661\"),\n\t\t\tDataset: pulumi.String(dataset),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.MarkerSetting;\nimport com.pulumi.honeycomb.MarkerSettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var type = config.get(\"type\");\n        var markerSetting = new MarkerSetting(\"markerSetting\", MarkerSettingArgs.builder()\n            .type(type)\n            .color(\"#DF4661\")\n            .dataset(dataset)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  type:\n    type: string\nresources:\n  markerSetting:\n    type: honeycomb:MarkerSetting\n    properties:\n      type: ${type}\n      color: '#DF4661'\n      dataset: ${dataset}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp when the marker setting was created.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this marker setting is placed on.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp when the marker setting was last modified.\n"
                }
            },
            "required": [
                "color",
                "createdAt",
                "dataset",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this marker setting is placed on.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
                }
            },
            "requiredInputs": [
                "color",
                "dataset",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MarkerSetting resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color set for the marker as a hex color code (e.g. `#DF4661`)\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp when the marker setting was created.\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this marker setting is placed on.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the marker setting, Honeycomb.io can display markers in different colors depending on their type.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp when the marker setting was last modified.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/pagerDutyRecipient:PagerDutyRecipient": {
            "description": "## # Resource: honeycomb.PagerDutyRecipient\n\n`honeycomb.PagerDutyRecipient` allows you to define and manage a PagerDuty recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst prod_oncall = new honeycomb.PagerDutyRecipient(\"prod-oncall\", {\n    integrationKey: \"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n    integrationName: \"Production on-call notifications\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nprod_oncall = honeycomb.PagerDutyRecipient(\"prod-oncall\",\n    integration_key=\"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n    integration_name=\"Production on-call notifications\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod_oncall = new Honeycomb.PagerDutyRecipient(\"prod-oncall\", new()\n    {\n        IntegrationKey = \"cd6e8de3c857aefc950e0d5ebcb79ac2\",\n        IntegrationName = \"Production on-call notifications\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewPagerDutyRecipient(ctx, \"prod-oncall\", \u0026honeycomb.PagerDutyRecipientArgs{\n\t\t\tIntegrationKey:  pulumi.String(\"cd6e8de3c857aefc950e0d5ebcb79ac2\"),\n\t\t\tIntegrationName: pulumi.String(\"Production on-call notifications\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.PagerDutyRecipient;\nimport com.pulumi.honeycomb.PagerDutyRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod_oncall = new PagerDutyRecipient(\"prod-oncall\", PagerDutyRecipientArgs.builder()\n            .integrationKey(\"cd6e8de3c857aefc950e0d5ebcb79ac2\")\n            .integrationName(\"Production on-call notifications\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod-oncall:\n    type: honeycomb:PagerDutyRecipient\n    properties:\n      integrationKey: cd6e8de3c857aefc950e0d5ebcb79ac2\n      integrationName: Production on-call notifications\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPagerDuty Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/pagerDutyRecipient:PagerDutyRecipient my_recipient nx2zsegA0dZ\n```\n",
            "properties": {
                "integrationKey": {
                    "type": "string",
                    "description": "The key of the PagerDuty Integration to send the notification to.\n",
                    "secret": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the PagerDuty Integration to send the notification to.\n"
                }
            },
            "required": [
                "integrationKey",
                "integrationName"
            ],
            "inputProperties": {
                "integrationKey": {
                    "type": "string",
                    "description": "The key of the PagerDuty Integration to send the notification to.\n",
                    "secret": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the PagerDuty Integration to send the notification to.\n"
                }
            },
            "requiredInputs": [
                "integrationKey",
                "integrationName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PagerDutyRecipient resources.\n",
                "properties": {
                    "integrationKey": {
                        "type": "string",
                        "description": "The key of the PagerDuty Integration to send the notification to.\n",
                        "secret": true
                    },
                    "integrationName": {
                        "type": "string",
                        "description": "The name of the PagerDuty Integration to send the notification to.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/query:Query": {
            "description": "## # Resource: honeycomb.Query\n\nCreates a query in a dataset.\n\nQueries can be used by triggers and boards, or be executed via the [Query Data API](https://docs.honeycomb.io/api/query-results/).\n\n\u003e **Note** Queries can only be created or read. Any changes will result in a new query object being created, and destroying it does nothing.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst testQueryGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"duration_ms\",\n        op: \"\u003e\",\n        value: \"200\",\n    }],\n});\nconst testQueryQuery = new honeycomb.Query(\"testQueryQuery\", {\n    dataset: dataset,\n    queryJson: testQueryGetQuerySpecification.then(testQueryGetQuerySpecification =\u003e testQueryGetQuerySpecification.json),\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ntest_query_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"duration_ms\",\n        \"op\": \"\u003e\",\n        \"value\": \"200\",\n    }])\ntest_query_query = honeycomb.Query(\"testQueryQuery\",\n    dataset=dataset,\n    query_json=test_query_get_query_specification.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var testQueryGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"duration_ms\",\n                Op = \"\u003e\",\n                Value = \"200\",\n            },\n        },\n    });\n\n    var testQueryQuery = new Honeycomb.Query(\"testQueryQuery\", new()\n    {\n        Dataset = dataset,\n        QueryJson = testQueryGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\ttestQueryGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"duration_ms\",\n\t\t\t\t\tOp:     \"\u003e\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"200\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewQuery(ctx, \"testQueryQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tQueryJson: pulumi.String(testQueryGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var testQueryGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"duration_ms\")\n                .op(\"\u003e\")\n                .value(\"200\")\n                .build())\n            .build());\n\n        var testQueryQuery = new Query(\"testQueryQuery\", QueryArgs.builder()\n            .dataset(dataset)\n            .queryJson(testQueryGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  testQueryQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${dataset}\n      queryJson: ${testQueryGetQuerySpecification.json}\nvariables:\n  testQueryGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: duration_ms\n            op: '\u003e'\n            value: '200'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nQueries cannot be imported.\n\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is added to.\n"
                },
                "queryJson": {
                    "type": "string",
                    "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification). While the JSON can be constructed manually, it is easiest to use the `honeycomb.GetQuerySpecification` data source.\n"
                }
            },
            "required": [
                "dataset",
                "queryJson"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is added to.\n",
                    "willReplaceOnChanges": true
                },
                "queryJson": {
                    "type": "string",
                    "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification). While the JSON can be constructed manually, it is easiest to use the `honeycomb.GetQuerySpecification` data source.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataset",
                "queryJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Query resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this query is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryJson": {
                        "type": "string",
                        "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification). While the JSON can be constructed manually, it is easiest to use the `honeycomb.GetQuerySpecification` data source.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/queryAnnotation:QueryAnnotation": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst testQueryGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"duration_ms\",\n        op: \"\u003e\",\n        value: \"10\",\n    }],\n});\nconst testQueryQuery = new honeycomb.Query(\"testQueryQuery\", {\n    dataset: dataset,\n    queryJson: testQueryGetQuerySpecification.then(testQueryGetQuerySpecification =\u003e testQueryGetQuerySpecification.json),\n});\nconst testAnnotation = new honeycomb.QueryAnnotation(\"testAnnotation\", {\n    dataset: dataset,\n    queryId: testQueryQuery.id,\n    description: \"Describes my cool query (optional)\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\ntest_query_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"duration_ms\",\n        \"op\": \"\u003e\",\n        \"value\": \"10\",\n    }])\ntest_query_query = honeycomb.Query(\"testQueryQuery\",\n    dataset=dataset,\n    query_json=test_query_get_query_specification.json)\ntest_annotation = honeycomb.QueryAnnotation(\"testAnnotation\",\n    dataset=dataset,\n    query_id=test_query_query.id,\n    description=\"Describes my cool query (optional)\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var testQueryGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"duration_ms\",\n                Op = \"\u003e\",\n                Value = \"10\",\n            },\n        },\n    });\n\n    var testQueryQuery = new Honeycomb.Query(\"testQueryQuery\", new()\n    {\n        Dataset = dataset,\n        QueryJson = testQueryGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var testAnnotation = new Honeycomb.QueryAnnotation(\"testAnnotation\", new()\n    {\n        Dataset = dataset,\n        QueryId = testQueryQuery.Id,\n        Description = \"Describes my cool query (optional)\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\ttestQueryGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"duration_ms\",\n\t\t\t\t\tOp:     \"\u003e\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"10\"),\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttestQueryQuery, err := honeycomb.NewQuery(ctx, \"testQueryQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tQueryJson: pulumi.String(testQueryGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewQueryAnnotation(ctx, \"testAnnotation\", \u0026honeycomb.QueryAnnotationArgs{\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tQueryId:     testQueryQuery.ID(),\n\t\t\tDescription: pulumi.String(\"Describes my cool query (optional)\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport com.pulumi.honeycomb.QueryAnnotation;\nimport com.pulumi.honeycomb.QueryAnnotationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var testQueryGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"duration_ms\")\n                .op(\"\u003e\")\n                .value(10)\n                .build())\n            .build());\n\n        var testQueryQuery = new Query(\"testQueryQuery\", QueryArgs.builder()\n            .dataset(dataset)\n            .queryJson(testQueryGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var testAnnotation = new QueryAnnotation(\"testAnnotation\", QueryAnnotationArgs.builder()\n            .dataset(dataset)\n            .queryId(testQueryQuery.id())\n            .description(\"Describes my cool query (optional)\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  testQueryQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${dataset}\n      queryJson: ${testQueryGetQuerySpecification.json}\n  testAnnotation:\n    type: honeycomb:QueryAnnotation\n    properties:\n      dataset: ${dataset}\n      queryId: ${testQueryQuery.id}\n      description: Describes my cool query (optional)\nvariables:\n  testQueryGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: duration_ms\n            op: '\u003e'\n            value: 10\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nQuery annotations cannot be imported.\n\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is added to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description for the query annotation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n"
                }
            },
            "required": [
                "dataset",
                "name",
                "queryId"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is added to.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description for the query annotation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dataset",
                "queryId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QueryAnnotation resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this query is added to.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the query annotation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the query annotation that will display in the Honeycomb UI.\n"
                    },
                    "queryId": {
                        "type": "string",
                        "description": "The ID of the query that the annotation will be created on. Note that a query can have more than one annotation.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/sLO:SLO": {
            "description": "## # Resource: honeycomb.SLO\n\nCreates a service level objective (SLO). For more information about SLOs, check out [Set Service Level Objectives (SLOs)](https://docs.honeycomb.io/working-with-your-data/slos/).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst requestLatencySli = new honeycomb.DerivedColumn(\"requestLatencySli\", {\n    alias: \"sli.request_latency\",\n    description: \"SLI: request latency less than 300ms\",\n    dataset: _var.dataset,\n    expression: fs.readFileSync(\"../sli/sli.request_latency.honeycomb\", \"utf8\"),\n});\nconst slo = new honeycomb.SLO(\"slo\", {\n    description: \"example of an SLO\",\n    dataset: _var.dataset,\n    sli: requestLatencySli.alias,\n    targetPercentage: 99.9,\n    timePeriod: 30,\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nrequest_latency_sli = honeycomb.DerivedColumn(\"requestLatencySli\",\n    alias=\"sli.request_latency\",\n    description=\"SLI: request latency less than 300ms\",\n    dataset=var[\"dataset\"],\n    expression=(lambda path: open(path).read())(\"../sli/sli.request_latency.honeycomb\"))\nslo = honeycomb.SLO(\"slo\",\n    description=\"example of an SLO\",\n    dataset=var[\"dataset\"],\n    sli=request_latency_sli.alias,\n    target_percentage=99.9,\n    time_period=30)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var requestLatencySli = new Honeycomb.DerivedColumn(\"requestLatencySli\", new()\n    {\n        Alias = \"sli.request_latency\",\n        Description = \"SLI: request latency less than 300ms\",\n        Dataset = @var.Dataset,\n        Expression = File.ReadAllText(\"../sli/sli.request_latency.honeycomb\"),\n    });\n\n    var slo = new Honeycomb.SLO(\"slo\", new()\n    {\n        Description = \"example of an SLO\",\n        Dataset = @var.Dataset,\n        Sli = requestLatencySli.Alias,\n        TargetPercentage = 99.9,\n        TimePeriod = 30,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trequestLatencySli, err := honeycomb.NewDerivedColumn(ctx, \"requestLatencySli\", \u0026honeycomb.DerivedColumnArgs{\n\t\t\tAlias:       pulumi.String(\"sli.request_latency\"),\n\t\t\tDescription: pulumi.String(\"SLI: request latency less than 300ms\"),\n\t\t\tDataset:     pulumi.Any(_var.Dataset),\n\t\t\tExpression:  pulumi.String(readFileOrPanic(\"../sli/sli.request_latency.honeycomb\")),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewSLO(ctx, \"slo\", \u0026honeycomb.SLOArgs{\n\t\t\tDescription:      pulumi.String(\"example of an SLO\"),\n\t\t\tDataset:          pulumi.Any(_var.Dataset),\n\t\t\tSli:              requestLatencySli.Alias,\n\t\t\tTargetPercentage: pulumi.Float64(99.9),\n\t\t\tTimePeriod:       pulumi.Int(30),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.DerivedColumn;\nimport com.pulumi.honeycomb.DerivedColumnArgs;\nimport com.pulumi.honeycomb.SLO;\nimport com.pulumi.honeycomb.SLOArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var requestLatencySli = new DerivedColumn(\"requestLatencySli\", DerivedColumnArgs.builder()\n            .alias(\"sli.request_latency\")\n            .description(\"SLI: request latency less than 300ms\")\n            .dataset(var_.dataset())\n            .expression(Files.readString(Paths.get(\"../sli/sli.request_latency.honeycomb\")))\n            .build());\n\n        var slo = new SLO(\"slo\", SLOArgs.builder()\n            .description(\"example of an SLO\")\n            .dataset(var_.dataset())\n            .sli(requestLatencySli.alias())\n            .targetPercentage(99.9)\n            .timePeriod(30)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  requestLatencySli:\n    type: honeycomb:DerivedColumn\n    properties:\n      alias: sli.request_latency\n      description: 'SLI: request latency less than 300ms'\n      dataset: ${var.dataset}\n      # heredoc also works\n      expression:\n        fn::readFile: ../sli/sli.request_latency.honeycomb\n  slo:\n    type: honeycomb:SLO\n    properties:\n      description: example of an SLO\n      dataset: ${var.dataset}\n      sli: ${requestLatencySli.alias}\n      targetPercentage: 99.9\n      timePeriod: 30\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSLOs can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/sLO:SLO my_slo my-dataset/bj9BwOb1uKz\n```\nYou can find the ID in the URL bar when visiting the SLO from the UI.\n\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the SLO's intent and context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO.\n"
                },
                "sli": {
                    "type": "string",
                    "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
                },
                "targetPercentage": {
                    "type": "number",
                    "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
                },
                "timePeriod": {
                    "type": "integer",
                    "description": "The time period, in days, over which your SLO will be evaluated.\n"
                }
            },
            "required": [
                "dataset",
                "name",
                "sli",
                "targetPercentage",
                "timePeriod"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "A description of the SLO's intent and context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SLO.\n"
                },
                "sli": {
                    "type": "string",
                    "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
                },
                "targetPercentage": {
                    "type": "number",
                    "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
                },
                "timePeriod": {
                    "type": "integer",
                    "description": "The time period, in days, over which your SLO will be evaluated.\n"
                }
            },
            "requiredInputs": [
                "dataset",
                "sli",
                "targetPercentage",
                "timePeriod"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SLO resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this SLO is created in. Must be the same dataset as the SLI unless the SLI's dataset is `\"__all__\"`.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the SLO's intent and context.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SLO.\n"
                    },
                    "sli": {
                        "type": "string",
                        "description": "The alias of the Derived Column that will be used as the SLI to indicate event success.\nThe derived column used as the SLI must be in the same dataset as the SLO. Additionally,\nthe column evaluation should consistently return nil, true, or false, as these are the only valid values for an SLI.\n"
                    },
                    "targetPercentage": {
                        "type": "number",
                        "description": "The percentage of qualified events that you expect to succeed during the `time_period`.\n"
                    },
                    "timePeriod": {
                        "type": "integer",
                        "description": "The time period, in days, over which your SLO will be evaluated.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/slackRecipient:SlackRecipient": {
            "description": "## # Resource: honeycomb.SlackRecipient\n\n`honeycomb.SlackRecipient` allows you to define and manage a Slack channel or user recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst alerts = new honeycomb.SlackRecipient(\"alerts\", {channel: \"#alerts\"});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nalerts = honeycomb.SlackRecipient(\"alerts\", channel=\"#alerts\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var alerts = new Honeycomb.SlackRecipient(\"alerts\", new()\n    {\n        Channel = \"#alerts\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewSlackRecipient(ctx, \"alerts\", \u0026honeycomb.SlackRecipientArgs{\n\t\t\tChannel: pulumi.String(\"#alerts\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.SlackRecipient;\nimport com.pulumi.honeycomb.SlackRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var alerts = new SlackRecipient(\"alerts\", SlackRecipientArgs.builder()\n            .channel(\"#alerts\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  alerts:\n    type: honeycomb:SlackRecipient\n    properties:\n      channel: '#alerts'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSlack Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/slackRecipient:SlackRecipient my_recipient nx2zsegA0dZ\n```\n",
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@`.\n"
                }
            },
            "required": [
                "channel"
            ],
            "inputProperties": {
                "channel": {
                    "type": "string",
                    "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@`.\n"
                }
            },
            "requiredInputs": [
                "channel"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SlackRecipient resources.\n",
                "properties": {
                    "channel": {
                        "type": "string",
                        "description": "The Slack channel or username to send the notification to. Must begin with `#` or `@`.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/trigger:Trigger": {
            "description": "## # Resource: honeycomb.Trigger\n\nCreates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).\n\n## Example Usage\n\n### Basic Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst exampleGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    timeRange: 1800,\n});\nconst exampleQuery = new honeycomb.Query(\"exampleQuery\", {\n    dataset: dataset,\n    queryJson: exampleGetQuerySpecification.then(exampleGetQuerySpecification =\u003e exampleGetQuerySpecification.json),\n});\nconst exampleTrigger = new honeycomb.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryId: exampleQuery.id,\n    dataset: dataset,\n    frequency: 600,\n    alertType: \"on_change\",\n    threshold: {\n        op: \"\u003e\",\n        value: 1000,\n    },\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"marker\",\n            target: \"Trigger - requests are slow\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nexample_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    time_range=1800)\nexample_query = honeycomb.Query(\"exampleQuery\",\n    dataset=dataset,\n    query_json=example_get_query_specification.json)\nexample_trigger = honeycomb.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_id=example_query.id,\n    dataset=dataset,\n    frequency=600,\n    alert_type=\"on_change\",\n    threshold={\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    },\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"marker\",\n            \"target\": \"Trigger - requests are slow\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var exampleGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        TimeRange = 1800,\n    });\n\n    var exampleQuery = new Honeycomb.Query(\"exampleQuery\", new()\n    {\n        Dataset = dataset,\n        QueryJson = exampleGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var exampleTrigger = new Honeycomb.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryId = exampleQuery.Id,\n        Dataset = dataset,\n        Frequency = 600,\n        AlertType = \"on_change\",\n        Threshold = new Honeycomb.Inputs.TriggerThresholdArgs\n        {\n            Op = \"\u003e\",\n            Value = 1000,\n        },\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.TriggerRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycomb.Inputs.TriggerRecipientArgs\n            {\n                Type = \"marker\",\n                Target = \"Trigger - requests are slow\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\texampleGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeRange: pulumi.IntRef(1800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuery, err := honeycomb.NewQuery(ctx, \"exampleQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tQueryJson: pulumi.String(exampleGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycomb.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryId:     exampleQuery.ID(),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Int(600),\n\t\t\tAlertType:   pulumi.String(\"on_change\"),\n\t\t\tThreshold: \u0026honeycomb.TriggerThresholdArgs{\n\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t},\n\t\t\tRecipients: honeycomb.TriggerRecipientArray{\n\t\t\t\t\u0026honeycomb.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycomb.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"marker\"),\n\t\t\t\t\tTarget: pulumi.String(\"Trigger - requests are slow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport com.pulumi.honeycomb.Trigger;\nimport com.pulumi.honeycomb.TriggerArgs;\nimport com.pulumi.honeycomb.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycomb.inputs.TriggerRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var exampleGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .timeRange(1800)\n            .build());\n\n        var exampleQuery = new Query(\"exampleQuery\", QueryArgs.builder()\n            .dataset(dataset)\n            .queryJson(exampleGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryId(exampleQuery.id())\n            .dataset(dataset)\n            .frequency(600)\n            .alertType(\"on_change\")\n            .threshold(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(            \n                TriggerRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                TriggerRecipientArgs.builder()\n                    .type(\"marker\")\n                    .target(\"Trigger - requests are slow\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${dataset}\n      queryJson: ${exampleGetQuerySpecification.json}\n  exampleTrigger:\n    type: honeycomb:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryId: ${exampleQuery.id}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      alertType: on_change # on_change is default, on_true can refers to the \"Alert on True\" checkbox in the UI\n      threshold:\n        op: '\u003e'\n        value: 1000\n      # zero or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: marker\n          target: Trigger - requests are slow\nvariables:\n  exampleGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        timeRange: 1800\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Example with PagerDuty Recipient and Severity\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst pd-prod = honeycomb.GetRecipient({\n    type: \"pagerduty\",\n    detailFilter: {\n        name: \"integration_name\",\n        value: \"Prod On-Call\",\n    },\n});\nconst exampleGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n});\nconst exampleQuery = new honeycomb.Query(\"exampleQuery\", {\n    dataset: dataset,\n    queryJson: exampleGetQuerySpecification.then(exampleGetQuerySpecification =\u003e exampleGetQuerySpecification.json),\n});\nconst exampleTrigger = new honeycomb.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryId: exampleQuery.id,\n    dataset: dataset,\n    frequency: 600,\n    threshold: {\n        op: \"\u003e\",\n        value: 1000,\n    },\n    recipients: [{\n        id: pd_prod.then(pd_prod =\u003e pd_prod.id),\n        notificationDetails: {\n            pagerdutySeverity: \"info\",\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\npd_prod = honeycomb.get_recipient(type=\"pagerduty\",\n    detail_filter={\n        \"name\": \"integration_name\",\n        \"value\": \"Prod On-Call\",\n    })\nexample_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }])\nexample_query = honeycomb.Query(\"exampleQuery\",\n    dataset=dataset,\n    query_json=example_get_query_specification.json)\nexample_trigger = honeycomb.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_id=example_query.id,\n    dataset=dataset,\n    frequency=600,\n    threshold={\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    },\n    recipients=[{\n        \"id\": pd_prod.id,\n        \"notification_details\": {\n            \"pagerduty_severity\": \"info\",\n        },\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var pd_prod = Honeycomb.GetRecipient.Invoke(new()\n    {\n        Type = \"pagerduty\",\n        DetailFilter = new Honeycomb.Inputs.GetRecipientDetailFilterInputArgs\n        {\n            Name = \"integration_name\",\n            Value = \"Prod On-Call\",\n        },\n    });\n\n    var exampleGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n    });\n\n    var exampleQuery = new Honeycomb.Query(\"exampleQuery\", new()\n    {\n        Dataset = dataset,\n        QueryJson = exampleGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    });\n\n    var exampleTrigger = new Honeycomb.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryId = exampleQuery.Id,\n        Dataset = dataset,\n        Frequency = 600,\n        Threshold = new Honeycomb.Inputs.TriggerThresholdArgs\n        {\n            Op = \"\u003e\",\n            Value = 1000,\n        },\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.TriggerRecipientArgs\n            {\n                Id = pd_prod.Apply(pd_prod =\u003e pd_prod.Apply(getRecipientResult =\u003e getRecipientResult.Id)),\n                NotificationDetails = new Honeycomb.Inputs.TriggerRecipientNotificationDetailsArgs\n                {\n                    PagerdutySeverity = \"info\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tpd_prod, err := honeycomb.GetRecipient(ctx, \u0026honeycomb.GetRecipientArgs{\n\t\t\tType: \"pagerduty\",\n\t\t\tDetailFilter: honeycomb.GetRecipientDetailFilter{\n\t\t\t\tName:  \"integration_name\",\n\t\t\t\tValue: pulumi.StringRef(\"Prod On-Call\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texampleQuery, err := honeycomb.NewQuery(ctx, \"exampleQuery\", \u0026honeycomb.QueryArgs{\n\t\t\tDataset:   pulumi.String(dataset),\n\t\t\tQueryJson: pulumi.String(exampleGetQuerySpecification.Json),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycomb.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryId:     exampleQuery.ID(),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Int(600),\n\t\t\tThreshold: \u0026honeycomb.TriggerThresholdArgs{\n\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t},\n\t\t\tRecipients: honeycomb.TriggerRecipientArray{\n\t\t\t\t\u0026honeycomb.TriggerRecipientArgs{\n\t\t\t\t\tId: pulumi.String(pd_prod.Id),\n\t\t\t\t\tNotificationDetails: \u0026honeycomb.TriggerRecipientNotificationDetailsArgs{\n\t\t\t\t\t\tPagerdutySeverity: pulumi.String(\"info\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetRecipientArgs;\nimport com.pulumi.honeycomb.inputs.GetRecipientDetailFilterArgs;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Query;\nimport com.pulumi.honeycomb.QueryArgs;\nimport com.pulumi.honeycomb.Trigger;\nimport com.pulumi.honeycomb.TriggerArgs;\nimport com.pulumi.honeycomb.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycomb.inputs.TriggerRecipientArgs;\nimport com.pulumi.honeycomb.inputs.TriggerRecipientNotificationDetailsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var pd-prod = HoneycombFunctions.GetRecipient(GetRecipientArgs.builder()\n            .type(\"pagerduty\")\n            .detailFilter(GetRecipientDetailFilterArgs.builder()\n                .name(\"integration_name\")\n                .value(\"Prod On-Call\")\n                .build())\n            .build());\n\n        final var exampleGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .build());\n\n        var exampleQuery = new Query(\"exampleQuery\", QueryArgs.builder()\n            .dataset(dataset)\n            .queryJson(exampleGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryId(exampleQuery.id())\n            .dataset(dataset)\n            .frequency(600)\n            .threshold(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(TriggerRecipientArgs.builder()\n                .id(pd_prod.id())\n                .notificationDetails(TriggerRecipientNotificationDetailsArgs.builder()\n                    .pagerdutySeverity(\"info\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleQuery:\n    type: honeycomb:Query\n    properties:\n      dataset: ${dataset}\n      queryJson: ${exampleGetQuerySpecification.json}\n  exampleTrigger:\n    type: honeycomb:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryId: ${exampleQuery.id}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      threshold:\n        op: '\u003e'\n        value: 1000\n      recipients:\n        - id: ${[\"pd-prod\"].id}\n          notificationDetails:\n            pagerdutySeverity: info\nvariables:\n  pd-prod:\n    fn::invoke:\n      Function: honeycomb:GetRecipient\n      Arguments:\n        type: pagerduty\n        detailFilter:\n          name: integration_name\n          value: Prod On-Call\n  exampleGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTriggers can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G\n```\nYou can find the ID in the URL bar when visiting the trigger from the UI.\n\n",
            "properties": {
                "alertType": {
                    "type": "string",
                    "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this trigger is associated with.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the trigger.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold. This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration. Defaults to 900 (15 minutes).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the trigger.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the Query that the Trigger will execute.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration (`time_range` in the specification) cannot be more than four times the trigger frequency. For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                },
                "threshold": {
                    "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                    "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                }
            },
            "required": [
                "dataset",
                "frequency",
                "name",
                "queryId",
                "threshold"
            ],
            "inputProperties": {
                "alertType": {
                    "type": "string",
                    "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this trigger is associated with.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the trigger.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold. This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration. Defaults to 900 (15 minutes).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the trigger.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the Query that the Trigger will execute.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration (`time_range` in the specification) cannot be more than four times the trigger frequency. For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                },
                "threshold": {
                    "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                    "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                }
            },
            "requiredInputs": [
                "dataset",
                "queryId",
                "threshold"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Trigger resources.\n",
                "properties": {
                    "alertType": {
                        "type": "string",
                        "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this trigger is associated with.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the trigger.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold. This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration. Defaults to 900 (15 minutes).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the trigger.\n"
                    },
                    "queryId": {
                        "type": "string",
                        "description": "The ID of the Query that the Trigger will execute.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                        },
                        "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration (`time_range` in the specification) cannot be more than four times the trigger frequency. For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                    },
                    "threshold": {
                        "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                        "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/webhookRecipient:WebhookRecipient": {
            "description": "## # Resource: honeycomb.WebhookRecipient\n\n`honeycomb.WebhookRecipient` allows you to define and manage a Webhook recipient that can be used by Triggers or BurnAlerts notifications.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst prod = new honeycomb.WebhookRecipient(\"prod\", {\n    secret: \"a63dab148496ecbe04a1a802ca9b95b8\",\n    url: \"https://my.url.corp.net\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nprod = honeycomb.WebhookRecipient(\"prod\",\n    secret=\"a63dab148496ecbe04a1a802ca9b95b8\",\n    url=\"https://my.url.corp.net\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = new Honeycomb.WebhookRecipient(\"prod\", new()\n    {\n        Secret = \"a63dab148496ecbe04a1a802ca9b95b8\",\n        Url = \"https://my.url.corp.net\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewWebhookRecipient(ctx, \"prod\", \u0026honeycomb.WebhookRecipientArgs{\n\t\t\tSecret: pulumi.String(\"a63dab148496ecbe04a1a802ca9b95b8\"),\n\t\t\tUrl:    pulumi.String(\"https://my.url.corp.net\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.WebhookRecipient;\nimport com.pulumi.honeycomb.WebhookRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prod = new WebhookRecipient(\"prod\", WebhookRecipientArgs.builder()\n            .secret(\"a63dab148496ecbe04a1a802ca9b95b8\")\n            .url(\"https://my.url.corp.net\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  prod:\n    type: honeycomb:WebhookRecipient\n    properties:\n      secret: a63dab148496ecbe04a1a802ca9b95b8\n      url: https://my.url.corp.net\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhook Recipients can be imported by their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/webhookRecipient:WebhookRecipient my_recipient nx2zsegA0dZ\n```\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Webhook Integration to create.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret to include when sending the notification to the webhook.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint to send the notification to.\n"
                }
            },
            "required": [
                "name",
                "secret",
                "url"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Webhook Integration to create.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret to include when sending the notification to the webhook.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint to send the notification to.\n"
                }
            },
            "requiredInputs": [
                "secret",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhookRecipient resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Webhook Integration to create.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret to include when sending the notification to the webhook.\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the endpoint to send the notification to.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "honeycomb:index/getDatasets:GetDatasets": {
            "description": "## # Data Source: honeycomb.GetDatasets\n\nThe datasets data source allows the datasets of an account to be retrieved.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetDatasets.\n",
                "properties": {
                    "startsWith": {
                        "type": "string",
                        "description": "Only return datasets starting with the given value.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetDatasets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the dataset names.\n"
                    },
                    "slugs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the dataset slugs.\n"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "names",
                    "slugs",
                    "id"
                ]
            }
        },
        "honeycomb:index/getQueryResult:GetQueryResult": {
            "inputs": {
                "description": "A collection of arguments for invoking GetQueryResult.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this query is associated with.\n"
                    },
                    "queryJson": {
                        "type": "string",
                        "description": "A JSON object describing the query according to the Query Specification. While the JSON can be constructed manually, it is easiest to use the honeycomb.GetQuerySpecification data source.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "queryJson"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetQueryResult.\n",
                "properties": {
                    "dataset": {
                        "type": "string"
                    },
                    "graphImageUrl": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "queryId": {
                        "type": "string",
                        "description": "The ID of the Query created and executed to obtain the result.\n"
                    },
                    "queryJson": {
                        "type": "string"
                    },
                    "queryUrl": {
                        "type": "string",
                        "description": "The permalink to the executed query's results.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "graphImageUrl",
                    "queryId",
                    "queryJson",
                    "queryUrl",
                    "results",
                    "id"
                ]
            }
        },
        "honeycomb:index/getQuerySpecification:GetQuerySpecification": {
            "description": "## # Data Source: honeycomb.GetQuerySpecification\n\nGenerates a [Query Specificaiton](https://docs.honeycomb.io/api/query-specification/) in JSON format.\n\nThis is a data source which can be used to construct a JSON representation of a Honeycomb [Query Specification](https://docs.honeycomb.io/api/query-specification/). The `json` attribute contains a serialized JSON representation which can be passed to the `query_json` field of the `honeycomb.Query` resource for use in boards and triggers.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst example = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [\n        {\n            column: \"trace.parent_id\",\n            op: \"does-not-exist\",\n        },\n        {\n            column: \"app.tenant\",\n            op: \"=\",\n            value: \"ThatSpecialTenant\",\n        },\n    ],\n    filterCombination: \"AND\",\n    breakdowns: [\"app.tenant\"],\n    timeRange: 28800,\n});\nexport const jsonQuery = example.then(example =\u003e example.json);\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nexample = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[\n        {\n            \"column\": \"trace.parent_id\",\n            \"op\": \"does-not-exist\",\n        },\n        {\n            \"column\": \"app.tenant\",\n            \"op\": \"=\",\n            \"value\": \"ThatSpecialTenant\",\n        },\n    ],\n    filter_combination=\"AND\",\n    breakdowns=[\"app.tenant\"],\n    time_range=28800)\npulumi.export(\"jsonQuery\", example.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"app.tenant\",\n                Op = \"=\",\n                Value = \"ThatSpecialTenant\",\n            },\n        },\n        FilterCombination = \"AND\",\n        Breakdowns = new[]\n        {\n            \"app.tenant\",\n        },\n        TimeRange = 28800,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"jsonQuery\"] = example.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tColumn: \"app.tenant\",\n\t\t\t\t\tOp:     \"=\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"ThatSpecialTenant\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterCombination: pulumi.StringRef(\"AND\"),\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.tenant\",\n\t\t\t},\n\t\t\tTimeRange: pulumi.IntRef(28800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"jsonQuery\", example.Json)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(            \n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"trace.parent_id\")\n                    .op(\"does-not-exist\")\n                    .build(),\n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"app.tenant\")\n                    .op(\"=\")\n                    .value(\"ThatSpecialTenant\")\n                    .build())\n            .filterCombination(\"AND\")\n            .breakdowns(\"app.tenant\")\n            .timeRange(28800)\n            .build());\n\n        ctx.export(\"jsonQuery\", example.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n          - column: app.tenant\n            op: =\n            value: ThatSpecialTenant\n        filterCombination: AND\n        breakdowns:\n          - app.tenant\n        timeRange: 28800\noutputs:\n  jsonQuery: ${example.json}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetQuerySpecification.\n",
                "properties": {
                    "breakdowns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fields to group by.\n"
                    },
                    "calculations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation"
                        },
                        "description": "Zero or more configuration blocks (described below) with the calculations that should be displayed. If no calculations are specified, `COUNT` will be used.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "The absolute end time of the query in Unix Time (= seconds since epoch).\n"
                    },
                    "filterCombination": {
                        "type": "string",
                        "description": "How to combine multiple filters, either `AND` (default) or `OR`.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter"
                        },
                        "description": "Zero or more configuration blocks (described below) with the filters that should be applied.\n"
                    },
                    "granularity": {
                        "type": "integer",
                        "description": "The time resolution of the query’s graph, in seconds. Valid values must be in between the query’s time range /10 at maximum, and /1000 at minimum.\n\n\u003e **NOTE** It is not allowed to specify all three of `time_range`, `start_time` and `end_time`. For more details about specifying time windows, check [Query specification: A caveat on time](https://docs.honeycomb.io/api/query-specification/#a-caveat-on-time).\n"
                    },
                    "havings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving"
                        },
                        "description": "Zero or more filters used to restrict returned groups in the query result.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of query results, must be between 1 and 1000.\n"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder"
                        },
                        "description": "Zero or more configuration blocks (described below) describing how to order the query results. Each term must appear in either `calculation` or `breakdowns`.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "The absolute start time of the query in Unix Time (= seconds since epoch).\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "The time range of the query in seconds, defaults to two hours.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetQuerySpecification.\n",
                "properties": {
                    "breakdowns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "calculations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation"
                        }
                    },
                    "endTime": {
                        "type": "integer"
                    },
                    "filterCombination": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter"
                        }
                    },
                    "granularity": {
                        "type": "integer"
                    },
                    "havings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification), can be used as input for other resources.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder"
                        }
                    },
                    "startTime": {
                        "type": "integer"
                    },
                    "timeRange": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "json",
                    "id"
                ]
            }
        },
        "honeycomb:index/getRecipient:GetRecipient": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  exampleTrigger:\n    type: honeycomb:Trigger\n    properties:\n      queryJson: ${exampleGetQuerySpecification.json}\n      dataset: ${var.dataset}\n      threshold:\n        op: '\u003e'\n        value: 1000\n      recipients:\n        - type: email\n          target: hello@example.com\n        - id: ${slack.id}\nvariables:\n  slack:\n    fn::invoke:\n      Function: honeycomb:GetRecipient\n      Arguments:\n        type: slack\n        detailFilter:\n          name: channel\n          value: '#honeycomb-triggers'\n  exampleGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetRecipient.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "Deprecated: recipients are now a Team-level construct. Any provided value will be ignored.\n",
                        "deprecationMessage": "Recipients are now a Team-level construct. The provided 'dataset' value is being ignored and should be removed."
                    },
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetRecipientDetailFilter:GetRecipientDetailFilter",
                        "description": "a block to further filter recipients as described below.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Deprecated: use `detail_filter` instead. The target of the recipient, this has another meaning depending on the type of recipient (see the table below).\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n",
                        "deprecationMessage": "Use of 'target' has been replaced by 'detail_filter'."
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetRecipient.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The email recipient's address -- if of type `email`.\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "The Slack recipient's channel -- if of type `slack`.\n"
                    },
                    "dataset": {
                        "type": "string",
                        "deprecationMessage": "Recipients are now a Team-level construct. The provided 'dataset' value is being ignored and should be removed."
                    },
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetRecipientDetailFilter:GetRecipientDetailFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationKey": {
                        "type": "string",
                        "description": "(Sensitive) The PagerDuty recipient's integration key -- if of type `pagerduty`.\n",
                        "secret": true
                    },
                    "integrationName": {
                        "type": "string",
                        "description": "The PagerDuty recipient's inregration name -- if of type `pagerduty`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The webhook recipient's name -- if of type `webhook`.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "(Sensitive) The webhook recipient's secret -- if of type `webhook`.\n",
                        "secret": true
                    },
                    "target": {
                        "type": "string",
                        "deprecationMessage": "Use of 'target' has been replaced by 'detail_filter'."
                    },
                    "type": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "The webhook recipient's URL - if of type `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "channel",
                    "integrationKey",
                    "integrationName",
                    "name",
                    "secret",
                    "type",
                    "url",
                    "id"
                ]
            }
        },
        "honeycomb:index/getRecipients:GetRecipients": {
            "description": "## # Data Source: honeycomb.GetRecipients\n\n`honeycomb.GetRecipients` data source provides recipient IDs of recipients matching a set of criteria.\n\n## Example Usage\n\n### Get all recipients\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst all = honeycomb.GetRecipients({});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nall = honeycomb.get_recipients()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycomb.GetRecipients.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetRecipients(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetRecipientsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombFunctions.GetRecipients();\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: honeycomb:GetRecipients\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Get all email recipients matching a specific domain\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst example-dot-com = honeycomb.GetRecipients({\n    detailFilter: {\n        name: \"address\",\n        valueRegex: \".*@example.com\",\n    },\n    type: \"email\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nexample_dot_com = honeycomb.get_recipients(detail_filter={\n        \"name\": \"address\",\n        \"value_regex\": \".*@example.com\",\n    },\n    type=\"email\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example_dot_com = Honeycomb.GetRecipients.Invoke(new()\n    {\n        DetailFilter = new Honeycomb.Inputs.GetRecipientsDetailFilterInputArgs\n        {\n            Name = \"address\",\n            ValueRegex = \".*@example.com\",\n        },\n        Type = \"email\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetRecipients(ctx, \u0026honeycomb.GetRecipientsArgs{\n\t\t\tDetailFilter: honeycomb.GetRecipientsDetailFilter{\n\t\t\t\tName:       \"address\",\n\t\t\t\tValueRegex: pulumi.StringRef(\".*@example.com\"),\n\t\t\t},\n\t\t\tType: pulumi.StringRef(\"email\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetRecipientsArgs;\nimport com.pulumi.honeycomb.inputs.GetRecipientsDetailFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example-dot-com = HoneycombFunctions.GetRecipients(GetRecipientsArgs.builder()\n            .detailFilter(GetRecipientsDetailFilterArgs.builder()\n                .name(\"address\")\n                .valueRegex(\".*@example.com\")\n                .build())\n            .type(\"email\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example-dot-com:\n    fn::invoke:\n      Function: honeycomb:GetRecipients\n      Arguments:\n        detailFilter:\n          name: address\n          valueRegex: .*@example.com\n        type: email\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetRecipients.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetRecipientsDetailFilter:GetRecipientsDetailFilter",
                        "description": "a block to further filter recipients as described below. `type` must be set when providing a filter.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of recipient, allowed types are `email`, `pagerduty`, `slack` and `webhook`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetRecipients.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetRecipientsDetailFilter:GetRecipientsDetailFilter"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of all the recipient IDs found.\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "ids",
                    "id"
                ]
            }
        },
        "honeycomb:index/getTriggerRecipient:GetTriggerRecipient": {
            "description": "## # Data Source: honeycomb.GetTriggerRecipient\n\nSearch the triggers of a dataset for a trigger recipient. The ID of the existing trigger recipient can be used when adding trigger recipients to new triggers.\n\n\u003e **Deprecated** Use the `honeycomb.GetRecipient` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycomb:Trigger\n    properties:\n      queryJson: ${exampleGetQuerySpecification.json}\n      dataset: ${dataset}\n      threshold:\n        op: '\u003e'\n        value: 1000\n      recipients:\n        - type: email\n          target: hello@example.com\n        - id: ${slack.id}\nvariables:\n  slack:\n    fn::invoke:\n      Function: honeycomb:GetTriggerRecipient\n      Arguments:\n        dataset: ${dataset}\n        type: slack\n        target: honeycomb-triggers\n  exampleGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetTriggerRecipient.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "Search through all triggers linked to this dataset.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Target of the trigger, this has another meaning depending on the type of recipient (see the table below).\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of recipient, allowed types are `email`, `marker`, `pagerduty`, `slack` and `webhook`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetTriggerRecipient.\n",
                "properties": {
                    "dataset": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "target": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "type",
                    "id"
                ]
            }
        }
    }
}