{
    "name": "honeycomb",
    "displayName": "Honeycomb",
    "description": "A Pulumi package for creating and managing honeycomb cloud resources.",
    "keywords": [
        "thejokersthief",
        "honeycomb",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`honeycombio` Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio).",
    "repository": "https://github.com/thejokersthief/pulumi-honeycomb",
    "publisher": "thejokersthief",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@thejokersthief/pulumi-honeycomb",
            "packageDescription": "A Pulumi package for creating and managing honeycomb cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-honeycomb` repo](https://github.com/thejokersthief/pulumi-honeycomb/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "thejokersthief-pulumi-honeycomb",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/honeycombio/terraform-provider-honeycombio)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-honeycomb` repo](https://github.com/thejokersthief/pulumi-honeycomb/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-honeycombio` repo](https://github.com/honeycombio/terraform-provider-honeycombio/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
                "secret": true
            },
            "apiKeyId": {
                "type": "string",
                "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
            },
            "apiKeySecret": {
                "type": "string",
                "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        }
    },
    "types": {
        "honeycomb:index/ApiKeyPermissions:ApiKeyPermissions": {
            "properties": {
                "createDatasets": {
                    "type": "boolean",
                    "description": "Allow this key to create missing datasets when sending telemetry. Defaults to `false`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createDatasets"
                    ]
                }
            }
        },
        "honeycomb:index/BurnAlertRecipient:BurnAlertRecipient": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an already existing recipient. Should not be used in combination with `type` and `target`.\n"
                },
                "notificationDetails": {
                    "$ref": "#/types/honeycomb:index/BurnAlertRecipientNotificationDetails:BurnAlertRecipientNotificationDetails",
                    "description": "a block of additional details to send along with the notification. The only supported option currently is `pagerduty_severity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n\n| Type      | Target              |\n|-----------|---------------------|\n| email     | an email address    |\n| pagerduty | _N/A_               |\n| slack     | name of the channel |\n| webhook   | name of the webhook |\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target of the recipient, this has another meaning depending on the type of recipient (see the table below). Should not be used in combination with `id`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the recipient, allowed types are `email`, `pagerduty`, `msteams`, `slack` and `webhook`. Should not be used in combination with `id`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "target",
                        "type"
                    ]
                }
            }
        },
        "honeycomb:index/BurnAlertRecipientNotificationDetails:BurnAlertRecipientNotificationDetails": {
            "properties": {
                "pagerdutySeverity": {
                    "type": "string",
                    "description": "The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pagerdutySeverity"
                    ]
                }
            }
        },
        "honeycomb:index/GetAuthMetadataApiKeyAccess:GetAuthMetadataApiKeyAccess": {
            "properties": {
                "boards": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage Boards.\n"
                },
                "columns": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage can create and manage Queries, Columns, Derived Columns, and Query Annotations\n"
                },
                "datasets": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage Datasets.\n"
                },
                "events": {
                    "type": "boolean",
                    "description": "`true` if this API key can key can send events to Honeycomb.\n"
                },
                "markers": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage Markers.\n"
                },
                "queries": {
                    "type": "boolean",
                    "description": "`true` if this API key can execute existing Queries via the Query Data API.\n"
                },
                "recipients": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage Recipients.\n"
                },
                "slos": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage SLOs.\n"
                },
                "triggers": {
                    "type": "boolean",
                    "description": "`true` if this API key can create and manage Triggers.\n"
                }
            },
            "type": "object",
            "required": [
                "boards",
                "columns",
                "datasets",
                "events",
                "markers",
                "queries",
                "recipients",
                "slos",
                "triggers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "honeycomb:index/GetAuthMetadataEnvironment:GetAuthMetadataEnvironment": {
            "properties": {
                "classic": {
                    "type": "boolean",
                    "description": "`true` if this API key belongs to a [Honeycomb Classic](https://docs.honeycomb.io/honeycomb-classic/) environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Team.\n"
                }
            },
            "type": "object",
            "required": [
                "classic",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "honeycomb:index/GetAuthMetadataTeam:GetAuthMetadataTeam": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Team.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Team.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "honeycomb:index/GetDatasetsDetailFilter:GetDatasetsDetailFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the detail field to match on.\n"
                },
                "valueRegex": {
                    "type": "string",
                    "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "honeycomb:index/GetEnvironmentsDetailFilter:GetEnvironmentsDetailFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the detail field to match on.\n"
                },
                "valueRegex": {
                    "type": "string",
                    "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the operator to, not needed with `COUNT` or `CONCURRENCY`.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
                }
            },
            "type": "object",
            "required": [
                "op"
            ]
        },
        "honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "The column to apply the filter to.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply, see the supported list of filter operators at [Filter Operators](https://docs.honeycomb.io/api/query-specification/#filter-operators). Not all operators require a value.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value used for the filter. Not needed if op is `exists` or `not-exists`. Mutually exclusive with the other `value_*` options.\n\n* \u003e **NOTE** Filter op `in` and `not-in` expect an array of strings as value. Use the `value` attribute and pass the values in single string separated by `,` without additional spaces (similar to the query builder in the UI). For example: the list `foo`, `bar` becomes `foo,bar`.\n"
                }
            },
            "type": "object",
            "required": [
                "column",
                "op"
            ]
        },
        "honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving": {
            "properties": {
                "calculateOp": {
                    "type": "string",
                    "description": "The calculation operator to apply, supports all of the [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators) with the exception of `HEATMAP`.\n"
                },
                "column": {
                    "type": "string",
                    "description": "The column to apply the `calculate_op` to, not needed with `COUNT` or `CONCURRENCY`.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply to filter the query results. One of `=`, `!=`, `\u003e`, `\u003e=`, `\u003c`, or `\u003c=`.\n"
                },
                "value": {
                    "type": "number",
                    "description": "The value used with `op`. Currently assumed to be a number.\n\n\u003e **NOTE** A having term's `column`/`calculate_op` pair must have a corresponding `calculation`. There can be multiple `having` blocks for the same `column`/`calculate_op` pair.\n"
                }
            },
            "type": "object",
            "required": [
                "calculateOp",
                "op",
                "value"
            ]
        },
        "honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder": {
            "properties": {
                "column": {
                    "type": "string",
                    "description": "Either a column present in `breakdown` or a column that `op` applies to.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The calculation operator to apply, see the supported list of calculation operators at [Calculation Operators](https://docs.honeycomb.io/api/query-specification/#calculation-operators).\n"
                },
                "order": {
                    "type": "string",
                    "description": "The sort direction, if set must be `ascending` or `descending`.\n"
                }
            },
            "type": "object"
        },
        "honeycomb:index/GetSLOsDetailFilter:GetSLOsDetailFilter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the detail field to filter by. Currently only `name` is supported.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the detail field to match on.\n"
                },
                "valueRegex": {
                    "type": "string",
                    "description": "A regular expression string to apply to the value of the detail field to match on.\n\n\u003e **Note** one of `value` or `value_regex` is required.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "honeycomb:index/TriggerEvaluationSchedule:TriggerEvaluationSchedule": {
            "properties": {
                "daysOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of days of the week (in lowercase) to evaluate the trigger on\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "UTC time to stop evaluating the trigger in HH:mm format (e.g. `13:00`)\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "UTC time to start evaluating the trigger in HH:mm format (e.g. `13:00`)\n"
                }
            },
            "type": "object",
            "required": [
                "daysOfWeeks",
                "endTime",
                "startTime"
            ]
        },
        "honeycomb:index/TriggerRecipient:TriggerRecipient": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of an already existing recipient. Cannot not be used in combination with `type` and `target`.\n"
                },
                "notificationDetails": {
                    "$ref": "#/types/honeycomb:index/TriggerRecipientNotificationDetails:TriggerRecipientNotificationDetails",
                    "description": "a block of additional details to send along with the notification. The only supported option currently is `pagerduty_severity` which has a default value of `critical` but can be set to one of `info`, `warning`, `error`, or `critical` and must be used in combination with a PagerDuty recipient.\n\nType      | Target\n----------|-------------------------\nemail     | an email address\nmarker    | name of the marker\npagerduty | _N/A_\nslack     | name of the channel\nwebhook   | name of the webhook\n"
                },
                "target": {
                    "type": "string",
                    "description": "Target of the trigger recipient, this has another meaning depending on the type of recipient (see the table below).\nCannot not be used in combination with `id`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the trigger recipient, allowed types are `email`, `marker`, `msteams`, `pagerduty`, `slack` and `webhook`.\nCannot not be used in combination with `id`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "target",
                        "type"
                    ]
                }
            }
        },
        "honeycomb:index/TriggerRecipientNotificationDetails:TriggerRecipientNotificationDetails": {
            "properties": {
                "pagerdutySeverity": {
                    "type": "string",
                    "description": "The severity to set with the PagerDuty notification. If no severity is provided, 'critical' is assumed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pagerdutySeverity"
                    ]
                }
            }
        },
        "honeycomb:index/TriggerThreshold:TriggerThreshold": {
            "properties": {
                "exceededLimit": {
                    "type": "integer",
                    "description": "The number of times the threshold is met before an alert is sent, must be between 1 and 5. Defaults to `1`.\n"
                },
                "op": {
                    "type": "string",
                    "description": "The operator to apply, allowed threshold operators are `\u003e`, `\u003e=`, `\u003c`, and `\u003c=`.\n"
                },
                "value": {
                    "type": "number",
                    "description": "The value to be used with the operator.\n"
                }
            },
            "type": "object",
            "required": [
                "op",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "exceededLimit",
                        "op",
                        "value"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the honeycombio package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
                "secret": true
            },
            "apiKeyId": {
                "type": "string",
                "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
            },
            "apiKeySecret": {
                "type": "string",
                "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The Honeycomb API key to use. It can also be set via the `HONEYCOMB_API_KEY` or `HONEYCOMBIO_APIKEY` environment\nvariables.\n",
                "secret": true
            },
            "apiKeyId": {
                "type": "string",
                "description": "The ID portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_ID` environment\nvariable.\n"
            },
            "apiKeySecret": {
                "type": "string",
                "description": "The secret portion of the Honeycomb Management API key to use. It can also be set via the `HONEYCOMB_KEY_SECRET`\nenvironment variable.\n",
                "secret": true
            },
            "apiUrl": {
                "type": "string",
                "description": "Override the URL of the Honeycomb API. Defaults to `https://api.honeycomb.io`. It can also be set via the\n`HONEYCOMB_API_ENDPOINT` environment variable.\n"
            },
            "debug": {
                "type": "boolean",
                "description": "Enable the API client's debug logs. By default, a `TF_LOG` setting of debug or higher will enable this.\n"
            }
        }
    },
    "resources": {
        "honeycomb:index/apiKey:ApiKey": {
            "description": "## # Resource: honeycomb.ApiKey\n\nCreates a Honeycomb API Key.\nFor more information about API Keys, check out [Best Practices for API Keys](https://docs.honeycomb.io/get-started/best-practices/api-keys/).\n\n\u003e **NOTE** This resource requires the provider be configured with a Management Key with `api-keys:write` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst prodIngest = new honeycomb.ApiKey(\"prodIngest\", {\n    type: \"ingest\",\n    environmentId: _var.environment_id,\n    permissions: {\n        createDatasets: true,\n    },\n});\nexport const ingestKey = `${honeycomb_api_key.prod_ingest.id}${honeycomb_api_key.prod_ingest.secret}`;\n```\n```python\nimport pulumi\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nprod_ingest = honeycomb.ApiKey(\"prodIngest\",\n    type=\"ingest\",\n    environment_id=var[\"environment_id\"],\n    permissions={\n        \"create_datasets\": True,\n    })\npulumi.export(\"ingestKey\", f\"{honeycomb_api_key['prod_ingest']['id']}{honeycomb_api_key['prod_ingest']['secret']}\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prodIngest = new Honeycomb.ApiKey(\"prodIngest\", new()\n    {\n        Type = \"ingest\",\n        EnvironmentId = @var.Environment_id,\n        Permissions = new Honeycomb.Inputs.ApiKeyPermissionsArgs\n        {\n            CreateDatasets = true,\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ingestKey\"] = $\"{honeycomb_api_key.Prod_ingest.Id}{honeycomb_api_key.Prod_ingest.Secret}\",\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewApiKey(ctx, \"prodIngest\", \u0026honeycomb.ApiKeyArgs{\n\t\t\tType:          pulumi.String(\"ingest\"),\n\t\t\tEnvironmentId: pulumi.Any(_var.Environment_id),\n\t\t\tPermissions: \u0026honeycomb.ApiKeyPermissionsArgs{\n\t\t\t\tCreateDatasets: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ingestKey\", pulumi.Sprintf(\"%v%v\", honeycomb_api_key.Prod_ingest.Id, honeycomb_api_key.Prod_ingest.Secret))\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.ApiKey;\nimport com.pulumi.honeycomb.ApiKeyArgs;\nimport com.pulumi.honeycomb.inputs.ApiKeyPermissionsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var prodIngest = new ApiKey(\"prodIngest\", ApiKeyArgs.builder()\n            .type(\"ingest\")\n            .environmentId(var_.environment_id())\n            .permissions(ApiKeyPermissionsArgs.builder()\n                .createDatasets(true)\n                .build())\n            .build());\n\n        ctx.export(\"ingestKey\", String.format(\"%s%s\", honeycomb_api_key.prod_ingest().id(),honeycomb_api_key.prod_ingest().secret()));\n    }\n}\n```\n```yaml\nresources:\n  prodIngest:\n    type: honeycomb:ApiKey\n    properties:\n      type: ingest\n      environmentId: ${var.environment_id}\n      permissions:\n        createDatasets: true\noutputs:\n  ingestKey: ${honeycomb_api_key.prod_ingest.id}${honeycomb_api_key.prod_ingest.secret}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nAPI Keys cannot be imported.\n\n",
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Whether the API key is disabled. Defaults to `false`.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The Environment ID the API key is scoped to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API key.\n"
                },
                "permissions": {
                    "$ref": "#/types/honeycomb:index/ApiKeyPermissions:ApiKeyPermissions",
                    "description": "A configuration block (described below) setting what actions the API key can perform.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret portion of the API Key.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of API key. Currently only `ingest` is supported.\n"
                }
            },
            "required": [
                "disabled",
                "environmentId",
                "name",
                "secret",
                "type"
            ],
            "inputProperties": {
                "disabled": {
                    "type": "boolean",
                    "description": "Whether the API key is disabled. Defaults to `false`.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The Environment ID the API key is scoped to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API key.\n"
                },
                "permissions": {
                    "$ref": "#/types/honeycomb:index/ApiKeyPermissions:ApiKeyPermissions",
                    "description": "A configuration block (described below) setting what actions the API key can perform.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of API key. Currently only `ingest` is supported.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "disabled": {
                        "type": "boolean",
                        "description": "Whether the API key is disabled. Defaults to `false`.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The Environment ID the API key is scoped to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the API key.\n"
                    },
                    "permissions": {
                        "$ref": "#/types/honeycomb:index/ApiKeyPermissions:ApiKeyPermissions",
                        "description": "A configuration block (described below) setting what actions the API key can perform.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The secret portion of the API Key.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of API key. Currently only `ingest` is supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/burnAlert:BurnAlert": {
            "description": "## # Resource: honeycomb.BurnAlert\n\nCreates a burn alert. \n\nFor more information about burn alerts, \ncheck out [Define Burn Alerts](https://docs.honeycomb.io/working-with-your-data/slos/burn-alerts).\n\n## Example Usage\n\n### Basic Example - Exhaustion Time Burn Alert\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst exampleAlert = new honeycomb.BurnAlert(\"exampleAlert\", {\n    alertType: \"exhaustion_time\",\n    exhaustionMinutes: 480,\n    dataset: dataset,\n    sloId: sloId,\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"slack\",\n            target: \"#example-channel\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\nexample_alert = honeycomb.BurnAlert(\"exampleAlert\",\n    alert_type=\"exhaustion_time\",\n    exhaustion_minutes=480,\n    dataset=dataset,\n    slo_id=slo_id,\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"slack\",\n            \"target\": \"#example-channel\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var exampleAlert = new Honeycomb.BurnAlert(\"exampleAlert\", new()\n    {\n        AlertType = \"exhaustion_time\",\n        ExhaustionMinutes = 480,\n        Dataset = dataset,\n        SloId = sloId,\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"slack\",\n                Target = \"#example-channel\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\t_, err := honeycomb.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycomb.BurnAlertArgs{\n\t\t\tAlertType:         pulumi.String(\"exhaustion_time\"),\n\t\t\tExhaustionMinutes: pulumi.Int(480),\n\t\t\tDataset:           pulumi.String(dataset),\n\t\t\tSloId:             pulumi.String(sloId),\n\t\t\tRecipients: honeycomb.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"slack\"),\n\t\t\t\t\tTarget: pulumi.String(\"#example-channel\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.BurnAlert;\nimport com.pulumi.honeycomb.BurnAlertArgs;\nimport com.pulumi.honeycomb.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .alertType(\"exhaustion_time\")\n            .exhaustionMinutes(480)\n            .dataset(dataset)\n            .sloId(sloId)\n            .recipients(            \n                BurnAlertRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                BurnAlertRecipientArgs.builder()\n                    .type(\"slack\")\n                    .target(\"#example-channel\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycomb:BurnAlert\n    properties:\n      alertType: exhaustion_time\n      exhaustionMinutes: 480\n      dataset: ${dataset}\n      sloId: ${sloId}\n      # one or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: slack\n          target: '#example-channel'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Basic Example - Budget Rate Burn Alert\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst sloId = config.require(\"sloId\");\nconst exampleAlert = new honeycomb.BurnAlert(\"exampleAlert\", {\n    alertType: \"budget_rate\",\n    budgetRateWindowMinutes: 480,\n    budgetRateDecreasePercent: 1,\n    dataset: dataset,\n    sloId: sloId,\n    recipients: [{\n        type: \"webhook\",\n        target: \"name of the webhook\",\n    }],\n});\n```\n```python\nimport pulumi\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nslo_id = config.require(\"sloId\")\nexample_alert = honeycomb.BurnAlert(\"exampleAlert\",\n    alert_type=\"budget_rate\",\n    budget_rate_window_minutes=480,\n    budget_rate_decrease_percent=1,\n    dataset=dataset,\n    slo_id=slo_id,\n    recipients=[{\n        \"type\": \"webhook\",\n        \"target\": \"name of the webhook\",\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var sloId = config.Require(\"sloId\");\n    var exampleAlert = new Honeycomb.BurnAlert(\"exampleAlert\", new()\n    {\n        AlertType = \"budget_rate\",\n        BudgetRateWindowMinutes = 480,\n        BudgetRateDecreasePercent = 1,\n        Dataset = dataset,\n        SloId = sloId,\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.BurnAlertRecipientArgs\n            {\n                Type = \"webhook\",\n                Target = \"name of the webhook\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\tsloId := cfg.Require(\"sloId\")\n\t\t_, err := honeycomb.NewBurnAlert(ctx, \"exampleAlert\", \u0026honeycomb.BurnAlertArgs{\n\t\t\tAlertType:                 pulumi.String(\"budget_rate\"),\n\t\t\tBudgetRateWindowMinutes:   pulumi.Int(480),\n\t\t\tBudgetRateDecreasePercent: pulumi.Float64(1),\n\t\t\tDataset:                   pulumi.String(dataset),\n\t\t\tSloId:                     pulumi.String(sloId),\n\t\t\tRecipients: honeycomb.BurnAlertRecipientArray{\n\t\t\t\t\u0026honeycomb.BurnAlertRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"webhook\"),\n\t\t\t\t\tTarget: pulumi.String(\"name of the webhook\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.BurnAlert;\nimport com.pulumi.honeycomb.BurnAlertArgs;\nimport com.pulumi.honeycomb.inputs.BurnAlertRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var sloId = config.get(\"sloId\");\n        var exampleAlert = new BurnAlert(\"exampleAlert\", BurnAlertArgs.builder()\n            .alertType(\"budget_rate\")\n            .budgetRateWindowMinutes(480)\n            .budgetRateDecreasePercent(1)\n            .dataset(dataset)\n            .sloId(sloId)\n            .recipients(BurnAlertRecipientArgs.builder()\n                .type(\"webhook\")\n                .target(\"name of the webhook\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\n  sloId:\n    type: string\nresources:\n  exampleAlert:\n    type: honeycomb:BurnAlert\n    properties:\n      alertType: budget_rate\n      budgetRateWindowMinutes: 480\n      budgetRateDecreasePercent: 1\n      dataset: ${dataset}\n      sloId: ${sloId}\n      # one or more recipients\n      recipients:\n        - type: webhook\n          target: name of the webhook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nBurn alerts can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/burnAlert:BurnAlert my_alert my-dataset/bj9BwOb1uKz\n```\n",
            "properties": {
                "alertType": {
                    "type": "string",
                    "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
                },
                "budgetRateDecreasePercent": {
                    "type": "number",
                    "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                },
                "budgetRateWindowMinutes": {
                    "type": "integer",
                    "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this burn alert is associated with.\n"
                },
                "exhaustionMinutes": {
                    "type": "integer",
                    "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "ID of the SLO this burn alert is associated with.\n"
                }
            },
            "required": [
                "alertType",
                "dataset",
                "sloId"
            ],
            "inputProperties": {
                "alertType": {
                    "type": "string",
                    "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
                },
                "budgetRateDecreasePercent": {
                    "type": "number",
                    "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                },
                "budgetRateWindowMinutes": {
                    "type": "integer",
                    "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this burn alert is associated with.\n"
                },
                "exhaustionMinutes": {
                    "type": "integer",
                    "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                },
                "sloId": {
                    "type": "string",
                    "description": "ID of the SLO this burn alert is associated with.\n"
                }
            },
            "requiredInputs": [
                "dataset",
                "sloId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering BurnAlert resources.\n",
                "properties": {
                    "alertType": {
                        "type": "string",
                        "description": "Type of the burn alert. Valid values are `exhaustion_time` and `budget_rate`. \nDefaults to `exhaustion_time`.\n"
                    },
                    "budgetRateDecreasePercent": {
                        "type": "number",
                        "description": "The percent the budget has decreased over the budget rate window.\nThe alert will fire when this budget decrease threshold is reached.\nMust be between 0.0001% and 100%, with no more than 4 numbers past the decimal point.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                    },
                    "budgetRateWindowMinutes": {
                        "type": "integer",
                        "description": "The time period, in minutes, over which a budget rate will be calculated. \nMust be between 60 and the associated SLO's time period.\nRequired when `alert_type` is `budget_rate`.\nMust not be provided when `alert_type` is `exhaustion_time`.\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this burn alert is associated with.\n"
                    },
                    "exhaustionMinutes": {
                        "type": "integer",
                        "description": "The amount of time, in minutes, remaining before the SLO's error budget will be exhausted and \nthe alert will fire.\nMust be 0 or greater.\nRequired when `alert_type` is `exhaustion_time`.\nMust not be provided when `alert_type` is `budget_rate`.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/BurnAlertRecipient:BurnAlertRecipient"
                        },
                        "description": "Zero or more configuration blocks (described below) with the recipients to notify when the alert fires.\n"
                    },
                    "sloId": {
                        "type": "string",
                        "description": "ID of the SLO this burn alert is associated with.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/dataset:Dataset": {
            "description": "## # Resource: honeycomb.Dataset\n\nCreates a Dataset in an Environment.\n\n\u003e **Note**: prior to version 0.27.0 of the provider, datasets were *not* deleted on destroy but left in place and only removed from state.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst myDataset = new honeycomb.Dataset(\"myDataset\", {description: \"buzzing with data\"});\n```\n```python\nimport pulumi\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nmy_dataset = honeycomb.Dataset(\"myDataset\", description=\"buzzing with data\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDataset = new Honeycomb.Dataset(\"myDataset\", new()\n    {\n        Description = \"buzzing with data\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewDataset(ctx, \"myDataset\", \u0026honeycomb.DatasetArgs{\n\t\t\tDescription: pulumi.String(\"buzzing with data\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.Dataset;\nimport com.pulumi.honeycomb.DatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDataset = new Dataset(\"myDataset\", DatasetArgs.builder()\n            .description(\"buzzing with data\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDataset:\n    type: honeycomb:Dataset\n    properties:\n      description: buzzing with data\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nDatasets can be imported by their slug, e.g.\n\n```sh\n$ pulumi import honeycomb:index/dataset:Dataset my_dataset my-dataset\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "ISO8601-formatted time the dataset was created\n"
                },
                "deleteProtected": {
                    "type": "boolean",
                    "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A longer description for dataset.\n"
                },
                "expandJsonDepth": {
                    "type": "number",
                    "description": "The maximum unpacking depth of nested JSON fields.\n"
                },
                "lastWrittenAt": {
                    "type": "string",
                    "description": "ISO8601-formatted time the dataset was last written to (received event data)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dataset.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the dataset.\n"
                }
            },
            "required": [
                "createdAt",
                "deleteProtected",
                "description",
                "expandJsonDepth",
                "lastWrittenAt",
                "name",
                "slug"
            ],
            "inputProperties": {
                "deleteProtected": {
                    "type": "boolean",
                    "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A longer description for dataset.\n"
                },
                "expandJsonDepth": {
                    "type": "number",
                    "description": "The maximum unpacking depth of nested JSON fields.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dataset.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dataset resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO8601-formatted time the dataset was created\n"
                    },
                    "deleteProtected": {
                        "type": "boolean",
                        "description": "the current state of the Dataset's deletion protection status. Defaults to true. Cannot be set to false on create.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A longer description for dataset.\n"
                    },
                    "expandJsonDepth": {
                        "type": "number",
                        "description": "The maximum unpacking depth of nested JSON fields.\n"
                    },
                    "lastWrittenAt": {
                        "type": "string",
                        "description": "ISO8601-formatted time the dataset was last written to (received event data)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dataset.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the dataset.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/environment:Environment": {
            "description": "## # Resource: honeycomb.Environment\n\nCreates a Honeycomb Environment.\n\n\u003e **NOTE** This resource requires the provider be configured with a Management Key with `environments:write` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst uat = new honeycomb.Environment(\"uat\", {color: \"green\"});\n```\n```python\nimport pulumi\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nuat = honeycomb.Environment(\"uat\", color=\"green\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var uat = new Honeycomb.Environment(\"uat\", new()\n    {\n        Color = \"green\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.NewEnvironment(ctx, \"uat\", \u0026honeycomb.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"green\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.Environment;\nimport com.pulumi.honeycomb.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var uat = new Environment(\"uat\", EnvironmentArgs.builder()\n            .color(\"green\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  uat:\n    type: honeycomb:Environment\n    properties:\n      color: green\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEnvironments can be imported by their ID. e.g.\n\n```sh\n$ pulumi import honeycomb:index/environment:Environment myenv hcaen_01j1jrsewaha3m0z6fwffpcrxg\n```\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
                },
                "deleteProtected": {
                    "type": "boolean",
                    "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment. Must be unique to the Team.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the Environment.\n"
                }
            },
            "required": [
                "color",
                "deleteProtected",
                "description",
                "name",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
                },
                "deleteProtected": {
                    "type": "boolean",
                    "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment. Must be unique to the Team.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color to display the Environment in the navigation bar.\nIf not provided one will be randomly selected at creation.\nOne of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.\n"
                    },
                    "deleteProtected": {
                        "type": "boolean",
                        "description": "the current state of the Environment's deletion protection status.\nDefaults to `true`. Cannot be set to `false` on create.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Environment. Must be unique to the Team.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the Environment.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/query:Query": {
            "description": "## # Resource: honeycomb.Query\n\nCreates a Query scoped to a Dataset or Environment.\n\nQueries can be used by Triggers and Boards, or be executed via the [Query Data API](https://docs.honeycomb.io/api/query-results/).\n\n\u003e **Note** Queries are immutable and can not be deleted -- only created or read.\n  Any changes will result in a new query object being created.\n\n## Import\n\nQuerys can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/query:Query my_query my-dataset/bj8BwOa1uRz\n```\n",
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
                },
                "queryJson": {
                    "type": "string",
                    "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycomb.GetQuerySpecification` data source provides deeper validation.\n"
                }
            },
            "required": [
                "dataset",
                "queryJson"
            ],
            "inputProperties": {
                "dataset": {
                    "type": "string",
                    "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
                },
                "queryJson": {
                    "type": "string",
                    "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycomb.GetQuerySpecification` data source provides deeper validation.\n"
                }
            },
            "requiredInputs": [
                "dataset",
                "queryJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Query resources.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this query is scoped to.\nUse `__all__` for Environment-wide queries.\n"
                    },
                    "queryJson": {
                        "type": "string",
                        "description": "A JSON object describing the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification).\nWhile the JSON can be constructed manually, using the `honeycomb.GetQuerySpecification` data source provides deeper validation.\n"
                    }
                },
                "type": "object"
            }
        },
        "honeycomb:index/trigger:Trigger": {
            "description": "## # Resource: honeycomb.Trigger\n\nCreates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).\n\n## Example Usage\n\n### Basic Example\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\nimport * as honeycomb from \"@thejokersthief/pulumi-honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst exampleGetQuerySpecification = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [{\n        column: \"trace.parent_id\",\n        op: \"does-not-exist\",\n    }],\n    timeRange: 1800,\n});\nconst exampleTrigger = new honeycomb.Trigger(\"exampleTrigger\", {\n    description: \"Average duration of all requests for the last 10 minutes.\",\n    queryJson: exampleGetQuerySpecification.then(exampleGetQuerySpecification =\u003e exampleGetQuerySpecification.json),\n    dataset: dataset,\n    frequency: 600,\n    alertType: \"on_change\",\n    threshold: {\n        op: \"\u003e\",\n        value: 1000,\n    },\n    recipients: [\n        {\n            type: \"email\",\n            target: \"hello@example.com\",\n        },\n        {\n            type: \"marker\",\n            target: \"Trigger - requests are slow\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\nimport thejokersthief-pulumi-honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nexample_get_query_specification = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[{\n        \"column\": \"trace.parent_id\",\n        \"op\": \"does-not-exist\",\n    }],\n    time_range=1800)\nexample_trigger = honeycomb.Trigger(\"exampleTrigger\",\n    description=\"Average duration of all requests for the last 10 minutes.\",\n    query_json=example_get_query_specification.json,\n    dataset=dataset,\n    frequency=600,\n    alert_type=\"on_change\",\n    threshold={\n        \"op\": \"\u003e\",\n        \"value\": 1000,\n    },\n    recipients=[\n        {\n            \"type\": \"email\",\n            \"target\": \"hello@example.com\",\n        },\n        {\n            \"type\": \"marker\",\n            \"target\": \"Trigger - requests are slow\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var exampleGetQuerySpecification = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n        },\n        TimeRange = 1800,\n    });\n\n    var exampleTrigger = new Honeycomb.Trigger(\"exampleTrigger\", new()\n    {\n        Description = \"Average duration of all requests for the last 10 minutes.\",\n        QueryJson = exampleGetQuerySpecification.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n        Dataset = dataset,\n        Frequency = 600,\n        AlertType = \"on_change\",\n        Threshold = new Honeycomb.Inputs.TriggerThresholdArgs\n        {\n            Op = \"\u003e\",\n            Value = 1000,\n        },\n        Recipients = new[]\n        {\n            new Honeycomb.Inputs.TriggerRecipientArgs\n            {\n                Type = \"email\",\n                Target = \"hello@example.com\",\n            },\n            new Honeycomb.Inputs.TriggerRecipientArgs\n            {\n                Type = \"marker\",\n                Target = \"Trigger - requests are slow\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\texampleGetQuerySpecification, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeRange: pulumi.IntRef(1800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.NewTrigger(ctx, \"exampleTrigger\", \u0026honeycomb.TriggerArgs{\n\t\t\tDescription: pulumi.String(\"Average duration of all requests for the last 10 minutes.\"),\n\t\t\tQueryJson:   pulumi.String(exampleGetQuerySpecification.Json),\n\t\t\tDataset:     pulumi.String(dataset),\n\t\t\tFrequency:   pulumi.Int(600),\n\t\t\tAlertType:   pulumi.String(\"on_change\"),\n\t\t\tThreshold: \u0026honeycomb.TriggerThresholdArgs{\n\t\t\t\tOp:    pulumi.String(\"\u003e\"),\n\t\t\t\tValue: pulumi.Float64(1000),\n\t\t\t},\n\t\t\tRecipients: honeycomb.TriggerRecipientArray{\n\t\t\t\t\u0026honeycomb.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"email\"),\n\t\t\t\t\tTarget: pulumi.String(\"hello@example.com\"),\n\t\t\t\t},\n\t\t\t\t\u0026honeycomb.TriggerRecipientArgs{\n\t\t\t\t\tType:   pulumi.String(\"marker\"),\n\t\t\t\t\tTarget: pulumi.String(\"Trigger - requests are slow\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport com.pulumi.honeycomb.Trigger;\nimport com.pulumi.honeycomb.TriggerArgs;\nimport com.pulumi.honeycomb.inputs.TriggerThresholdArgs;\nimport com.pulumi.honeycomb.inputs.TriggerRecipientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var exampleGetQuerySpecification = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(GetQuerySpecificationFilterArgs.builder()\n                .column(\"trace.parent_id\")\n                .op(\"does-not-exist\")\n                .build())\n            .timeRange(1800)\n            .build());\n\n        var exampleTrigger = new Trigger(\"exampleTrigger\", TriggerArgs.builder()\n            .description(\"Average duration of all requests for the last 10 minutes.\")\n            .queryJson(exampleGetQuerySpecification.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()))\n            .dataset(dataset)\n            .frequency(600)\n            .alertType(\"on_change\")\n            .threshold(TriggerThresholdArgs.builder()\n                .op(\"\u003e\")\n                .value(1000)\n                .build())\n            .recipients(            \n                TriggerRecipientArgs.builder()\n                    .type(\"email\")\n                    .target(\"hello@example.com\")\n                    .build(),\n                TriggerRecipientArgs.builder()\n                    .type(\"marker\")\n                    .target(\"Trigger - requests are slow\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nresources:\n  exampleTrigger:\n    type: honeycomb:Trigger\n    properties:\n      description: Average duration of all requests for the last 10 minutes.\n      queryJson: ${exampleGetQuerySpecification.json}\n      dataset: ${dataset}\n      frequency: 600 # in seconds, 10 minutes\n      alertType: on_change # on_change is default, on_true can refers to the \"Alert on True\" checkbox in the UI\n      threshold:\n        op: '\u003e'\n        value: 1000\n      # zero or more recipients\n      recipients:\n        - type: email\n          target: hello@example.com\n        - type: marker\n          target: Trigger - requests are slow\nvariables:\n  exampleGetQuerySpecification:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n        timeRange: 1800\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTriggers can be imported using a combination of the dataset name and their ID, e.g.\n\n```sh\n$ pulumi import honeycomb:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G\n```\nYou can find the ID in the URL bar when visiting the trigger from the UI.\n\n",
            "properties": {
                "alertType": {
                    "type": "string",
                    "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this trigger is associated with.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the trigger.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                },
                "evaluationSchedule": {
                    "$ref": "#/types/honeycomb:index/TriggerEvaluationSchedule:TriggerEvaluationSchedule",
                    "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the trigger.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
                },
                "queryJson": {
                    "type": "string",
                    "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                },
                "threshold": {
                    "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                    "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                }
            },
            "required": [
                "alertType",
                "dataset",
                "description",
                "disabled",
                "frequency",
                "name"
            ],
            "inputProperties": {
                "alertType": {
                    "type": "string",
                    "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The dataset this trigger is associated with.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the trigger.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                },
                "evaluationSchedule": {
                    "$ref": "#/types/honeycomb:index/TriggerEvaluationSchedule:TriggerEvaluationSchedule",
                    "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the trigger.\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
                },
                "queryJson": {
                    "type": "string",
                    "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                    },
                    "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                },
                "threshold": {
                    "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                    "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                }
            },
            "requiredInputs": [
                "dataset"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Trigger resources.\n",
                "properties": {
                    "alertType": {
                        "type": "string",
                        "description": "The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this trigger is associated with.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the trigger.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "The state of the trigger. If true, the trigger will not be run. Defaults to false.\n"
                    },
                    "evaluationSchedule": {
                        "$ref": "#/types/honeycomb:index/TriggerEvaluationSchedule:TriggerEvaluationSchedule",
                        "description": "A configuration block (described below) that determines when the trigger is run.\nWhen the time is within the scheduled window the trigger will be run at the specified frequency.\nOutside of the window, the trigger will not be run.\nIf no schedule is specified, the trigger will be run at the specified frequency at all times.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "The interval (in seconds) in which to check the results of the query’s calculation against the threshold.\nThis value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).\nDefaults to 900 (15 minutes).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the trigger.\n"
                    },
                    "queryId": {
                        "type": "string",
                        "description": "The ID of the Query that the Trigger will execute. Conflicts with `query_json`.\n"
                    },
                    "queryJson": {
                        "type": "string",
                        "description": "The Query Specfication JSON for the Trigger to execute.\nProviding the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.\nConflicts with `query_id`.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/TriggerRecipient:TriggerRecipient"
                        },
                        "description": "Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.\n\nOne of `query_id` or `query_json` are required.\n\n\u003e **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.\nThe query's duration cannot be more than four times the trigger frequency (i.e. `duration \u003c= frequency*4`).\nSee [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.\nFor example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.\n"
                    },
                    "threshold": {
                        "$ref": "#/types/honeycomb:index/TriggerThreshold:TriggerThreshold",
                        "description": "A configuration block (described below) describing the threshold of the trigger.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "honeycomb:index/getAuthMetadata:GetAuthMetadata": {
            "description": "## # Data Source: honeycomb.GetAuthMetadata\n\nThe `honeycomb.GetAuthMetadata` data source retreives information about the API key used to authenticate the provider.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst current = honeycomb.GetAuthMetadata({});\nexport const teamName = current.then(current =\u003e current.team?.name);\nexport const environmentSlug = current.then(current =\u003e current.environment?.slug);\nexport const sloManagementAccess = current.then(current =\u003e current.apiKeyAccess?.slos);\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\ncurrent = honeycomb.get_auth_metadata()\npulumi.export(\"teamName\", current.team.name)\npulumi.export(\"environmentSlug\", current.environment.slug)\npulumi.export(\"sloManagementAccess\", current.api_key_access.slos)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var current = Honeycomb.GetAuthMetadata.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"teamName\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.Team?.Name),\n        [\"environmentSlug\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.Environment?.Slug),\n        [\"sloManagementAccess\"] = current.Apply(getAuthMetadataResult =\u003e getAuthMetadataResult.ApiKeyAccess?.Slos),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcurrent, err := honeycomb.GetAuthMetadata(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"teamName\", current.Team.Name)\n\t\tctx.Export(\"environmentSlug\", current.Environment.Slug)\n\t\tctx.Export(\"sloManagementAccess\", current.ApiKeyAccess.Slos)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetAuthMetadataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var current = HoneycombFunctions.GetAuthMetadata();\n\n        ctx.export(\"teamName\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.team().name()));\n        ctx.export(\"environmentSlug\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.environment().slug()));\n        ctx.export(\"sloManagementAccess\", current.applyValue(getAuthMetadataResult -\u003e getAuthMetadataResult.apiKeyAccess().slos()));\n    }\n}\n```\n```yaml\nvariables:\n  current:\n    fn::invoke:\n      Function: honeycomb:GetAuthMetadata\n      Arguments: {}\noutputs:\n  teamName: ${current.team.name}\n  environmentSlug: ${current.environment.slug}\n  sloManagementAccess: ${current.apiKeyAccess.slos}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetAuthMetadata.\n",
                "properties": {
                    "apiKeyAccess": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataApiKeyAccess:GetAuthMetadataApiKeyAccess",
                        "description": "The authorizations granted for the API key used to authenticate the provider.\nSee [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.\n"
                    },
                    "environment": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataEnvironment:GetAuthMetadataEnvironment",
                        "description": "Information about the Environment the API key is scoped to.\n"
                    },
                    "team": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataTeam:GetAuthMetadataTeam",
                        "description": "Information about the Team the API key is scoped to.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetAuthMetadata.\n",
                "properties": {
                    "apiKeyAccess": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataApiKeyAccess:GetAuthMetadataApiKeyAccess",
                        "description": "The authorizations granted for the API key used to authenticate the provider.\nSee [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.\n"
                    },
                    "environment": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataEnvironment:GetAuthMetadataEnvironment",
                        "description": "Information about the Environment the API key is scoped to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "team": {
                        "$ref": "#/types/honeycomb:index/GetAuthMetadataTeam:GetAuthMetadataTeam",
                        "description": "Information about the Team the API key is scoped to.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "honeycomb:index/getDataset:GetDataset": {
            "description": "## # Data Source: honeycomb.Dataset\n\nThe `honeycomb.Dataset` data source retrieves the details of a single Dataset.\nIf you want to retrieve multiple Datasets, use the `honeycomb.GetDatasets` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst my-service = honeycomb.GetDataset({\n    slug: \"my-service\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nmy_service = honeycomb.get_dataset(slug=\"my-service\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_service = Honeycomb.GetDataset.Invoke(new()\n    {\n        Slug = \"my-service\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetDataset(ctx, \u0026honeycomb.LookupDatasetArgs{\n\t\t\tSlug: \"my-service\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetDatasetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-service = HoneycombFunctions.GetDataset(GetDatasetArgs.builder()\n            .slug(\"my-service\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-service:\n    fn::invoke:\n      Function: honeycomb:GetDataset\n      Arguments:\n        slug: my-service\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetDataset.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The Slug of the Dataset\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetDataset.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "ISO8601-formatted time the dataset was created.\n"
                    },
                    "deleteProtected": {
                        "type": "boolean",
                        "description": "the current state of the Dataset's deletion protection status.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "the Dataset's description.\n"
                    },
                    "expandJsonDepth": {
                        "type": "number",
                        "description": "The Dataset's maximum unpacking depth of nested JSON fields.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastWrittenAt": {
                        "type": "string",
                        "description": "ISO8601-formatted time the dataset was last written to (received event data).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "the Dataset's name.\n"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "deleteProtected",
                    "description",
                    "expandJsonDepth",
                    "id",
                    "lastWrittenAt",
                    "name",
                    "slug"
                ]
            }
        },
        "honeycomb:index/getDatasets:GetDatasets": {
            "description": "## # Data Source: honeycomb.GetDatasets\n\nThe Datasets data source retrieves the Environment's Datasets.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst all = honeycomb.GetDatasets({});\nconst foo = honeycomb.GetDatasets({\n    detailFilter: {\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nall = honeycomb.get_datasets()\nfoo = honeycomb.get_datasets(detail_filter={\n    \"name\": \"name\",\n    \"value_regex\": \"foo_*\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycomb.GetDatasets.Invoke();\n\n    var foo = Honeycomb.GetDatasets.Invoke(new()\n    {\n        DetailFilter = new Honeycomb.Inputs.GetDatasetsDetailFilterInputArgs\n        {\n            Name = \"name\",\n            ValueRegex = \"foo_*\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetDatasets(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.GetDatasets(ctx, \u0026honeycomb.GetDatasetsArgs{\n\t\t\tDetailFilter: honeycomb.GetDatasetsDetailFilter{\n\t\t\t\tName:       \"name\",\n\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetDatasetsArgs;\nimport com.pulumi.honeycomb.inputs.GetDatasetsDetailFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombFunctions.GetDatasets();\n\n        final var foo = HoneycombFunctions.GetDatasets(GetDatasetsArgs.builder()\n            .detailFilter(GetDatasetsDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: honeycomb:GetDatasets\n      Arguments: {}\n  foo:\n    fn::invoke:\n      Function: honeycomb:GetDatasets\n      Arguments:\n        detailFilter:\n          name: name\n          valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetDatasets.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetDatasetsDetailFilter:GetDatasetsDetailFilter",
                        "description": "a block to further filter results as described below. `name` must be set when providing a filter. Conflicts with `starts_with`.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Deprecated: use `detail_filter` instead. Only return datasets whose name starts with the given value.\n",
                        "deprecationMessage": "Use the `detail_filter` block instead."
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetDatasets.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetDatasetsDetailFilter:GetDatasetsDetailFilter"
                    },
                    "id": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the dataset names.\n"
                    },
                    "slugs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the dataset slugs.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "deprecationMessage": "Use the `detail_filter` block instead."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "names",
                    "slugs"
                ]
            }
        },
        "honeycomb:index/getDerivedColumn:GetDerivedColumn": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst mydc = honeycomb.GetDerivedColumn({\n    dataset: dataset,\n    alias: \"mydc\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nmydc = honeycomb.get_derived_column(dataset=dataset,\n    alias=\"mydc\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var mydc = Honeycomb.GetDerivedColumn.Invoke(new()\n    {\n        Dataset = dataset,\n        Alias = \"mydc\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.GetDerivedColumn(ctx, \u0026honeycomb.GetDerivedColumnArgs{\n\t\t\tDataset: dataset,\n\t\t\tAlias:   \"mydc\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetDerivedColumnArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var mydc = HoneycombFunctions.GetDerivedColumn(GetDerivedColumnArgs.builder()\n            .dataset(dataset)\n            .alias(\"mydc\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  mydc:\n    fn::invoke:\n      Function: honeycomb:GetDerivedColumn\n      Arguments:\n        dataset: ${dataset}\n        alias: mydc\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetDerivedColumn.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The alias of the column\n"
                    },
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this derived column is associated with. Use `__all__` for Environment-wide derived columns.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "dataset"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetDerivedColumn.\n",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "the description of the derived column\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "the expression of the derived column\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "the ID of the derived column.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "dataset",
                    "description",
                    "expression",
                    "id"
                ]
            }
        },
        "honeycomb:index/getDerivedColumns:GetDerivedColumns": {
            "description": "## # Data Source: honeycomb.GetDerivedColumns\n\nThe `honeycomb.GetDerivedColumns` data source allows the derived columns of a dataset to be retrieved.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst all = honeycomb.GetDerivedColumns({\n    dataset: dataset,\n});\nconst foo = honeycomb.GetDerivedColumns({\n    dataset: dataset,\n    startsWith: \"foo_\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nall = honeycomb.get_derived_columns(dataset=dataset)\nfoo = honeycomb.get_derived_columns(dataset=dataset,\n    starts_with=\"foo_\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var all = Honeycomb.GetDerivedColumns.Invoke(new()\n    {\n        Dataset = dataset,\n    });\n\n    var foo = Honeycomb.GetDerivedColumns.Invoke(new()\n    {\n        Dataset = dataset,\n        StartsWith = \"foo_\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.GetDerivedColumns(ctx, \u0026honeycomb.GetDerivedColumnsArgs{\n\t\t\tDataset: dataset,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.GetDerivedColumns(ctx, \u0026honeycomb.GetDerivedColumnsArgs{\n\t\t\tDataset:    dataset,\n\t\t\tStartsWith: pulumi.StringRef(\"foo_\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetDerivedColumnsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var all = HoneycombFunctions.GetDerivedColumns(GetDerivedColumnsArgs.builder()\n            .dataset(dataset)\n            .build());\n\n        final var foo = HoneycombFunctions.GetDerivedColumns(GetDerivedColumnsArgs.builder()\n            .dataset(dataset)\n            .startsWith(\"foo_\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  all:\n    fn::invoke:\n      Function: honeycomb:GetDerivedColumns\n      Arguments:\n        dataset: ${dataset}\n  foo:\n    fn::invoke:\n      Function: honeycomb:GetDerivedColumns\n      Arguments:\n        dataset: ${dataset}\n        startsWith: foo_\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetDerivedColumns.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset to retrieve the columns list from. Use `__all__` for Environment-wide derived columns.\n"
                    },
                    "startsWith": {
                        "type": "string",
                        "description": "Only return derived columns starting with the given value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetDerivedColumns.\n",
                "properties": {
                    "dataset": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "names": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the derived column names found in the dataset\n"
                    },
                    "startsWith": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "id",
                    "names"
                ]
            }
        },
        "honeycomb:index/getEnvironment:GetEnvironment": {
            "description": "## # Data Source: honeycomb.Environment\n\nThe `honeycomb.Environment` data source retrieves the details of a single Environment.\nIf you want to retrieve multiple Environments, use the `honeycomb.GetEnvironments` data source instead.\n\n\u003e **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst prod = honeycomb.GetEnvironment({\n    id: \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nprod = honeycomb.get_environment(id=\"hcaen_01j1d7t02zf7wgw7q89z3t60vf\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var prod = Honeycomb.GetEnvironment.Invoke(new()\n    {\n        Id = \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetEnvironment(ctx, \u0026honeycomb.LookupEnvironmentArgs{\n\t\t\tId: \"hcaen_01j1d7t02zf7wgw7q89z3t60vf\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var prod = HoneycombFunctions.GetEnvironment(GetEnvironmentArgs.builder()\n            .id(\"hcaen_01j1d7t02zf7wgw7q89z3t60vf\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  prod:\n    fn::invoke:\n      Function: honeycomb:GetEnvironment\n      Arguments:\n        id: hcaen_01j1d7t02zf7wgw7q89z3t60vf\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetEnvironment.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the Environment\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "the Environment's color.\n"
                    },
                    "deleteProtected": {
                        "type": "boolean",
                        "description": "the current state of the Environment's deletion protection status.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "the Environment's description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "the Environment's name.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "the Environment's slug.\n"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "deleteProtected",
                    "description",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "honeycomb:index/getEnvironments:GetEnvironments": {
            "description": "## # Data Source: honeycomb.GetEnvironments\n\nThe Environments data source retrieves the Team's environments.\n\n\u003e **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst all = honeycomb.GetEnvironments({});\nconst foo = honeycomb.GetEnvironments({\n    detailFilter: {\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nall = honeycomb.get_environments()\nfoo = honeycomb.get_environments(detail_filter={\n    \"name\": \"name\",\n    \"value_regex\": \"foo_*\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var all = Honeycomb.GetEnvironments.Invoke();\n\n    var foo = Honeycomb.GetEnvironments.Invoke(new()\n    {\n        DetailFilter = new Honeycomb.Inputs.GetEnvironmentsDetailFilterInputArgs\n        {\n            Name = \"name\",\n            ValueRegex = \"foo_*\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := honeycomb.GetEnvironments(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.GetEnvironments(ctx, \u0026honeycomb.GetEnvironmentsArgs{\n\t\t\tDetailFilter: honeycomb.GetEnvironmentsDetailFilter{\n\t\t\t\tName:       \"name\",\n\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetEnvironmentsArgs;\nimport com.pulumi.honeycomb.inputs.GetEnvironmentsDetailFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var all = HoneycombFunctions.GetEnvironments();\n\n        final var foo = HoneycombFunctions.GetEnvironments(GetEnvironmentsArgs.builder()\n            .detailFilter(GetEnvironmentsDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  all:\n    fn::invoke:\n      Function: honeycomb:GetEnvironments\n      Arguments: {}\n  foo:\n    fn::invoke:\n      Function: honeycomb:GetEnvironments\n      Arguments:\n        detailFilter:\n          name: name\n          valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetEnvironments.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetEnvironmentsDetailFilter:GetEnvironmentsDetailFilter",
                        "description": "a block to further filter results as described below. `name` must be set when providing a filter.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetEnvironments.\n",
                "properties": {
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetEnvironmentsDetailFilter:GetEnvironmentsDetailFilter"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the Environment IDs found in the Team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "ids"
                ]
            }
        },
        "honeycomb:index/getQuerySpecification:GetQuerySpecification": {
            "description": "## # Data Source: honeycomb.GetQuerySpecification\n\nGenerates a [Query Specification](https://docs.honeycomb.io/api/query-specification/) in JSON format for use with resources that expect a JSON-formatted Query Specification like `honeycomb.Query`.\n\nUsing this data source to generate query specifications is optional.\nIt is also valid to use literal JSON strings in your configuration or to use the file interpolation function to read a raw JSON query specification from a file.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst example = honeycomb.GetQuerySpecification({\n    calculations: [{\n        op: \"AVG\",\n        column: \"duration_ms\",\n    }],\n    filters: [\n        {\n            column: \"trace.parent_id\",\n            op: \"does-not-exist\",\n        },\n        {\n            column: \"app.tenant\",\n            op: \"=\",\n            value: \"ThatSpecialTenant\",\n        },\n    ],\n    filterCombination: \"AND\",\n    breakdowns: [\"app.tenant\"],\n    timeRange: 28800,\n});\nexport const jsonQuery = example.then(example =\u003e example.json);\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nexample = honeycomb.get_query_specification(calculations=[{\n        \"op\": \"AVG\",\n        \"column\": \"duration_ms\",\n    }],\n    filters=[\n        {\n            \"column\": \"trace.parent_id\",\n            \"op\": \"does-not-exist\",\n        },\n        {\n            \"column\": \"app.tenant\",\n            \"op\": \"=\",\n            \"value\": \"ThatSpecialTenant\",\n        },\n    ],\n    filter_combination=\"AND\",\n    breakdowns=[\"app.tenant\"],\n    time_range=28800)\npulumi.export(\"jsonQuery\", example.json)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Honeycomb.GetQuerySpecification.Invoke(new()\n    {\n        Calculations = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationCalculationInputArgs\n            {\n                Op = \"AVG\",\n                Column = \"duration_ms\",\n            },\n        },\n        Filters = new[]\n        {\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"trace.parent_id\",\n                Op = \"does-not-exist\",\n            },\n            new Honeycomb.Inputs.GetQuerySpecificationFilterInputArgs\n            {\n                Column = \"app.tenant\",\n                Op = \"=\",\n                Value = \"ThatSpecialTenant\",\n            },\n        },\n        FilterCombination = \"AND\",\n        Breakdowns = new[]\n        {\n            \"app.tenant\",\n        },\n        TimeRange = 28800,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"jsonQuery\"] = example.Apply(getQuerySpecificationResult =\u003e getQuerySpecificationResult.Json),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := honeycomb.GetQuerySpecification(ctx, \u0026honeycomb.GetQuerySpecificationArgs{\n\t\t\tCalculations: []honeycomb.GetQuerySpecificationCalculation{\n\t\t\t\t{\n\t\t\t\t\tOp:     \"AVG\",\n\t\t\t\t\tColumn: pulumi.StringRef(\"duration_ms\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilters: []honeycomb.GetQuerySpecificationFilter{\n\t\t\t\t{\n\t\t\t\t\tColumn: \"trace.parent_id\",\n\t\t\t\t\tOp:     \"does-not-exist\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tColumn: \"app.tenant\",\n\t\t\t\t\tOp:     \"=\",\n\t\t\t\t\tValue:  pulumi.StringRef(\"ThatSpecialTenant\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tFilterCombination: pulumi.StringRef(\"AND\"),\n\t\t\tBreakdowns: []string{\n\t\t\t\t\"app.tenant\",\n\t\t\t},\n\t\t\tTimeRange: pulumi.IntRef(28800),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"jsonQuery\", example.Json)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetQuerySpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = HoneycombFunctions.GetQuerySpecification(GetQuerySpecificationArgs.builder()\n            .calculations(GetQuerySpecificationCalculationArgs.builder()\n                .op(\"AVG\")\n                .column(\"duration_ms\")\n                .build())\n            .filters(            \n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"trace.parent_id\")\n                    .op(\"does-not-exist\")\n                    .build(),\n                GetQuerySpecificationFilterArgs.builder()\n                    .column(\"app.tenant\")\n                    .op(\"=\")\n                    .value(\"ThatSpecialTenant\")\n                    .build())\n            .filterCombination(\"AND\")\n            .breakdowns(\"app.tenant\")\n            .timeRange(28800)\n            .build());\n\n        ctx.export(\"jsonQuery\", example.applyValue(getQuerySpecificationResult -\u003e getQuerySpecificationResult.json()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: honeycomb:GetQuerySpecification\n      Arguments:\n        calculations:\n          - op: AVG\n            column: duration_ms\n        filters:\n          - column: trace.parent_id\n            op: does-not-exist\n          - column: app.tenant\n            op: =\n            value: ThatSpecialTenant\n        filterCombination: AND\n        breakdowns:\n          - app.tenant\n        timeRange: 28800\noutputs:\n  jsonQuery: ${example.json}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetQuerySpecification.\n",
                "properties": {
                    "breakdowns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of fields to group by.\n"
                    },
                    "calculations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation"
                        },
                        "description": "Zero or more configuration blocks (described below) with the calculations that should be displayed. If no calculations are specified, `COUNT` will be used.\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "The absolute end time of the query in Unix Time (= seconds since epoch).\n"
                    },
                    "filterCombination": {
                        "type": "string",
                        "description": "How to combine multiple filters, either `AND` (default) or `OR`.\n"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter"
                        },
                        "description": "Zero or more configuration blocks (described below) with the filters that should be applied.\n"
                    },
                    "granularity": {
                        "type": "integer",
                        "description": "The time resolution of the query’s graph, in seconds. Valid values must be in between the query’s time range /10 at maximum, and /1000 at minimum.\n\n\u003e **NOTE** It is not allowed to specify all three of `time_range`, `start_time` and `end_time`. For more details about specifying time windows, check [Query specification: A caveat on time](https://docs.honeycomb.io/api/query-specification/#a-caveat-on-time).\n"
                    },
                    "havings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving"
                        },
                        "description": "Zero or more filters used to restrict returned groups in the query result.\n"
                    },
                    "limit": {
                        "type": "integer",
                        "description": "The maximum number of query results, must be between 1 and 1000.\n"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder"
                        },
                        "description": "Zero or more configuration blocks (described below) describing how to order the query results. Each term must appear in either `calculation` or `breakdowns`.\n"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "The absolute start time of the query in Unix Time (= seconds since epoch).\n"
                    },
                    "timeRange": {
                        "type": "integer",
                        "description": "The time range of the query in seconds, defaults to `7200` (two hours).\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by GetQuerySpecification.\n",
                "properties": {
                    "breakdowns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "calculations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationCalculation:GetQuerySpecificationCalculation"
                        }
                    },
                    "endTime": {
                        "type": "integer"
                    },
                    "filterCombination": {
                        "type": "string"
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationFilter:GetQuerySpecificationFilter"
                        }
                    },
                    "granularity": {
                        "type": "integer"
                    },
                    "havings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationHaving:GetQuerySpecificationHaving"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the query specification.\n",
                        "deprecationMessage": "The `id` attribute is deprecated and included for compatibility with the Terraform Plugin SDK. It will be removed in a future version."
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of the query according to the [Query Specification](https://docs.honeycomb.io/api/query-specification/#fields-on-a-query-specification), can be used as input for other resources.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "orders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/honeycomb:index/GetQuerySpecificationOrder:GetQuerySpecificationOrder"
                        }
                    },
                    "startTime": {
                        "type": "integer"
                    },
                    "timeRange": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "honeycomb:index/getSLO:GetSLO": {
            "description": "## # Data Source: honeycomb.GetSLO\n\nThe `honeycomb.GetSLO` data source retrieves the details of a single SLO for a dataset.\nIf you want to retreive multiple SLOs, use the `honeycomb.GetSLOs` data source instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst myslo = honeycomb.GetSLO({\n    dataset: dataset,\n    id: \"fS4WfA82ACt\",\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nmyslo = honeycomb.get_slo(dataset=dataset,\n    id=\"fS4WfA82ACt\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var myslo = Honeycomb.GetSLO.Invoke(new()\n    {\n        Dataset = dataset,\n        Id = \"fS4WfA82ACt\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.GetSLO(ctx, \u0026honeycomb.GetSLOArgs{\n\t\t\tDataset: dataset,\n\t\t\tId:      \"fS4WfA82ACt\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetSLOArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var myslo = HoneycombFunctions.GetSLO(GetSLOArgs.builder()\n            .dataset(dataset)\n            .id(\"fS4WfA82ACt\")\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  myslo:\n    fn::invoke:\n      Function: honeycomb:GetSLO\n      Arguments:\n        dataset: ${dataset}\n        id: fS4WfA82ACt\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetSLO.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset this SLO is associated with\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the SLO\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetSLO.\n",
                "properties": {
                    "dataset": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "the SLO's description.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the SLO.\n"
                    },
                    "sli": {
                        "type": "string",
                        "description": "the alias of the Derived Column used as the SLO's SLI.\n"
                    },
                    "targetPercentage": {
                        "type": "number",
                        "description": "the percentage of qualified events expected to succeed during the `time_period`.\n"
                    },
                    "timePeriod": {
                        "type": "integer",
                        "description": "The time period, in days, over which the SLO is evaluated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "description",
                    "id",
                    "name",
                    "sli",
                    "targetPercentage",
                    "timePeriod"
                ]
            }
        },
        "honeycomb:index/getSLOs:GetSLOs": {
            "description": "## # Data Source: honeycomb.GetSLOs\n\nThe SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detail_filter`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as honeycomb from \"@pulumi/honeycomb\";\n\nconst config = new pulumi.Config();\nconst dataset = config.require(\"dataset\");\nconst all = honeycomb.GetSLOs({\n    dataset: dataset,\n});\nconst foo = honeycomb.GetSLOs({\n    dataset: dataset,\n    detailFilter: {\n        name: \"name\",\n        valueRegex: \"foo_*\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_honeycomb as honeycomb\n\nconfig = pulumi.Config()\ndataset = config.require(\"dataset\")\nall = honeycomb.get_slos(dataset=dataset)\nfoo = honeycomb.get_slos(dataset=dataset,\n    detail_filter={\n        \"name\": \"name\",\n        \"value_regex\": \"foo_*\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Honeycomb = Pulumi.Honeycomb;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var dataset = config.Require(\"dataset\");\n    var all = Honeycomb.GetSLOs.Invoke(new()\n    {\n        Dataset = dataset,\n    });\n\n    var foo = Honeycomb.GetSLOs.Invoke(new()\n    {\n        Dataset = dataset,\n        DetailFilter = new Honeycomb.Inputs.GetSLOsDetailFilterInputArgs\n        {\n            Name = \"name\",\n            ValueRegex = \"foo_*\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/thejokersthief/pulumi-honeycomb/sdk/go/honeycomb\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tdataset := cfg.Require(\"dataset\")\n\t\t_, err := honeycomb.GetSLOs(ctx, \u0026honeycomb.GetSLOsArgs{\n\t\t\tDataset: dataset,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = honeycomb.GetSLOs(ctx, \u0026honeycomb.GetSLOsArgs{\n\t\t\tDataset: dataset,\n\t\t\tDetailFilter: honeycomb.GetSLOsDetailFilter{\n\t\t\t\tName:       \"name\",\n\t\t\t\tValueRegex: pulumi.StringRef(\"foo_*\"),\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.honeycomb.HoneycombFunctions;\nimport com.pulumi.honeycomb.inputs.GetSLOsArgs;\nimport com.pulumi.honeycomb.inputs.GetSLOsDetailFilterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var dataset = config.get(\"dataset\");\n        final var all = HoneycombFunctions.GetSLOs(GetSLOsArgs.builder()\n            .dataset(dataset)\n            .build());\n\n        final var foo = HoneycombFunctions.GetSLOs(GetSLOsArgs.builder()\n            .dataset(dataset)\n            .detailFilter(GetSLOsDetailFilterArgs.builder()\n                .name(\"name\")\n                .valueRegex(\"foo_*\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  dataset:\n    type: string\nvariables:\n  all:\n    fn::invoke:\n      Function: honeycomb:GetSLOs\n      Arguments:\n        dataset: ${dataset}\n  foo:\n    fn::invoke:\n      Function: honeycomb:GetSLOs\n      Arguments:\n        dataset: ${dataset}\n        detailFilter:\n          name: name\n          valueRegex: foo_*\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking GetSLOs.\n",
                "properties": {
                    "dataset": {
                        "type": "string",
                        "description": "The dataset to retrieve the SLOs list from\n"
                    },
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetSLOsDetailFilter:GetSLOsDetailFilter",
                        "description": "a block to further filter results as described below. `name` must be set when providing a filter.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by GetSLOs.\n",
                "properties": {
                    "dataset": {
                        "type": "string"
                    },
                    "detailFilter": {
                        "$ref": "#/types/honeycomb:index/GetSLOsDetailFilter:GetSLOsDetailFilter"
                    },
                    "id": {
                        "type": "string"
                    },
                    "ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "a list of all the SLO IDs found in the dataset\n"
                    }
                },
                "type": "object",
                "required": [
                    "dataset",
                    "id",
                    "ids"
                ]
            }
        }
    }
}